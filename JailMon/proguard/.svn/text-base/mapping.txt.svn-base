android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> b
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.c:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.d:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> P
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> u
    android.support.v4.app.Fragment mParentFragment -> v
    int mFragmentId -> w
    int mContainerId -> x
    java.lang.String mTag -> y
    boolean mHidden -> z
    boolean mDetached -> A
    boolean mRetainInstance -> B
    boolean mRetaining -> C
    boolean mHasMenu -> D
    boolean mMenuVisible -> E
    boolean mCalled -> F
    int mNextAnim -> G
    android.view.ViewGroup mContainer -> H
    android.view.View mView -> I
    android.view.View mInnerView -> J
    boolean mDeferStart -> K
    boolean mUserVisibleHint -> L
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> M
    boolean mLoadersStarted -> N
    boolean mCheckedForLoaderManager -> O
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> b
    android.content.res.Resources getResources() -> c
    boolean isDetached() -> d
    void onHiddenChanged(boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> c
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> e
    void onStart() -> e
    void onResume() -> f
    void onSaveInstanceState(android.os.Bundle) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> g
    void onStop() -> h
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> i
    void onDestroy() -> j
    void initState() -> k
    void onDetach() -> l
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> m
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> n
    void performCreate(android.os.Bundle) -> g
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> h
    void performStart() -> o
    void performResume() -> p
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> q
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> i
    void performPause() -> r
    void performStop() -> s
    void performReallyStop() -> t
    void performDestroyView() -> u
    void performDestroy() -> v
android.support.v4.app.Fragment$1 -> android.support.v4.app.e:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.f:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.g:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.h:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    java.util.HashMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.i:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.j:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    java.util.HashMap children -> c
    java.util.ArrayList fragments -> d
    java.util.HashMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.k:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.l:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.m:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.n:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.o:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.p:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.q:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.r:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.s:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.t:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.u:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.v:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    int commit() -> a
android.support.v4.app.LoaderManager -> android.support.v4.app.w:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.x:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.y:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.z:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.aa:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.ab:
android.support.v4.content.Loader -> android.support.v4.a.a:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.b:
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.c:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    void gc() -> c
    int size() -> a
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> b
    int idealByteArraySize(int) -> c
    int idealIntArraySize(int) -> d
android.support.v4.view.KeyEventCompat -> android.support.v4.view.a:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.b:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.c:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.d:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.e:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> a
android.support.v4.view.MotionEventCompat -> android.support.v4.view.f:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionIndex(android.view.MotionEvent) -> a
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.g:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.h:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.i:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.j:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.PagerAdapter -> android.support.v4.view.k:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> a
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.l:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.m:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.n:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.o:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.p:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.ViewCompat -> android.support.v4.view.q:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.r:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.s:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.t:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.u:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.v:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.w:
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.x:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.y:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.z:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.aa:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.ab:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    java.util.Comparator COMPARATOR -> b
    android.view.animation.Interpolator sInterpolator -> c
    java.util.ArrayList mItems -> d
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> e
    android.graphics.Rect mTempRect -> f
    android.support.v4.view.PagerAdapter mAdapter -> g
    int mCurItem -> h
    int mRestoredCurItem -> i
    android.os.Parcelable mRestoredAdapterState -> j
    java.lang.ClassLoader mRestoredClassLoader -> k
    android.widget.Scroller mScroller -> l
    android.support.v4.view.ViewPager$PagerObserver mObserver -> m
    int mPageMargin -> n
    android.graphics.drawable.Drawable mMarginDrawable -> o
    int mTopPageBounds -> p
    int mBottomPageBounds -> q
    float mFirstOffset -> r
    float mLastOffset -> s
    int mChildWidthMeasureSpec -> t
    int mChildHeightMeasureSpec -> u
    boolean mInLayout -> v
    boolean mScrollingCacheEnabled -> w
    boolean mPopulatePending -> x
    int mOffscreenPageLimit -> y
    boolean mIsBeingDragged -> z
    boolean mIsUnableToDrag -> A
    int mDefaultGutterSize -> B
    int mGutterSize -> C
    int mTouchSlop -> D
    float mLastMotionX -> E
    float mLastMotionY -> F
    float mInitialMotionX -> G
    float mInitialMotionY -> H
    int mActivePointerId -> I
    android.view.VelocityTracker mVelocityTracker -> J
    int mMinimumVelocity -> K
    int mMaximumVelocity -> L
    int mFlingDistance -> M
    int mCloseEnough -> N
    boolean mFakeDragging -> O
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> P
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> Q
    boolean mFirstLayout -> R
    boolean mNeedCalculatePageOffsets -> S
    boolean mCalledSuper -> T
    int mDecorChildCount -> U
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> W
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> Z
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> aa
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ab
    int mDrawingOrder -> ac
    java.util.ArrayList mDrawingOrderedChildren -> ad
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> ae
    java.lang.Runnable mEndScrollRunnable -> af
    int mScrollState -> ag
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> f
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> a
    void populate() -> b
    void populate(int) -> a
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> g
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> h
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> c
    boolean pageRight() -> d
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$400() -> e
android.support.v4.view.ViewPager$1 -> android.support.v4.view.ac:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.ad:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.ae:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.af:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ag:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.ah:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.ai:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.aj:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.ak:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.al:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.am:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.d.a:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.d.b:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.d.c:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.d.d:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.d.e:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
com.ceres.jailmon.AnimationUtil -> com.ceres.jailmon.a:
    android.app.Activity m_activity -> a
    android.view.animation.Animation m_AniSlideIn -> b
    android.view.animation.Animation m_AniFlipLeftIn -> c
    android.view.animation.Animation m_aniFadeIn -> d
    android.view.animation.LayoutAnimationController m_listController -> e
    void loadListControl() -> a
com.ceres.jailmon.ApiClient -> com.ceres.jailmon.b:
    java.lang.String[][] LOCAL_TABLE -> a
    com.ceres.jailmon.AppContext m_application -> b
    int m_last_error -> c
    java.lang.String getDemoXMLFile(java.lang.String) -> a
    java.lang.String getAPIUrl(java.lang.String) -> b
    com.ceres.jailmon.data.AuthResult getAuthResult(java.lang.String,java.lang.String) -> a
    com.ceres.jailmon.data.SignInResult getSignInResult(java.lang.String) -> c
    com.ceres.jailmon.data.CellList getCellList(java.lang.String) -> d
    com.ceres.jailmon.data.PrisonerList getPrisonerList(java.lang.String) -> e
    com.ceres.jailmon.data.PrisonerDetail getPrisonerDetail(java.lang.String) -> f
    android.graphics.Bitmap getPrisonerPhoto(java.lang.String) -> g
    android.graphics.Bitmap getPolicePhoto(java.lang.String) -> h
    com.ceres.jailmon.data.Account getPrisonerAccount(java.lang.String) -> i
    com.ceres.jailmon.data.ShiftInfoList getShiftInfoList(java.lang.String) -> j
    com.ceres.jailmon.data.MapInfo getMapInfo() -> a
    com.ceres.jailmon.data.MapLocationList getMapLocationList() -> b
    com.ceres.jailmon.data.MedcineInfoList getMedcineInfoList(java.lang.String) -> k
    com.ceres.jailmon.data.MedcineResult postMedcineResultInfo(java.lang.String,java.lang.String) -> b
    com.ceres.jailmon.data.OutInfoList getOutInfoList(java.lang.String) -> l
    com.ceres.jailmon.data.PowerInfoList getPowerInfoList(java.lang.String) -> m
    com.ceres.jailmon.data.PowerCtrlResult postPowerCtrlResult(java.lang.String,java.lang.String) -> c
    com.ceres.jailmon.data.SecurityInfoList getSecurityInfoList() -> c
    com.ceres.jailmon.data.GoodsList getGoodsList() -> d
    com.ceres.jailmon.data.BedInfoList getBedInfoList(java.lang.String) -> n
    com.ceres.jailmon.data.DutyInfoList getDutyInfoList(java.lang.String) -> o
    com.ceres.jailmon.data.AgentInfoList getAgentInfoList(java.lang.String) -> p
    com.ceres.jailmon.data.RuleBreakInfoList getRuleBreakInfoList(java.lang.String) -> q
    com.ceres.jailmon.data.TradeInfoList getTradeInfoList(java.lang.String) -> r
    com.ceres.jailmon.data.TrainingList getTrainingList() -> e
    com.ceres.jailmon.data.RuleBreakItemsList getRuleBreakItemsList() -> f
    com.ceres.jailmon.data.MonitorInfoList getMonitorInfoList() -> g
    com.ceres.jailmon.data.PurchaseResult postPurchaseResult(java.lang.String,java.lang.String) -> d
    com.ceres.jailmon.data.TrainingResult postTrainingResult(java.lang.String,java.lang.String,java.lang.String) -> a
    com.ceres.jailmon.data.RuleBreakResult postRuleBreakResult(java.lang.String,java.lang.String,java.lang.String) -> b
    com.ceres.jailmon.data.CommonResult postDoctorNote(java.lang.String,java.lang.String) -> e
    com.ceres.jailmon.data.CommonResult postPoliceNote(java.lang.String,java.lang.String) -> f
    com.ceres.jailmon.data.SecurityInfoList getSecurityRBInfoList(java.lang.String) -> s
    java.io.InputStream requestHttpGet(java.lang.String) -> t
    java.io.InputStream requestHttpPost(java.lang.String,java.lang.String) -> g
    java.io.InputStream read_local(java.lang.String) -> u
    java.io.InputStream http_get(java.lang.String) -> v
    java.io.InputStream http_post(java.lang.String,java.lang.String) -> h
    void saveBitmap(android.graphics.Bitmap,java.lang.String) -> a
com.ceres.jailmon.AppContext -> com.ceres.jailmon.AppContext:
    com.ceres.jailmon.ApiClient m_apiclient -> a
    com.ceres.jailmon.SettingData m_setting -> b
    int m_monitor_type -> c
    void onCreate() -> onCreate
    void setMonitorType(int) -> a
    int getMonitorType() -> a
    int getVerNum() -> b
    boolean isNetworkConnected() -> k
    com.ceres.jailmon.data.AuthResult getAuthResult(java.lang.String,java.lang.String) -> a
    com.ceres.jailmon.data.SignInResult getSignInResult(java.lang.String) -> a
    com.ceres.jailmon.data.CellList getCellList() -> c
    void checkNetworkConnected() -> l
    com.ceres.jailmon.data.PrisonerList getPrisonerList(java.lang.String) -> b
    com.ceres.jailmon.data.PrisonerDetail getPrisonerDetail(java.lang.String) -> c
    com.ceres.jailmon.data.Account getPrisonerAccount(java.lang.String) -> d
    android.graphics.Bitmap getPrisonerPhoto(java.lang.String) -> e
    android.graphics.Bitmap getPolicePhoto(java.lang.String) -> f
    com.ceres.jailmon.data.GoodsList getGoodsList() -> d
    com.ceres.jailmon.data.PurchaseResult postPurchaseResult(java.lang.String,java.lang.String) -> b
    com.ceres.jailmon.data.ShiftInfoList getShiftInfoList(java.lang.String) -> g
    com.ceres.jailmon.data.MedcineInfoList getMedcineInfoList(java.lang.String) -> h
    com.ceres.jailmon.data.MedcineResult postMedcineResultInfo(java.lang.String,java.lang.String) -> c
    com.ceres.jailmon.data.OutInfoList getOutInfoList(java.lang.String) -> i
    com.ceres.jailmon.data.SecurityInfoList getSecurityInfoList() -> e
    com.ceres.jailmon.data.PowerInfoList getPowerInfoList(java.lang.String) -> j
    com.ceres.jailmon.data.RuleBreakInfoList getRuleBreakInfoList(java.lang.String) -> k
    com.ceres.jailmon.data.RuleBreakItemsList getRuleBreakItemsList() -> f
    com.ceres.jailmon.data.TradeInfoList getTradeInfoList(java.lang.String) -> l
    com.ceres.jailmon.data.TrainingList getTrainingList() -> g
    com.ceres.jailmon.data.PowerCtrlResult postPowerCtrlResult(java.lang.String,java.lang.String) -> d
    com.ceres.jailmon.data.TrainingResult postTrainingResult(java.lang.String,java.lang.String,java.lang.String) -> a
    com.ceres.jailmon.data.RuleBreakResult postRuleBreakResult(java.lang.String,java.lang.String,java.lang.String) -> b
    com.ceres.jailmon.data.MapInfo getMapInfo() -> h
    com.ceres.jailmon.data.MapLocationList getMapLocationList() -> i
    com.ceres.jailmon.data.MonitorInfoList getMonitorInfoList() -> j
    com.ceres.jailmon.data.BedInfoList getBedInfoList(java.lang.String) -> m
    com.ceres.jailmon.data.DutyInfoList getDutyInfoList(java.lang.String) -> n
    com.ceres.jailmon.data.AgentInfoList getAgentInfoList(java.lang.String) -> o
    com.ceres.jailmon.data.CommonResult postDoctorNote(java.lang.String,java.lang.String) -> e
    com.ceres.jailmon.data.CommonResult postPoliceNote(java.lang.String,java.lang.String) -> f
    com.ceres.jailmon.data.SecurityInfoList getSecurityRBInfoList(java.lang.String) -> p
com.ceres.jailmon.AppException -> com.ceres.jailmon.c:
    byte type -> a
    int code -> b
    java.lang.Thread$UncaughtExceptionHandler mDefaultHandler -> c
    int getCode() -> a
    int getType() -> b
    void makeToast(android.content.Context) -> a
    com.ceres.jailmon.AppException http(java.lang.Exception) -> a
    com.ceres.jailmon.AppException socket(java.lang.Exception) -> b
    com.ceres.jailmon.AppException xml(java.lang.Exception) -> c
    com.ceres.jailmon.AppException network(java.lang.Exception) -> d
    com.ceres.jailmon.AppException filenotfound(java.lang.Exception) -> e
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
    boolean handleException(java.lang.Throwable) -> a
com.ceres.jailmon.BaseActivity -> com.ceres.jailmon.d:
    com.ceres.jailmon.AppContext m_AppContext -> a
    android.view.LayoutInflater layoutInflater -> b
    android.view.View myLoginView -> c
    android.app.Dialog alertDialog -> d
    android.os.Handler m_basehandler -> e
    void onCreate(android.os.Bundle) -> onCreate
    void initBackButton(int) -> a
    void showProcessDialog() -> a
    void closeProcessDialog() -> b
    com.ceres.jailmon.SettingData getSetting() -> c
    void showSubmitResult(boolean) -> a
    void onReceiveFail(com.ceres.jailmon.AppException) -> a
    void getAuthResult(android.os.Handler,java.lang.String,java.lang.String) -> a
    void onReceiveAuthResult(com.ceres.jailmon.data.AuthResult) -> a
    void getCellList(android.os.Handler) -> a
    void onReceiveCellList(com.ceres.jailmon.data.CellList) -> a
    void getPrisonerList(android.os.Handler,java.lang.String) -> a
    void onReceivePrisonerList(com.ceres.jailmon.data.PrisonerList) -> a
    void getPrisonserDetail(android.os.Handler,java.lang.String) -> b
    void onReceivePrisonerDetail(com.ceres.jailmon.data.PrisonerDetail) -> a
    void getPrisonserPhoto(android.os.Handler,java.lang.String) -> c
    void onReceivePrisonerPhoto(android.graphics.Bitmap) -> a
    void getPrisonserAccount(android.os.Handler,java.lang.String) -> d
    void onReceiveAccount(com.ceres.jailmon.data.Account) -> a
    void getGoodsList(android.os.Handler) -> b
    void onReceiveGoodsList(com.ceres.jailmon.data.GoodsList) -> a
    void postPurchaseResult(android.os.Handler,java.lang.String,java.lang.String) -> b
    void onReceivePurchaseResult(com.ceres.jailmon.data.PurchaseResult) -> a
    void getMedcineInfoList(android.os.Handler,java.lang.String) -> e
    void onReceiveMedinfoList(com.ceres.jailmon.data.MedcineInfoList) -> a
    void postMedcineResultInfo(android.os.Handler,java.lang.String,java.lang.String) -> c
    void onReceiveMedinfoPostResult(com.ceres.jailmon.data.MedcineResult) -> a
    void getOutInfoList(android.os.Handler,java.lang.String) -> f
    void onReceiveOutInfoList(com.ceres.jailmon.data.OutInfoList) -> a
    void getMapInfo(android.os.Handler) -> c
    void onReceiveMapInfo(com.ceres.jailmon.data.MapInfo) -> a
    void getMapLocationList(android.os.Handler) -> d
    void onReceiveMapLocation(com.ceres.jailmon.data.MapLocationList) -> a
    void getPowerInfoList(android.os.Handler,java.lang.String) -> g
    void onReceivePowerInfoList(com.ceres.jailmon.data.PowerInfoList) -> a
    void postPowerCtrlResult(android.os.Handler,java.lang.String,java.lang.String) -> d
    void onPostPowerCtrlResult(com.ceres.jailmon.data.PowerCtrlResult) -> a
    void postTrainingResult(android.os.Handler,java.lang.String,java.lang.String,java.lang.String) -> a
    void onPostTrainingResult(com.ceres.jailmon.data.TrainingResult) -> a
    void postRuleBreakResult(android.os.Handler,java.lang.String,java.lang.String,java.lang.String) -> b
    void onPostRuleBreakInfoResult(com.ceres.jailmon.data.RuleBreakResult) -> a
    void getSecurityfoList(android.os.Handler) -> e
    void onReceiveSecurityInfo(com.ceres.jailmon.data.SecurityInfoList) -> a
    void getShiftInfoList(android.os.Handler,java.lang.String) -> h
    void onReceiveShiftInfoList(com.ceres.jailmon.data.ShiftInfoList) -> a
    void getRuleBreakInfoList(android.os.Handler,java.lang.String) -> i
    void onReceiveRuleBreakInfoList(com.ceres.jailmon.data.RuleBreakInfoList) -> a
    void getRuleBreakItemsList(android.os.Handler) -> f
    void onReceiveRuleBreakItemsList(com.ceres.jailmon.data.RuleBreakItemsList) -> a
    void getTradeInfoList(android.os.Handler,java.lang.String) -> j
    void onReceiveTradeInfoList(com.ceres.jailmon.data.TradeInfoList) -> a
    void getTrainingList(android.os.Handler) -> g
    void onReceiveTrainingList(com.ceres.jailmon.data.TrainingList) -> a
    void getMonitorInfoList(android.os.Handler) -> h
    void getBedInfoList(android.os.Handler,java.lang.String) -> k
    void onReceiveBedInfoList(com.ceres.jailmon.data.BedInfoList) -> a
    void getDutyInfoList(android.os.Handler,java.lang.String) -> l
    void onReceiveDutyInfoList(com.ceres.jailmon.data.DutyInfoList) -> a
    void getAgentInfoList(android.os.Handler,java.lang.String) -> m
    void onReceiveAgentInfoList(com.ceres.jailmon.data.AgentInfoList) -> a
    java.lang.String getDeviceID() -> d
    void getAllPrisonserPhoto(android.os.Handler,com.ceres.jailmon.data.PrisonerList) -> a
    void onReceiveAllPrisonerPhotoNotify() -> e
    void onReceiveAllPolicePhotoNotify() -> f
    void getAllPolicePhoto(android.os.Handler,java.util.List) -> a
    void onReceivePolicePhoto(android.graphics.Bitmap) -> b
    void loadAgentsPhoto(android.os.Handler,com.ceres.jailmon.data.AgentInfo) -> a
    void onReceiveAgentPhotoNotify() -> g
    void postDoctorNote(android.os.Handler,java.lang.String,java.lang.String) -> e
    void onReceiveDoctorNoteResult(com.ceres.jailmon.data.CommonResult) -> a
    void postPoliceNote(android.os.Handler,java.lang.String,java.lang.String) -> f
    void onReceivePoliceNoteResult(com.ceres.jailmon.data.CommonResult) -> b
    void getSignInResult(android.os.Handler,java.lang.String) -> n
    void onReceiveSignInResult(com.ceres.jailmon.data.SignInResult) -> a
    void getSecurityRBInfoList(android.os.Handler,java.lang.String) -> o
    void onReceiveSecurityRBInfo(com.ceres.jailmon.data.SecurityInfoList) -> b
    void onReceiveServerTimeResult(com.ceres.jailmon.data.ServerTime) -> a
    boolean verifyRegisterNum(java.lang.String,java.lang.String) -> a
com.ceres.jailmon.BaseActivity$1 -> com.ceres.jailmon.e:
    com.ceres.jailmon.BaseActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.ceres.jailmon.BaseActivity$10 -> com.ceres.jailmon.f:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$pid -> b
    java.lang.String val$param -> c
    android.os.Handler val$handler -> d
    void run() -> run
com.ceres.jailmon.BaseActivity$11 -> com.ceres.jailmon.g:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$cid -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$12 -> com.ceres.jailmon.h:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$cid -> b
    java.lang.String val$param -> c
    android.os.Handler val$handler -> d
    void run() -> run
com.ceres.jailmon.BaseActivity$13 -> com.ceres.jailmon.i:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$cid -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$14 -> com.ceres.jailmon.j:
    com.ceres.jailmon.BaseActivity this$0 -> a
    android.os.Handler val$handler -> b
    void run() -> run
com.ceres.jailmon.BaseActivity$15 -> com.ceres.jailmon.k:
    com.ceres.jailmon.BaseActivity this$0 -> a
    android.os.Handler val$handler -> b
    void run() -> run
com.ceres.jailmon.BaseActivity$16 -> com.ceres.jailmon.l:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$cid -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$17 -> com.ceres.jailmon.m:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$cids -> b
    java.lang.String val$param -> c
    android.os.Handler val$handler -> d
    void run() -> run
com.ceres.jailmon.BaseActivity$18 -> com.ceres.jailmon.n:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$cids -> b
    java.lang.String val$type -> c
    java.lang.String val$id -> d
    android.os.Handler val$handler -> e
    void run() -> run
com.ceres.jailmon.BaseActivity$19 -> com.ceres.jailmon.o:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$cid -> b
    java.lang.String val$pid -> c
    java.lang.String val$content -> d
    android.os.Handler val$handler -> e
    void run() -> run
com.ceres.jailmon.BaseActivity$2 -> com.ceres.jailmon.p:
    com.ceres.jailmon.BaseActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.BaseActivity$20 -> com.ceres.jailmon.q:
    com.ceres.jailmon.BaseActivity this$0 -> a
    android.os.Handler val$handler -> b
    void run() -> run
com.ceres.jailmon.BaseActivity$21 -> com.ceres.jailmon.r:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$day -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$22 -> com.ceres.jailmon.s:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$pid -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$23 -> com.ceres.jailmon.t:
    com.ceres.jailmon.BaseActivity this$0 -> a
    android.os.Handler val$handler -> b
    void run() -> run
com.ceres.jailmon.BaseActivity$24 -> com.ceres.jailmon.u:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$pid -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$25 -> com.ceres.jailmon.v:
    com.ceres.jailmon.BaseActivity this$0 -> a
    android.os.Handler val$handler -> b
    void run() -> run
com.ceres.jailmon.BaseActivity$26 -> com.ceres.jailmon.w:
    com.ceres.jailmon.BaseActivity this$0 -> a
    android.os.Handler val$handler -> b
    void run() -> run
com.ceres.jailmon.BaseActivity$27 -> com.ceres.jailmon.x:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$cid -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$28 -> com.ceres.jailmon.y:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$cid -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$29 -> com.ceres.jailmon.z:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$cid -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$3 -> com.ceres.jailmon.aa:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$user -> b
    java.lang.String val$passwd -> c
    android.os.Handler val$handler -> d
    void run() -> run
com.ceres.jailmon.BaseActivity$30 -> com.ceres.jailmon.ab:
    com.ceres.jailmon.BaseActivity this$0 -> a
    com.ceres.jailmon.data.PrisonerList val$infolist -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$31 -> com.ceres.jailmon.ac:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.util.List val$infolist -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$33 -> com.ceres.jailmon.ad:
    com.ceres.jailmon.BaseActivity this$0 -> a
    com.ceres.jailmon.data.AgentInfo val$info -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$34 -> com.ceres.jailmon.ae:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$cid -> b
    java.lang.String val$note -> c
    android.os.Handler val$handler -> d
    void run() -> run
com.ceres.jailmon.BaseActivity$35 -> com.ceres.jailmon.af:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$cid -> b
    java.lang.String val$note -> c
    android.os.Handler val$handler -> d
    void run() -> run
com.ceres.jailmon.BaseActivity$36 -> com.ceres.jailmon.ag:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$id -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$37 -> com.ceres.jailmon.ah:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$cid -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$4 -> com.ceres.jailmon.ai:
    com.ceres.jailmon.BaseActivity this$0 -> a
    android.os.Handler val$handler -> b
    void run() -> run
com.ceres.jailmon.BaseActivity$5 -> com.ceres.jailmon.aj:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$cid -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$6 -> com.ceres.jailmon.ak:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$pid -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$7 -> com.ceres.jailmon.al:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$pid -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$8 -> com.ceres.jailmon.am:
    com.ceres.jailmon.BaseActivity this$0 -> a
    java.lang.String val$pid -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.ceres.jailmon.BaseActivity$9 -> com.ceres.jailmon.an:
    com.ceres.jailmon.BaseActivity this$0 -> a
    android.os.Handler val$handler -> b
    void run() -> run
com.ceres.jailmon.BootBroadcastReceiver -> com.ceres.jailmon.BootBroadcastReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.ceres.jailmon.CallingActivity -> com.ceres.jailmon.CallingActivity:
    void onCreate(android.os.Bundle) -> onCreate
com.ceres.jailmon.CallingActivity$1 -> com.ceres.jailmon.ao:
    com.ceres.jailmon.CallingActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.Encryption -> com.ceres.jailmon.ap:
    java.lang.String decrypt(java.lang.String,java.lang.String) -> a
    byte[] getRawKey(byte[]) -> a
    byte[] decrypt(byte[],byte[]) -> a
    byte[] toByte(java.lang.String) -> a
com.ceres.jailmon.LearningActivity -> com.ceres.jailmon.LearningActivity:
    int m_nMode -> m
    android.widget.LinearLayout m_layoutRooms -> n
    android.widget.LinearLayout m_layoutConent -> o
    android.widget.ListView m_listViewRooms -> p
    android.widget.ListView m_listViewTV -> q
    android.widget.ListView m_listViewMovie -> r
    android.widget.ListView m_listViewMusic -> s
    android.widget.TextView txtSelectAll -> t
    android.widget.TextView txtSelectMulti -> u
    com.ceres.jailmon.data.Cell m_cell -> f
    com.ceres.jailmon.data.CellList m_celllist -> v
    com.ceres.jailmon.adapter.CustomAdapter_MainList m_adapterSingle -> g
    com.ceres.jailmon.adapter.CustomAdapter_MainListChoice m_adapterMulti -> h
    com.ceres.jailmon.AnimationUtil m_aniset -> w
    com.ceres.jailmon.adapter.CustomAdapter_TrainingInfo m_adapterTV -> i
    com.ceres.jailmon.adapter.CustomAdapter_TrainingInfo m_adapterMovie -> j
    com.ceres.jailmon.adapter.CustomAdapter_TrainingInfo m_adapterMusic -> k
    com.ceres.jailmon.adapter.onPlayListener m_onPlayListener -> l
    void onCreate(android.os.Bundle) -> onCreate
    int getMode() -> h
    void setMode(int) -> b
    void initCellListView() -> i
    void initContentViews() -> j
    void loadRooms() -> k
    void onReceiveCellList(com.ceres.jailmon.data.CellList) -> a
    void loadTrainingList() -> l
    void onReceiveTrainingList(com.ceres.jailmon.data.TrainingList) -> a
    void onPostTrainingResult(com.ceres.jailmon.data.TrainingResult) -> a
    int access$0(com.ceres.jailmon.LearningActivity) -> a
    com.ceres.jailmon.data.CellList access$1(com.ceres.jailmon.LearningActivity) -> b
    android.widget.LinearLayout access$2(com.ceres.jailmon.LearningActivity) -> c
com.ceres.jailmon.LearningActivity$1 -> com.ceres.jailmon.aq:
    com.ceres.jailmon.LearningActivity this$0 -> a
    void onPlay(com.ceres.jailmon.data.Training) -> a
com.ceres.jailmon.LearningActivity$2 -> com.ceres.jailmon.ar:
    com.ceres.jailmon.LearningActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.LearningActivity$3 -> com.ceres.jailmon.as:
    com.ceres.jailmon.LearningActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.LearningActivity$4 -> com.ceres.jailmon.at:
    com.ceres.jailmon.LearningActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.LoginActivity -> com.ceres.jailmon.LoginActivity:
    android.widget.EditText m_editUser -> h
    android.widget.EditText m_editPasswd -> i
    android.widget.EditText m_editServer -> j
    android.widget.CheckBox m_checkSaveInfo -> k
    android.widget.Button m_buttonLogin -> l
    android.widget.Button m_buttonMode -> m
    android.widget.LinearLayout m_layoutAdvance -> n
    android.widget.ProgressBar m_progressLogin -> o
    android.widget.LinearLayout m_layoutReg -> p
    android.widget.LinearLayout m_layoutLogin -> q
    android.widget.Button m_buttonOK -> r
    android.widget.EditText m_editReg -> s
    android.widget.EditText m_textDevID -> t
    android.widget.EditText m_editAuthCode -> u
    android.widget.TextView m_textAuthCode -> v
    int m_nMode -> f
    com.ceres.jailmon.LoginActivity$LoginInfo m_logininfo -> g
    void onCreate(android.os.Bundle) -> onCreate
    void Login() -> i
    void onReceiveAuthResult(com.ceres.jailmon.data.AuthResult) -> a
    void onReceiveFail(com.ceres.jailmon.AppException) -> a
    void EnterMainMenu() -> j
    void ShowError(int) -> b
    boolean SaveLoginInfo(com.ceres.jailmon.LoginActivity$LoginInfo) -> a
    void ClearLoginInfo() -> k
    boolean LoadLoginInfo(com.ceres.jailmon.LoginActivity$LoginInfo) -> b
    void loadSerialNum() -> h
    android.widget.EditText access$0(com.ceres.jailmon.LoginActivity) -> a
    android.widget.EditText access$1(com.ceres.jailmon.LoginActivity) -> b
    void access$2(com.ceres.jailmon.LoginActivity) -> c
    void access$3(com.ceres.jailmon.LoginActivity) -> d
    android.widget.LinearLayout access$4(com.ceres.jailmon.LoginActivity) -> e
    android.widget.Button access$5(com.ceres.jailmon.LoginActivity) -> f
com.ceres.jailmon.LoginActivity$1 -> com.ceres.jailmon.au:
    com.ceres.jailmon.LoginActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.LoginActivity$2 -> com.ceres.jailmon.av:
    com.ceres.jailmon.LoginActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.LoginActivity$3 -> com.ceres.jailmon.aw:
    com.ceres.jailmon.LoginActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.LoginActivity$4 -> com.ceres.jailmon.ax:
    com.ceres.jailmon.LoginActivity this$0 -> a
    boolean onLongClick(android.view.View) -> onLongClick
com.ceres.jailmon.LoginActivity$LoginInfo -> com.ceres.jailmon.ay:
    boolean onoff -> a
    java.lang.String user -> b
    java.lang.String passwd -> c
    com.ceres.jailmon.LoginActivity this$0 -> d
com.ceres.jailmon.MainActivity -> com.ceres.jailmon.MainActivity:
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void showQuitTipDialog() -> h
    void signin() -> i
    void onReceiveSignInResult(com.ceres.jailmon.data.SignInResult) -> a
com.ceres.jailmon.MainActivity$1 -> com.ceres.jailmon.az:
    com.ceres.jailmon.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.ceres.jailmon.MainActivity$2 -> com.ceres.jailmon.ba:
    com.ceres.jailmon.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.ceres.jailmon.MainActivity$Button_OnClickListener -> com.ceres.jailmon.bb:
    java.lang.Class m_classActivity -> a
    com.ceres.jailmon.MainActivity this$0 -> b
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.MapView -> com.ceres.jailmon.MapView:
    android.graphics.Bitmap m_map -> a
    android.graphics.Bitmap[] m_location -> b
    int m_nCurrent -> c
    android.graphics.Rect m_rectmap -> d
    android.graphics.Rect m_rectview -> e
    android.graphics.Paint m_paint -> f
    java.util.List m_list -> g
    boolean m_bAnimation -> h
    void loadAnimation() -> a
    void doAnimation() -> b
    void drawAnimation(android.graphics.Canvas,android.graphics.Paint,int,int) -> a
    void setMap(android.graphics.Bitmap) -> a
    void setLocation(java.util.List) -> a
    void RunAnimation() -> c
    void onDraw(android.graphics.Canvas) -> onDraw
com.ceres.jailmon.MapView$1 -> com.ceres.jailmon.bc:
    com.ceres.jailmon.MapView this$0 -> a
    android.os.Handler val$handler -> b
    void run() -> run
com.ceres.jailmon.MedicineActivity -> com.ceres.jailmon.MedicineActivity:
    android.widget.LinearLayout m_layoutCells -> i
    android.widget.LinearLayout m_layoutConent -> j
    android.widget.ListView m_lvCells -> k
    android.widget.ListView m_lvContent -> l
    com.ceres.jailmon.AnimationUtil m_aniset -> f
    com.ceres.jailmon.data.Cell m_cell -> m
    com.ceres.jailmon.data.CellList m_celllist -> n
    com.ceres.jailmon.data.MedcineInfoList m_medinfolist -> o
    com.ceres.jailmon.adapter.CustomAdapter_PolicePhoto m_adpter_grid_doctor -> g
    android.widget.GridView m_grid_doctor -> h
    void onCreate(android.os.Bundle) -> onCreate
    void initCellListView() -> h
    void initContentViews() -> i
    void initDoctorGridViews() -> j
    void loadCellList() -> k
    void onReceiveCellList(com.ceres.jailmon.data.CellList) -> a
    void loadMedicineInfo(com.ceres.jailmon.data.Cell) -> a
    void onReceiveMedinfoList(com.ceres.jailmon.data.MedcineInfoList) -> a
    void onReceiveAllPolicePhotoNotify() -> f
    void postMedinfoResult() -> l
    void onReceiveMedinfoPostResult(com.ceres.jailmon.data.MedcineResult) -> a
    void access$0(com.ceres.jailmon.MedicineActivity) -> a
    com.ceres.jailmon.data.CellList access$1(com.ceres.jailmon.MedicineActivity) -> b
    void access$2(com.ceres.jailmon.MedicineActivity,com.ceres.jailmon.data.Cell) -> a
    com.ceres.jailmon.data.Cell access$3(com.ceres.jailmon.MedicineActivity) -> c
    void access$4(com.ceres.jailmon.MedicineActivity,com.ceres.jailmon.data.Cell) -> b
    com.ceres.jailmon.data.MedcineInfoList access$5(com.ceres.jailmon.MedicineActivity) -> d
com.ceres.jailmon.MedicineActivity$1 -> com.ceres.jailmon.bd:
    com.ceres.jailmon.MedicineActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.MedicineActivity$2 -> com.ceres.jailmon.be:
    com.ceres.jailmon.MedicineActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.MedicineActivity$3 -> com.ceres.jailmon.bf:
    com.ceres.jailmon.MedicineActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.MonitorActivity -> com.ceres.jailmon.MonitorActivity:
    android.widget.ListView m_listViewMonitors -> g
    android.widget.LinearLayout m_layoutMain -> h
    android.widget.LinearLayout m_layoutContent -> i
    com.ceres.jailmon.AnimationUtil m_aniset -> j
    org.MediaPlayer.PlayM4.Player m_oPlayerSDK -> k
    com.hikvision.netsdk.HCNetSDK m_oHCNetSDK -> l
    com.hikvision.netsdk.NET_DVR_DEVICEINFO_V30 m_oNetDvrDeviceInfoV30 -> m
    int m_iPlayID -> n
    int m_iPlaybackID -> o
    byte m_byGetFlag -> p
    int m_iPort -> q
    com.hikvision.netsdk.NET_DVR_NETCFG_V30 NetCfg -> r
    com.ceres.jailmon.data.MonitorInfoList m_milist -> s
    java.lang.String TAG -> t
    android.view.SurfaceView m_osurfaceView -> u
    com.ceres.jailmon.adapter.CustomAdapter_MonitorInfo m_adapterMonitor -> f
    android.os.Handler m_handler -> v
    void onCreate(android.os.Bundle) -> onCreate
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void loadMonitorInfo() -> j
    void loginAllMonitor(android.os.Handler) -> i
    boolean initeSdk() -> k
    boolean login(com.ceres.jailmon.data.MonitorInfo) -> a
    void preview(com.ceres.jailmon.data.MonitorInfo) -> b
    void stop() -> h
    void stopPlay() -> l
    int loginDevice(java.lang.String,int,java.lang.String,java.lang.String) -> a
    com.hikvision.netsdk.ExceptionCallBack getExceptiongCbf() -> m
    com.hikvision.netsdk.RealPlayCallBack getRealPlayerCbf(android.view.SurfaceView) -> a
    void processRealData(int,int,byte[],int,int,android.view.SurfaceView) -> a
    void Cleanup() -> i
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void access$0(com.ceres.jailmon.MonitorActivity,com.ceres.jailmon.data.MonitorInfoList) -> a
    com.ceres.jailmon.data.MonitorInfoList access$1(com.ceres.jailmon.MonitorActivity) -> a
    android.widget.ListView access$2(com.ceres.jailmon.MonitorActivity) -> b
    android.widget.LinearLayout access$3(com.ceres.jailmon.MonitorActivity) -> c
    com.ceres.jailmon.AnimationUtil access$4(com.ceres.jailmon.MonitorActivity) -> d
    android.widget.LinearLayout access$5(com.ceres.jailmon.MonitorActivity) -> e
    android.os.Handler access$6(com.ceres.jailmon.MonitorActivity) -> f
    void access$7(com.ceres.jailmon.MonitorActivity) -> g
com.ceres.jailmon.MonitorActivity$1 -> com.ceres.jailmon.bg:
    com.ceres.jailmon.MonitorActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.ceres.jailmon.MonitorActivity$2 -> com.ceres.jailmon.bh:
    com.ceres.jailmon.MonitorActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.MonitorActivity$3 -> com.ceres.jailmon.bi:
    com.ceres.jailmon.MonitorActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.MonitorActivity$4 -> com.ceres.jailmon.bj:
    com.ceres.jailmon.MonitorActivity this$0 -> a
    android.os.Handler val$handler -> b
    void run() -> run
com.ceres.jailmon.MonitorActivity$5 -> com.ceres.jailmon.bk:
    com.ceres.jailmon.MonitorActivity this$0 -> a
    void fExceptionCallBack(int,int,int) -> fExceptionCallBack
com.ceres.jailmon.MonitorActivity$6 -> com.ceres.jailmon.bl:
    android.view.SurfaceView m_sv -> a
    com.ceres.jailmon.MonitorActivity this$0 -> b
    void fRealDataCallBack(int,int,byte[],int) -> fRealDataCallBack
com.ceres.jailmon.MonitorCommonActivity -> com.ceres.jailmon.MonitorCommonActivity:
    void onCreate(android.os.Bundle) -> onCreate
com.ceres.jailmon.MonitorDHActivity -> com.ceres.jailmon.MonitorDHActivity:
    android.widget.ListView m_listViewMonitors -> g
    android.widget.LinearLayout m_layoutMain -> h
    android.widget.LinearLayout m_layoutContent -> i
    com.ceres.jailmon.AnimationUtil m_aniset -> j
    com.ceres.jailmon.data.MonitorInfoList m_milist -> k
    java.lang.String TAG -> l
    android.widget.GridView cloudGrid -> m
    boolean netSDKIsInit -> n
    com.mm.android.avnetsdk.param.AV_HANDLE log_handle -> o
    com.mm.android.avnetsdk.param.AV_HANDLE realPlay -> p
    com.mm.android.avnetsdk.param.AV_IN_Login refInParam -> q
    com.mm.android.avnetsdk.param.AV_OUT_Login refOutParam -> r
    com.mm.android.avnetsdk.param.AV_IN_RealPlay playINParam -> s
    com.mm.android.avnetsdk.param.AV_OUT_RealPlay playOutParam -> t
    com.mm.android.avnetsdk.param.AV_IN_PTZ cloudInParam -> u
    com.mm.android.avnetsdk.param.AV_OUT_PTZ cloudOutParam -> v
    com.mm.android.avplaysdk.render.BasicGLSurfaceView bsView -> w
    android.app.Activity mActivity -> x
    int[] cloudImage -> y
    com.ceres.jailmon.adapter.CustomAdapter_MonitorInfo m_adapterMonitor -> f
    android.os.Handler m_handler -> z
    void onCreate(android.os.Bundle) -> onCreate
    void loadMonitorInfo() -> h
    void loginAllMonitor(android.os.Handler) -> i
    void init() -> i
    boolean doLogin(com.ceres.jailmon.data.MonitorInfo) -> a
    void play(com.ceres.jailmon.data.MonitorInfo) -> b
    void stop() -> j
    void onDestroy() -> onDestroy
    void onViewMessage(int,android.view.SurfaceView,int) -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void access$0(com.ceres.jailmon.MonitorDHActivity,com.ceres.jailmon.data.MonitorInfoList) -> a
    com.ceres.jailmon.data.MonitorInfoList access$1(com.ceres.jailmon.MonitorDHActivity) -> a
    android.widget.ListView access$2(com.ceres.jailmon.MonitorDHActivity) -> b
    android.widget.LinearLayout access$3(com.ceres.jailmon.MonitorDHActivity) -> c
    com.ceres.jailmon.AnimationUtil access$4(com.ceres.jailmon.MonitorDHActivity) -> d
    android.widget.LinearLayout access$5(com.ceres.jailmon.MonitorDHActivity) -> e
    android.os.Handler access$6(com.ceres.jailmon.MonitorDHActivity) -> f
    void access$7(com.ceres.jailmon.MonitorDHActivity) -> g
    void access$8(com.ceres.jailmon.MonitorDHActivity,com.ceres.jailmon.data.MonitorInfo) -> a
    boolean access$9(com.ceres.jailmon.MonitorDHActivity,com.ceres.jailmon.data.MonitorInfo) -> b
com.ceres.jailmon.MonitorDHActivity$1 -> com.ceres.jailmon.bm:
    com.ceres.jailmon.MonitorDHActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.ceres.jailmon.MonitorDHActivity$2 -> com.ceres.jailmon.bn:
    com.ceres.jailmon.MonitorDHActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.MonitorDHActivity$3 -> com.ceres.jailmon.bo:
    com.ceres.jailmon.MonitorDHActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.MonitorDHActivity$4 -> com.ceres.jailmon.bp:
    com.ceres.jailmon.MonitorDHActivity this$0 -> a
    android.os.Handler val$handler -> b
    void run() -> run
com.ceres.jailmon.MonitorDHActivity$5 -> com.ceres.jailmon.bq:
    com.ceres.jailmon.MonitorDHActivity this$0 -> a
    int onConnectStatus(com.mm.android.avnetsdk.param.AV_HANDLE,boolean,java.lang.String,int,java.lang.Object) -> a
com.ceres.jailmon.MonitorDHActivity$6 -> com.ceres.jailmon.br:
    com.ceres.jailmon.MonitorDHActivity this$0 -> a
    int onData(com.mm.android.avnetsdk.param.AV_HANDLE,byte[],int,int,com.mm.android.avnetsdk.param.AV_MediaInfo,java.lang.Object) -> a
com.ceres.jailmon.MonitorDHActivity$7 -> com.ceres.jailmon.bs:
    com.ceres.jailmon.MonitorDHActivity this$0 -> a
    int onConnectStatus(com.mm.android.avnetsdk.param.AV_HANDLE,boolean,com.mm.android.avnetsdk.param.AV_HANDLE,java.lang.Object) -> a
com.ceres.jailmon.MonitorDHActivity$8 -> com.ceres.jailmon.bt:
    com.ceres.jailmon.MonitorDHActivity this$0 -> a
    void playBackFinish(com.mm.android.avnetsdk.param.AV_HANDLE) -> a
    void onPlayEvent(com.mm.android.avnetsdk.param.AV_HANDLE,com.mm.android.avplaysdk.PlayEvent) -> a
com.ceres.jailmon.MyNetSDKPlayerActivity -> com.ceres.jailmon.MyNetSDKPlayerActivity:
    android.widget.ListView m_listViewMonitors -> g
    android.widget.LinearLayout m_layoutMain -> h
    android.widget.LinearLayout m_layoutContent -> i
    com.ceres.jailmon.AnimationUtil m_aniset -> j
    com.ceres.jailmon.data.MonitorInfoList m_milist -> k
    android.widget.EditText login_ip -> l
    android.widget.EditText login_port -> m
    android.widget.EditText login_name -> n
    android.widget.EditText login_password -> o
    android.widget.Button login_button -> p
    android.widget.Button logout_button -> q
    android.widget.Button start_button -> r
    android.widget.Button stop_button -> s
    android.widget.Spinner spinner -> t
    android.content.SharedPreferences sharedPreferences -> u
    boolean netSDKIsInit -> v
    com.mm.android.avnetsdk.param.AV_HANDLE log_handle -> w
    com.mm.android.avnetsdk.param.AV_HANDLE realPlay -> x
    com.mm.android.avnetsdk.param.AV_IN_Login refInParam -> y
    com.mm.android.avnetsdk.param.AV_OUT_Login refOutParam -> z
    com.mm.android.avnetsdk.param.AV_IN_RealPlay playINParam -> A
    com.mm.android.avnetsdk.param.AV_OUT_RealPlay playOutParam -> B
    com.mm.android.avnetsdk.param.AV_IN_PTZ cloudInParam -> C
    com.mm.android.avnetsdk.param.AV_OUT_PTZ cloudOutParam -> D
    com.mm.android.avplaysdk.render.BasicGLSurfaceView bsView -> E
    android.app.Activity mActivity -> F
    java.lang.Thread mThread -> G
    android.widget.ArrayAdapter spinnerAdapter -> H
    int error -> I
    int mChannelCount -> J
    java.util.ArrayList mChannelList -> K
    int[] cloudImage -> L
    android.os.Handler handler -> M
    com.ceres.jailmon.adapter.CustomAdapter_MonitorInfo m_adapterMonitor -> f
    android.os.Handler m_handler -> N
    java.lang.String TAG -> O
    void onCreate(android.os.Bundle) -> onCreate
    void play(com.ceres.jailmon.data.MonitorInfo) -> a
    void stop() -> i
    void loadMonitorInfo() -> j
    void loginAllMonitor(android.os.Handler) -> i
    boolean doLogin(com.ceres.jailmon.data.MonitorInfo) -> b
    void init() -> k
    void doLogin() -> l
    void onDestroy() -> onDestroy
    void onViewMessage(int,android.view.SurfaceView,int) -> a
    void exit() -> h
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    com.mm.android.avnetsdk.param.AV_HANDLE access$0(com.ceres.jailmon.MyNetSDKPlayerActivity) -> a
    android.widget.Spinner access$1(com.ceres.jailmon.MyNetSDKPlayerActivity) -> b
    android.widget.ArrayAdapter access$2(com.ceres.jailmon.MyNetSDKPlayerActivity) -> c
    void access$3(com.ceres.jailmon.MyNetSDKPlayerActivity,int) -> a
    int access$4(com.ceres.jailmon.MyNetSDKPlayerActivity) -> d
    void access$5(com.ceres.jailmon.MyNetSDKPlayerActivity,com.ceres.jailmon.data.MonitorInfoList) -> a
    com.ceres.jailmon.data.MonitorInfoList access$6(com.ceres.jailmon.MyNetSDKPlayerActivity) -> e
    android.widget.ListView access$7(com.ceres.jailmon.MyNetSDKPlayerActivity) -> f
    android.widget.LinearLayout access$8(com.ceres.jailmon.MyNetSDKPlayerActivity) -> g
    com.ceres.jailmon.AnimationUtil access$9(com.ceres.jailmon.MyNetSDKPlayerActivity) -> h
    android.widget.LinearLayout access$10(com.ceres.jailmon.MyNetSDKPlayerActivity) -> i
    android.os.Handler access$11(com.ceres.jailmon.MyNetSDKPlayerActivity) -> j
    void access$12(com.ceres.jailmon.MyNetSDKPlayerActivity) -> k
    com.mm.android.avnetsdk.param.AV_HANDLE access$13(com.ceres.jailmon.MyNetSDKPlayerActivity) -> l
    void access$14(com.ceres.jailmon.MyNetSDKPlayerActivity,com.mm.android.avnetsdk.param.AV_HANDLE) -> a
    void access$15(com.ceres.jailmon.MyNetSDKPlayerActivity,com.mm.android.avnetsdk.param.AV_HANDLE) -> b
    void access$16(com.ceres.jailmon.MyNetSDKPlayerActivity,com.mm.android.avnetsdk.param.AV_IN_RealPlay) -> a
    com.mm.android.avnetsdk.param.AV_IN_RealPlay access$17(com.ceres.jailmon.MyNetSDKPlayerActivity) -> m
    com.mm.android.avplaysdk.render.BasicGLSurfaceView access$18(com.ceres.jailmon.MyNetSDKPlayerActivity) -> n
    void access$19(com.ceres.jailmon.MyNetSDKPlayerActivity,com.mm.android.avnetsdk.param.AV_OUT_RealPlay) -> a
    com.mm.android.avnetsdk.param.AV_OUT_RealPlay access$20(com.ceres.jailmon.MyNetSDKPlayerActivity) -> o
    android.app.Activity access$21(com.ceres.jailmon.MyNetSDKPlayerActivity) -> p
    void access$22(com.ceres.jailmon.MyNetSDKPlayerActivity) -> q
    void access$23(com.ceres.jailmon.MyNetSDKPlayerActivity,com.ceres.jailmon.data.MonitorInfo) -> a
    boolean access$24(com.ceres.jailmon.MyNetSDKPlayerActivity,com.ceres.jailmon.data.MonitorInfo) -> b
    boolean access$25(com.ceres.jailmon.MyNetSDKPlayerActivity) -> r
    com.mm.android.avnetsdk.param.AV_IN_Login access$26(com.ceres.jailmon.MyNetSDKPlayerActivity) -> s
    com.mm.android.avnetsdk.param.AV_OUT_Login access$27(com.ceres.jailmon.MyNetSDKPlayerActivity) -> t
    void access$28(com.ceres.jailmon.MyNetSDKPlayerActivity,int) -> b
    int access$29(com.ceres.jailmon.MyNetSDKPlayerActivity) -> u
    java.util.ArrayList access$30(com.ceres.jailmon.MyNetSDKPlayerActivity) -> v
    void access$31(com.ceres.jailmon.MyNetSDKPlayerActivity,android.widget.ArrayAdapter) -> a
    android.os.Handler access$32(com.ceres.jailmon.MyNetSDKPlayerActivity) -> w
com.ceres.jailmon.MyNetSDKPlayerActivity$1 -> com.ceres.jailmon.bu:
    com.ceres.jailmon.MyNetSDKPlayerActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.ceres.jailmon.MyNetSDKPlayerActivity$10 -> com.ceres.jailmon.bv:
    com.ceres.jailmon.MyNetSDKPlayerActivity this$0 -> a
    int onConnectStatus(com.mm.android.avnetsdk.param.AV_HANDLE,boolean,com.mm.android.avnetsdk.param.AV_HANDLE,java.lang.Object) -> a
com.ceres.jailmon.MyNetSDKPlayerActivity$11 -> com.ceres.jailmon.bw:
    com.ceres.jailmon.MyNetSDKPlayerActivity this$0 -> a
    void playBackFinish(com.mm.android.avnetsdk.param.AV_HANDLE) -> a
    void onPlayEvent(com.mm.android.avnetsdk.param.AV_HANDLE,com.mm.android.avplaysdk.PlayEvent) -> a
com.ceres.jailmon.MyNetSDKPlayerActivity$12 -> com.ceres.jailmon.bx:
    com.ceres.jailmon.MyNetSDKPlayerActivity this$0 -> a
    android.os.Handler val$handler -> b
    void run() -> run
com.ceres.jailmon.MyNetSDKPlayerActivity$13 -> com.ceres.jailmon.by:
    com.ceres.jailmon.MyNetSDKPlayerActivity this$0 -> a
    int onConnectStatus(com.mm.android.avnetsdk.param.AV_HANDLE,boolean,java.lang.String,int,java.lang.Object) -> a
com.ceres.jailmon.MyNetSDKPlayerActivity$14 -> com.ceres.jailmon.bz:
    com.ceres.jailmon.MyNetSDKPlayerActivity this$0 -> a
    int onConnectStatus(com.mm.android.avnetsdk.param.AV_HANDLE,boolean,java.lang.String,int,java.lang.Object) -> a
com.ceres.jailmon.MyNetSDKPlayerActivity$15 -> com.ceres.jailmon.ca:
    com.ceres.jailmon.MyNetSDKPlayerActivity this$0 -> a
    void run() -> run
com.ceres.jailmon.MyNetSDKPlayerActivity$2 -> com.ceres.jailmon.cb:
    com.ceres.jailmon.MyNetSDKPlayerActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.ceres.jailmon.MyNetSDKPlayerActivity$3 -> com.ceres.jailmon.cc:
    com.ceres.jailmon.MyNetSDKPlayerActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.MyNetSDKPlayerActivity$4 -> com.ceres.jailmon.cd:
    com.ceres.jailmon.MyNetSDKPlayerActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.MyNetSDKPlayerActivity$5 -> com.ceres.jailmon.ce:
    com.ceres.jailmon.MyNetSDKPlayerActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.MyNetSDKPlayerActivity$5$1 -> com.ceres.jailmon.cf:
    com.ceres.jailmon.MyNetSDKPlayerActivity$5 this$1 -> a
    int onData(com.mm.android.avnetsdk.param.AV_HANDLE,byte[],int,int,com.mm.android.avnetsdk.param.AV_MediaInfo,java.lang.Object) -> a
com.ceres.jailmon.MyNetSDKPlayerActivity$5$2 -> com.ceres.jailmon.cg:
    com.ceres.jailmon.MyNetSDKPlayerActivity$5 this$1 -> a
    int onConnectStatus(com.mm.android.avnetsdk.param.AV_HANDLE,boolean,com.mm.android.avnetsdk.param.AV_HANDLE,java.lang.Object) -> a
com.ceres.jailmon.MyNetSDKPlayerActivity$5$3 -> com.ceres.jailmon.ch:
    com.ceres.jailmon.MyNetSDKPlayerActivity$5 this$1 -> a
    void playBackFinish(com.mm.android.avnetsdk.param.AV_HANDLE) -> a
    void onPlayEvent(com.mm.android.avnetsdk.param.AV_HANDLE,com.mm.android.avplaysdk.PlayEvent) -> a
com.ceres.jailmon.MyNetSDKPlayerActivity$6 -> com.ceres.jailmon.ci:
    com.ceres.jailmon.MyNetSDKPlayerActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.MyNetSDKPlayerActivity$7 -> com.ceres.jailmon.cj:
    com.ceres.jailmon.MyNetSDKPlayerActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.MyNetSDKPlayerActivity$8 -> com.ceres.jailmon.ck:
    com.ceres.jailmon.MyNetSDKPlayerActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.MyNetSDKPlayerActivity$9 -> com.ceres.jailmon.cl:
    com.ceres.jailmon.MyNetSDKPlayerActivity this$0 -> a
    int onData(com.mm.android.avnetsdk.param.AV_HANDLE,byte[],int,int,com.mm.android.avnetsdk.param.AV_MediaInfo,java.lang.Object) -> a
com.ceres.jailmon.NoteActivity -> com.ceres.jailmon.NoteActivity:
    android.widget.TextView mTvTitle -> f
    android.widget.EditText mEditNote -> g
    android.widget.Button mButtonOK -> h
    android.widget.Spinner mSpinPreset -> i
    java.lang.String mPoliceID -> j
    boolean mDoctorFlag -> k
    java.lang.String[] mPreset -> l
    java.lang.String[] mPresetPolice -> m
    java.lang.String[] mPresetDoctor -> n
    void onCreate(android.os.Bundle) -> onCreate
    void onReceivePoliceNoteResult(com.ceres.jailmon.data.CommonResult) -> b
    void onReceiveDoctorNoteResult(com.ceres.jailmon.data.CommonResult) -> a
    void sendNote() -> h
    void access$0(com.ceres.jailmon.NoteActivity) -> a
com.ceres.jailmon.NoteActivity$1 -> com.ceres.jailmon.cm:
    com.ceres.jailmon.NoteActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.NoteActivity$2 -> com.ceres.jailmon.cn:
    com.ceres.jailmon.NoteActivity this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
com.ceres.jailmon.OutInfoActivity -> com.ceres.jailmon.OutInfoActivity:
    android.widget.LinearLayout m_layoutCells -> f
    android.widget.LinearLayout m_layoutContent -> g
    android.widget.ListView m_lvCells -> h
    android.widget.ListView m_lvContent -> i
    com.ceres.jailmon.AnimationUtil m_aniset -> j
    com.ceres.jailmon.data.CellList m_celllist -> k
    com.ceres.jailmon.data.OutInfoList m_outinfolist -> l
    void onCreate(android.os.Bundle) -> onCreate
    void initCellListView() -> h
    void initContentViews() -> i
    void loadCellList() -> j
    void onReceiveCellList(com.ceres.jailmon.data.CellList) -> a
    void loadOutInfo(com.ceres.jailmon.data.Cell) -> a
    void onReceiveOutInfoList(com.ceres.jailmon.data.OutInfoList) -> a
    com.ceres.jailmon.data.CellList access$0(com.ceres.jailmon.OutInfoActivity) -> a
    void access$1(com.ceres.jailmon.OutInfoActivity,com.ceres.jailmon.data.Cell) -> a
com.ceres.jailmon.OutInfoActivity$1 -> com.ceres.jailmon.co:
    com.ceres.jailmon.OutInfoActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.PatrolMapActivity -> com.ceres.jailmon.PatrolMapActivity:
    com.ceres.jailmon.MapView m_mapview -> f
    com.ceres.jailmon.data.MapInfo m_mapinfo -> g
    com.ceres.jailmon.data.MapLocationList m_locationlist -> h
    int m_nInteval -> i
    void onCreate(android.os.Bundle) -> onCreate
    void loadMapInfo() -> j
    void onReceiveMapInfo(com.ceres.jailmon.data.MapInfo) -> a
    void StartUpdateLocation() -> h
    void LoadMapLocation() -> i
    void onReceiveMapLocation(com.ceres.jailmon.data.MapLocationList) -> a
com.ceres.jailmon.PatrolMapActivity$1 -> com.ceres.jailmon.cp:
    com.ceres.jailmon.PatrolMapActivity this$0 -> a
    android.os.Handler val$handler -> b
    void run() -> run
com.ceres.jailmon.PowerInfoActivity -> com.ceres.jailmon.PowerInfoActivity:
    int m_nMode -> l
    android.widget.LinearLayout m_layoutCells -> m
    android.widget.LinearLayout m_layoutConent -> n
    android.widget.ListView m_lvCells -> o
    android.widget.ListView m_lvContent -> p
    android.widget.TextView txtSelectAll -> q
    android.widget.TextView txtSelectMulti -> r
    com.ceres.jailmon.AnimationUtil m_aniset -> s
    com.ceres.jailmon.data.Cell m_cell -> f
    int[] m_listicons -> t
    com.ceres.jailmon.data.CellList m_celllist -> u
    com.ceres.jailmon.adapter.CustomAdapter_MainList m_adapterSingle -> g
    com.ceres.jailmon.adapter.CustomAdapter_MainListChoice m_adapterMulti -> h
    com.ceres.jailmon.data.PowerInfoList m_powerinfolist -> i
    com.ceres.jailmon.data.PowerInfoList m_listInfoMulti -> j
    com.ceres.jailmon.adapter.CustomAdapter_PowerInfo m_adapterInfo -> k
    void onCreate(android.os.Bundle) -> onCreate
    void initCellListView() -> h
    void initContentViews() -> i
    int getMode() -> j
    void setMode(int) -> b
    void loadCellList() -> l
    void onReceiveCellList(com.ceres.jailmon.data.CellList) -> a
    void loadPowerInfoList(com.ceres.jailmon.data.Cell) -> a
    void onReceivePowerInfoList(com.ceres.jailmon.data.PowerInfoList) -> a
    void postPowerCtrl() -> k
    void onPostPowerCtrlResult(com.ceres.jailmon.data.PowerCtrlResult) -> a
    com.ceres.jailmon.data.CellList access$0(com.ceres.jailmon.PowerInfoActivity) -> a
com.ceres.jailmon.PowerInfoActivity$1 -> com.ceres.jailmon.cq:
    com.ceres.jailmon.PowerInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PowerInfoActivity$2 -> com.ceres.jailmon.cr:
    com.ceres.jailmon.PowerInfoActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.PowerInfoActivity$3 -> com.ceres.jailmon.cs:
    com.ceres.jailmon.PowerInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PowerInfoActivity$4 -> com.ceres.jailmon.ct:
    com.ceres.jailmon.PowerInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PrisonerInfoActivity -> com.ceres.jailmon.PrisonerInfoActivity:
    android.widget.LinearLayout m_layoutRooms -> v
    android.widget.LinearLayout m_layoutPrisoners -> w
    android.widget.LinearLayout m_layoutPrisonerDetail -> x
    android.widget.ListView m_listViewRoom -> y
    android.widget.ListView m_listViewPrisoner -> z
    android.widget.TextView m_tvPID -> A
    android.widget.TextView m_tvName -> B
    android.widget.TextView m_tvGender -> C
    android.widget.TextView m_tvNation -> D
    android.widget.TextView m_tvBday -> E
    android.widget.TextView m_tvIDCard -> F
    android.widget.TextView m_tvAddr -> G
    android.widget.TextView m_tvEngage -> H
    android.widget.TextView m_tvVIP -> I
    android.widget.TextView m_tvComment -> J
    android.widget.TextView m_tvLastBalance -> K
    android.widget.Button m_btnInput -> L
    android.widget.Button m_btnSubmit -> M
    android.widget.Button m_btnReturn -> N
    com.ceres.jailmon.data.CellList m_celllist -> O
    com.ceres.jailmon.data.PrisonerList m_prisonerlist -> P
    com.ceres.jailmon.data.PrisonerDetail m_prisonerDetail -> Q
    android.widget.ImageView m_imgPhoto -> R
    android.widget.ListView m_lstBreakRule -> S
    android.widget.ListView m_lstTradeInfo -> T
    com.ceres.jailmon.AnimationUtil m_aniset -> U
    com.ceres.jailmon.data.Cell m_cell -> f
    com.ceres.jailmon.data.Prisoner m_prisoner -> g
    android.widget.LinearLayout[] m_layout -> h
    android.widget.TextView[] m_txtlabel -> i
    android.widget.TextView m_txtBasicP2 -> j
    android.widget.CheckBox m_chkGroup -> k
    android.widget.Spinner m_spinReason -> l
    android.widget.Spinner m_spinLevel -> m
    android.widget.Spinner m_spinPolice -> n
    android.widget.Spinner m_spinSolution -> o
    android.widget.TimePicker m_timepicker -> p
    boolean m_bGroup -> q
    int m_nHour -> r
    int m_nMinute -> s
    java.util.List m_list_reason_showing -> t
    com.ceres.jailmon.data.RuleBreakItemsList m_rbitemslist -> u
    android.os.Handler m_handler -> V
    void onCreate(android.os.Bundle) -> onCreate
    void InitPrisonerDetailLayout() -> h
    void InitInputRuleBreakItems() -> i
    void showInputRuleBreakReason(java.lang.String) -> a
    void showInputRuleBreakItems() -> j
    void setLayoutVisibility(int) -> b
    void setLabelSelected(int) -> c
    void ShowPrisonerDetailInfo(com.ceres.jailmon.data.PrisonerDetail) -> b
    void loadRooms() -> k
    void loadPrisoners(com.ceres.jailmon.data.Cell) -> a
    void loadPrisonerDetail(java.lang.String) -> b
    void loadPrisonerRuleBreak(java.lang.String) -> c
    void loadTradeInfoList(java.lang.String) -> d
    void loadRuleBreakItemsList() -> l
    void access$0(com.ceres.jailmon.PrisonerInfoActivity,com.ceres.jailmon.data.CellList) -> a
    com.ceres.jailmon.data.CellList access$1(com.ceres.jailmon.PrisonerInfoActivity) -> a
    android.widget.ListView access$2(com.ceres.jailmon.PrisonerInfoActivity) -> b
    android.widget.LinearLayout access$3(com.ceres.jailmon.PrisonerInfoActivity) -> c
    com.ceres.jailmon.AnimationUtil access$4(com.ceres.jailmon.PrisonerInfoActivity) -> d
    void access$5(com.ceres.jailmon.PrisonerInfoActivity,com.ceres.jailmon.data.PrisonerList) -> a
    com.ceres.jailmon.data.PrisonerList access$6(com.ceres.jailmon.PrisonerInfoActivity) -> e
    android.widget.ListView access$7(com.ceres.jailmon.PrisonerInfoActivity) -> f
    android.widget.LinearLayout access$8(com.ceres.jailmon.PrisonerInfoActivity) -> g
    void access$9(com.ceres.jailmon.PrisonerInfoActivity,com.ceres.jailmon.data.PrisonerDetail) -> a
    com.ceres.jailmon.data.PrisonerDetail access$10(com.ceres.jailmon.PrisonerInfoActivity) -> h
    android.widget.LinearLayout access$11(com.ceres.jailmon.PrisonerInfoActivity) -> i
    android.widget.ImageView access$12(com.ceres.jailmon.PrisonerInfoActivity) -> j
    android.widget.ListView access$13(com.ceres.jailmon.PrisonerInfoActivity) -> k
    android.widget.TextView access$14(com.ceres.jailmon.PrisonerInfoActivity) -> l
    android.widget.ListView access$15(com.ceres.jailmon.PrisonerInfoActivity) -> m
    void access$16(com.ceres.jailmon.PrisonerInfoActivity,java.lang.String) -> a
    void access$17(com.ceres.jailmon.PrisonerInfoActivity,com.ceres.jailmon.data.Cell) -> a
    void access$18(com.ceres.jailmon.PrisonerInfoActivity,java.lang.String) -> b
    void access$19(com.ceres.jailmon.PrisonerInfoActivity,java.lang.String) -> c
    android.os.Handler access$20(com.ceres.jailmon.PrisonerInfoActivity) -> n
com.ceres.jailmon.PrisonerInfoActivity$1 -> com.ceres.jailmon.cu:
    com.ceres.jailmon.PrisonerInfoActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.ceres.jailmon.PrisonerInfoActivity$10 -> com.ceres.jailmon.cv:
    com.ceres.jailmon.PrisonerInfoActivity this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.ceres.jailmon.PrisonerInfoActivity$11 -> com.ceres.jailmon.cw:
    com.ceres.jailmon.PrisonerInfoActivity this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
com.ceres.jailmon.PrisonerInfoActivity$12 -> com.ceres.jailmon.cx:
    com.ceres.jailmon.PrisonerInfoActivity this$0 -> a
    void onTimeChanged(android.widget.TimePicker,int,int) -> onTimeChanged
com.ceres.jailmon.PrisonerInfoActivity$13 -> com.ceres.jailmon.cy:
    com.ceres.jailmon.PrisonerInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PrisonerInfoActivity$14 -> com.ceres.jailmon.cz:
    com.ceres.jailmon.PrisonerInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PrisonerInfoActivity$2 -> com.ceres.jailmon.da:
    com.ceres.jailmon.PrisonerInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PrisonerInfoActivity$3 -> com.ceres.jailmon.db:
    com.ceres.jailmon.PrisonerInfoActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.PrisonerInfoActivity$4 -> com.ceres.jailmon.dc:
    com.ceres.jailmon.PrisonerInfoActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.PrisonerInfoActivity$5 -> com.ceres.jailmon.dd:
    com.ceres.jailmon.PrisonerInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PrisonerInfoActivity$6 -> com.ceres.jailmon.de:
    com.ceres.jailmon.PrisonerInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PrisonerInfoActivity$7 -> com.ceres.jailmon.df:
    com.ceres.jailmon.PrisonerInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PrisonerInfoActivity$8 -> com.ceres.jailmon.dg:
    com.ceres.jailmon.PrisonerInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PrisonerInfoActivity$9 -> com.ceres.jailmon.dh:
    com.ceres.jailmon.PrisonerInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PrisonerInfoGridActivity -> com.ceres.jailmon.PrisonerInfoGridActivity:
    android.widget.LinearLayout m_layoutCells -> x
    android.widget.LinearLayout m_layoutPrisoners -> y
    android.widget.ListView m_lvCells -> z
    com.ceres.jailmon.data.CellList m_celllist -> A
    com.ceres.jailmon.data.PrisonerList m_prisonerlist -> B
    com.ceres.jailmon.AnimationUtil m_aniset -> C
    android.widget.GridView m_grid_prisoner -> D
    android.widget.GridView m_grid_police -> E
    com.ceres.jailmon.data.Cell m_cell -> f
    com.ceres.jailmon.data.Prisoner m_prisoner -> g
    android.widget.LinearLayout m_layoutPrisonerDetail -> F
    android.widget.TextView m_tvPID -> G
    android.widget.TextView m_tvName -> H
    android.widget.TextView m_tvGender -> I
    android.widget.TextView m_tvNation -> J
    android.widget.TextView m_tvBday -> K
    android.widget.TextView m_tvIDCard -> L
    android.widget.TextView m_tvAddr -> M
    android.widget.TextView m_tvEngage -> N
    android.widget.TextView m_tvVIP -> O
    android.widget.TextView m_tvComment -> P
    android.widget.TextView m_tvLastBalance -> Q
    android.widget.Button m_btnInput -> R
    android.widget.Button m_btnSubmit -> S
    android.widget.Button m_btnReturn -> T
    com.ceres.jailmon.data.PrisonerDetail m_prisonerDetail -> U
    android.widget.ImageView m_imgPhoto -> V
    android.widget.TextView m_txtSum -> W
    android.widget.ListView m_lstBreakRule -> X
    android.widget.ListView m_lstTradeInfo -> Y
    com.ceres.jailmon.adapter.CustomAdapter_PrisonerXPhoto m_adpter_grid_prisoner -> h
    com.ceres.jailmon.adapter.CustomAdapter_PolicePhoto m_adpter_grid_police -> i
    android.widget.LinearLayout[] m_layout -> j
    android.widget.TextView[] m_txtlabel -> k
    android.widget.TextView m_txtBasicP2 -> l
    android.widget.CheckBox m_chkGroup -> m
    android.widget.Spinner m_spinReason -> n
    android.widget.Spinner m_spinLevel -> o
    android.widget.Spinner m_spinPolice -> p
    android.widget.Spinner m_spinSolution -> q
    android.widget.TimePicker m_timepicker -> r
    boolean m_bGroup -> s
    int m_nHour -> t
    int m_nMinute -> u
    java.util.List m_list_reason_showing -> v
    com.ceres.jailmon.data.RuleBreakItemsList m_rbitemslist -> w
    void onCreate(android.os.Bundle) -> onCreate
    void initPoliceGridViews() -> k
    void initPrisonerGridViews() -> l
    void loadRooms() -> m
    void onReceiveCellList(com.ceres.jailmon.data.CellList) -> a
    void loadPrisoners(com.ceres.jailmon.data.Cell) -> a
    void onReceivePrisonerList(com.ceres.jailmon.data.PrisonerList) -> a
    void onReceiveAllPrisonerPhotoNotify() -> e
    void onReceiveAllPolicePhotoNotify() -> f
    void initPrisonerDetailLayout() -> h
    void initInputRuleBreakItems() -> i
    void showInputRuleBreakReason(java.lang.String) -> a
    void showInputRuleBreakItems() -> j
    void setLayoutVisibility(int) -> b
    void setLabelSelected(int) -> c
    void showPrisonerDetailInfo(com.ceres.jailmon.data.PrisonerDetail) -> b
    void loadPrisonerDetail(int) -> d
    void onReceivePrisonerDetail(com.ceres.jailmon.data.PrisonerDetail) -> a
    void onReceivePrisonerPhoto(android.graphics.Bitmap) -> a
    void loadPrisonerRuleBreak(java.lang.String) -> b
    void onReceiveRuleBreakInfoList(com.ceres.jailmon.data.RuleBreakInfoList) -> a
    void loadTradeInfoList(java.lang.String) -> c
    void onReceiveTradeInfoList(com.ceres.jailmon.data.TradeInfoList) -> a
    void loadRuleBreakItemsList() -> n
    void onReceiveRuleBreakItemsList(com.ceres.jailmon.data.RuleBreakItemsList) -> a
    void onPostRuleBreakInfoResult(com.ceres.jailmon.data.RuleBreakResult) -> a
    android.widget.LinearLayout access$0(com.ceres.jailmon.PrisonerInfoGridActivity) -> a
    android.widget.LinearLayout access$1(com.ceres.jailmon.PrisonerInfoGridActivity) -> b
    com.ceres.jailmon.data.CellList access$2(com.ceres.jailmon.PrisonerInfoGridActivity) -> c
    void access$3(com.ceres.jailmon.PrisonerInfoGridActivity,com.ceres.jailmon.data.Cell) -> a
    com.ceres.jailmon.data.PrisonerList access$4(com.ceres.jailmon.PrisonerInfoGridActivity) -> d
    void access$5(com.ceres.jailmon.PrisonerInfoGridActivity,int) -> a
    com.ceres.jailmon.AnimationUtil access$6(com.ceres.jailmon.PrisonerInfoGridActivity) -> e
    void access$7(com.ceres.jailmon.PrisonerInfoGridActivity,java.lang.String) -> a
    void access$8(com.ceres.jailmon.PrisonerInfoGridActivity,java.lang.String) -> b
com.ceres.jailmon.PrisonerInfoGridActivity$1 -> com.ceres.jailmon.di:
    com.ceres.jailmon.PrisonerInfoGridActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PrisonerInfoGridActivity$10 -> com.ceres.jailmon.dj:
    com.ceres.jailmon.PrisonerInfoGridActivity this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.ceres.jailmon.PrisonerInfoGridActivity$11 -> com.ceres.jailmon.dk:
    com.ceres.jailmon.PrisonerInfoGridActivity this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
com.ceres.jailmon.PrisonerInfoGridActivity$12 -> com.ceres.jailmon.dl:
    com.ceres.jailmon.PrisonerInfoGridActivity this$0 -> a
    void onTimeChanged(android.widget.TimePicker,int,int) -> onTimeChanged
com.ceres.jailmon.PrisonerInfoGridActivity$13 -> com.ceres.jailmon.dm:
    com.ceres.jailmon.PrisonerInfoGridActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PrisonerInfoGridActivity$14 -> com.ceres.jailmon.dn:
    com.ceres.jailmon.PrisonerInfoGridActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PrisonerInfoGridActivity$2 -> com.ceres.jailmon.do:
    com.ceres.jailmon.PrisonerInfoGridActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.PrisonerInfoGridActivity$3 -> com.ceres.jailmon.dp:
    com.ceres.jailmon.PrisonerInfoGridActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.PrisonerInfoGridActivity$4 -> com.ceres.jailmon.dq:
    com.ceres.jailmon.PrisonerInfoGridActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.PrisonerInfoGridActivity$5 -> com.ceres.jailmon.dr:
    com.ceres.jailmon.PrisonerInfoGridActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PrisonerInfoGridActivity$6 -> com.ceres.jailmon.ds:
    com.ceres.jailmon.PrisonerInfoGridActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PrisonerInfoGridActivity$7 -> com.ceres.jailmon.dt:
    com.ceres.jailmon.PrisonerInfoGridActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PrisonerInfoGridActivity$8 -> com.ceres.jailmon.du:
    com.ceres.jailmon.PrisonerInfoGridActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PrisonerInfoGridActivity$9 -> com.ceres.jailmon.dv:
    com.ceres.jailmon.PrisonerInfoGridActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PurchaseActivity -> com.ceres.jailmon.PurchaseActivity:
    android.widget.LinearLayout m_layoutRooms -> m
    android.widget.LinearLayout m_layoutPrisoners -> n
    android.widget.LinearLayout m_layoutPurchase -> o
    android.widget.ListView m_listViewRoom -> p
    android.widget.ListView m_listViewPrisoner -> q
    android.widget.ListView m_listViewGoods -> r
    android.widget.TextView m_txtBalance -> s
    android.widget.TextView m_txtLastTime -> t
    android.widget.TextView m_txtSum -> u
    java.lang.String m_labBalance -> f
    java.lang.String m_labLastTime -> g
    java.lang.String m_labSum -> h
    com.ceres.jailmon.data.CellList m_celllist -> v
    com.ceres.jailmon.data.PrisonerList m_prisonerlist -> w
    com.ceres.jailmon.data.GoodsList m_goodslist -> x
    com.ceres.jailmon.data.Account m_accountinfo -> y
    com.ceres.jailmon.data.Prisoner m_prisoner -> i
    com.ceres.jailmon.AnimationUtil m_aniset -> z
    com.ceres.jailmon.adapter.GoodsListAdapter m_adapterGoods -> j
    float m_fSum -> k
    com.ceres.jailmon.adapter.onPurchaseListenser m_listener -> l
    void onCreate(android.os.Bundle) -> onCreate
    void initCellListView() -> h
    void initPrisonerListView() -> l
    void initContentViews() -> i
    void loadCellList() -> m
    void onReceiveCellList(com.ceres.jailmon.data.CellList) -> a
    void loadPrisoners(com.ceres.jailmon.data.Cell) -> a
    void onReceivePrisonerList(com.ceres.jailmon.data.PrisonerList) -> a
    void loadGoodsInfo() -> n
    void onReceiveGoodsList(com.ceres.jailmon.data.GoodsList) -> a
    void ShowAccountInfo(com.ceres.jailmon.data.Account) -> b
    void ClearPurchaseInfo() -> j
    boolean AddSum(float) -> a
    boolean SubSum(float) -> b
    void ShowPurchaseSum() -> k
    void loadAccount(java.lang.String) -> a
    void onReceiveAccount(com.ceres.jailmon.data.Account) -> a
    void postPurchase() -> o
    void onReceivePurchaseResult(com.ceres.jailmon.data.PurchaseResult) -> a
    void access$0(com.ceres.jailmon.PurchaseActivity) -> a
    com.ceres.jailmon.data.CellList access$1(com.ceres.jailmon.PurchaseActivity) -> b
    void access$2(com.ceres.jailmon.PurchaseActivity,com.ceres.jailmon.data.Cell) -> a
    com.ceres.jailmon.data.PrisonerList access$3(com.ceres.jailmon.PurchaseActivity) -> c
    void access$4(com.ceres.jailmon.PurchaseActivity,java.lang.String) -> a
com.ceres.jailmon.PurchaseActivity$1 -> com.ceres.jailmon.dw:
    com.ceres.jailmon.PurchaseActivity this$0 -> a
    boolean onAdd(com.ceres.jailmon.data.Goods) -> a
    boolean onSub(com.ceres.jailmon.data.Goods) -> b
com.ceres.jailmon.PurchaseActivity$2 -> com.ceres.jailmon.dx:
    com.ceres.jailmon.PurchaseActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.PurchaseActivity$3 -> com.ceres.jailmon.dy:
    com.ceres.jailmon.PurchaseActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.PurchaseActivity$4 -> com.ceres.jailmon.dz:
    com.ceres.jailmon.PurchaseActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.SecurityActivity -> com.ceres.jailmon.SecurityActivity:
    android.widget.LinearLayout m_layoutItems -> h
    android.widget.LinearLayout m_layoutConent -> i
    android.widget.ListView m_listContent -> j
    com.ceres.jailmon.AnimationUtil m_aniset -> k
    int[] m_res_id -> f
    com.ceres.jailmon.adapter.CustomAdapter_NormalInfo[] m_adapter -> g
    void onCreate(android.os.Bundle) -> onCreate
    void initSecurityItemListView() -> h
    void loadSecurityInfo() -> i
    void onReceiveSecurityInfo(com.ceres.jailmon.data.SecurityInfoList) -> a
    void createSecurityInfoAdapter(com.ceres.jailmon.data.SecurityInfoList) -> c
    void showSecurityInfo(int) -> b
com.ceres.jailmon.SecurityActivity$1 -> com.ceres.jailmon.ea:
    com.ceres.jailmon.SecurityActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.SecurityRBActivity -> com.ceres.jailmon.SecurityRBActivity:
    android.widget.LinearLayout m_layoutCells -> f
    android.widget.LinearLayout m_layoutConent -> g
    android.widget.ListView m_lvCells -> h
    android.widget.ListView m_lvContent -> i
    com.ceres.jailmon.data.Cell m_cell -> j
    com.ceres.jailmon.data.CellList m_celllist -> k
    com.ceres.jailmon.AnimationUtil m_aniset -> l
    void onCreate(android.os.Bundle) -> onCreate
    void initCellListView() -> h
    void loadCellList() -> i
    void onReceiveCellList(com.ceres.jailmon.data.CellList) -> a
    void loadSecurityInfo(com.ceres.jailmon.data.Cell) -> a
    void onReceiveSecurityRBInfo(com.ceres.jailmon.data.SecurityInfoList) -> b
    com.ceres.jailmon.data.CellList access$0(com.ceres.jailmon.SecurityRBActivity) -> a
    void access$1(com.ceres.jailmon.SecurityRBActivity,com.ceres.jailmon.data.Cell) -> a
    com.ceres.jailmon.data.Cell access$2(com.ceres.jailmon.SecurityRBActivity) -> b
    void access$3(com.ceres.jailmon.SecurityRBActivity,com.ceres.jailmon.data.Cell) -> b
com.ceres.jailmon.SecurityRBActivity$1 -> com.ceres.jailmon.eb:
    com.ceres.jailmon.SecurityRBActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.SettingActivity -> com.ceres.jailmon.SettingActivity:
    android.widget.LinearLayout m_layoutContent -> f
    android.widget.LinearLayout m_layoutSettingRefresh -> g
    android.widget.Button m_btnOK -> h
    android.widget.EditText m_editServer -> i
    android.widget.EditText m_editID -> j
    android.widget.TextView[] m_txtlabel -> k
    android.widget.TextView m_txtRegNum -> l
    com.ceres.jailmon.AnimationUtil m_aniset -> m
    int[] m_textValue -> n
    com.ceres.jailmon.SettingData m_data -> o
    void onCreate(android.os.Bundle) -> onCreate
    void initRefreshChoiceItems() -> h
    void setLabelSelected(int) -> b
    void signin() -> i
    void onReceiveSignInResult(com.ceres.jailmon.data.SignInResult) -> a
    android.widget.EditText access$0(com.ceres.jailmon.SettingActivity) -> a
    com.ceres.jailmon.SettingData access$1(com.ceres.jailmon.SettingActivity) -> b
    android.widget.EditText access$2(com.ceres.jailmon.SettingActivity) -> c
com.ceres.jailmon.SettingActivity$1 -> com.ceres.jailmon.ec:
    com.ceres.jailmon.SettingActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.SettingActivity$2 -> com.ceres.jailmon.ed:
    com.ceres.jailmon.SettingActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.SettingActivity$3 -> com.ceres.jailmon.ee:
    com.ceres.jailmon.SettingActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.SettingActivity$4 -> com.ceres.jailmon.ef:
    com.ceres.jailmon.SettingActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.SettingActivity$5 -> com.ceres.jailmon.eg:
    com.ceres.jailmon.SettingActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.SettingData -> com.ceres.jailmon.eh:
    android.content.SharedPreferences m_sp -> a
    java.lang.String m_strServer -> c
    java.lang.String m_strID -> d
    int m_nInteval -> b
    int getInteval() -> a
    void setInteval(int) -> a
    void loadInteval() -> b
    void saveInteval() -> c
    java.lang.String getServer() -> d
    void setServer(java.lang.String) -> a
    void loadServer() -> e
    void saveServer() -> f
    int loadMapVersion() -> g
    void saveMapVersion(int) -> b
    java.lang.String loadAuthCode() -> h
    void saveAuthCode(java.lang.String) -> b
    java.lang.String loadRegisterNum() -> i
    void saveRegisterNum(java.lang.String) -> c
    java.lang.String getID() -> j
    void setID(java.lang.String) -> d
    void loadID() -> k
    void saveID() -> l
com.ceres.jailmon.ShiftInfoActivity -> com.ceres.jailmon.ShiftInfoActivity:
    android.widget.LinearLayout m_layoutDays -> f
    android.widget.LinearLayout m_layoutConent -> g
    android.widget.ListView m_listViewDays -> h
    android.widget.ListView m_listViewContent -> i
    com.ceres.jailmon.AnimationUtil m_aniset -> j
    void onCreate(android.os.Bundle) -> onCreate
    void initShiftInfoItems() -> h
    void loadShiftInfoList(java.lang.String) -> a
    void onReceiveShiftInfoList(com.ceres.jailmon.data.ShiftInfoList) -> a
    void access$0(com.ceres.jailmon.ShiftInfoActivity,java.lang.String) -> a
com.ceres.jailmon.ShiftInfoActivity$1 -> com.ceres.jailmon.ei:
    com.ceres.jailmon.ShiftInfoActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.ThreeFixedTabActivity -> com.ceres.jailmon.ThreeFixedTabActivity:
    android.widget.LinearLayout m_layoutCells -> p
    android.widget.LinearLayout m_layoutConent -> q
    android.widget.ListView m_listViewRooms -> r
    java.lang.String[] m_strItems -> f
    android.widget.LinearLayout[] m_layout -> g
    android.widget.TextView[] m_txtlabel -> h
    com.ceres.jailmon.AnimationUtil m_aniset -> i
    com.ceres.jailmon.data.Cell m_cell -> j
    android.widget.TableLayout m_tablayout_3fixed -> k
    android.widget.TableLayout m_tablayout_duty -> l
    android.widget.TableLayout m_tablayout_agent -> m
    android.widget.TextView m_txtComment -> n
    android.widget.GridView m_grid -> s
    com.ceres.jailmon.adapter.CustomAdapter_AgentPhoto m_adpter_grid -> o
    com.ceres.jailmon.data.CellList m_celllist -> t
    com.ceres.jailmon.data.BedInfoList m_bedinfo_list -> u
    com.ceres.jailmon.data.DutyInfoList m_dutyinfo_list -> v
    com.ceres.jailmon.data.AgentInfoList m_agentinfo_list -> w
    void onCreate(android.os.Bundle) -> onCreate
    void initCellListView() -> h
    void initContentViews() -> i
    void setLayoutVisibility(int) -> b
    void setLabelSelected(int) -> c
    void show3FixedTable(com.ceres.jailmon.data.BedInfoList) -> b
    void showDutyTable(com.ceres.jailmon.data.DutyInfoList) -> b
    void showAgentTable(com.ceres.jailmon.data.AgentInfoList) -> b
    void loadCellList() -> j
    void onReceiveCellList(com.ceres.jailmon.data.CellList) -> a
    void loadCellData(com.ceres.jailmon.data.Cell) -> a
    void loadBedInfoTable(java.lang.String) -> a
    void onReceiveBedInfoList(com.ceres.jailmon.data.BedInfoList) -> a
    void loadDutyInfoTable(java.lang.String) -> b
    void onReceiveDutyInfoList(com.ceres.jailmon.data.DutyInfoList) -> a
    void loadAgentInfoTable(java.lang.String) -> c
    void onReceiveAgentInfoList(com.ceres.jailmon.data.AgentInfoList) -> a
    void loadCurrentAgent(com.ceres.jailmon.data.AgentInfoList) -> c
    void onReceiveAgentPhotoNotify() -> g
    com.ceres.jailmon.data.CellList access$0(com.ceres.jailmon.ThreeFixedTabActivity) -> a
    void access$1(com.ceres.jailmon.ThreeFixedTabActivity,com.ceres.jailmon.data.Cell) -> a
    android.widget.LinearLayout access$2(com.ceres.jailmon.ThreeFixedTabActivity) -> b
    com.ceres.jailmon.data.BedInfoList access$3(com.ceres.jailmon.ThreeFixedTabActivity) -> c
    void access$4(com.ceres.jailmon.ThreeFixedTabActivity,java.lang.String) -> a
    com.ceres.jailmon.data.DutyInfoList access$5(com.ceres.jailmon.ThreeFixedTabActivity) -> d
    void access$6(com.ceres.jailmon.ThreeFixedTabActivity,java.lang.String) -> b
    com.ceres.jailmon.data.AgentInfoList access$7(com.ceres.jailmon.ThreeFixedTabActivity) -> e
    void access$8(com.ceres.jailmon.ThreeFixedTabActivity,java.lang.String) -> c
com.ceres.jailmon.ThreeFixedTabActivity$1 -> com.ceres.jailmon.ej:
    com.ceres.jailmon.ThreeFixedTabActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceres.jailmon.ThreeFixedTabActivity$2 -> com.ceres.jailmon.ek:
    com.ceres.jailmon.ThreeFixedTabActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.ThreeFixedTabActivity$3 -> com.ceres.jailmon.el:
    com.ceres.jailmon.ThreeFixedTabActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.ThreeFixedTabActivity$4 -> com.ceres.jailmon.em:
    com.ceres.jailmon.ThreeFixedTabActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.adapter.CustomAdapter_AgentPhoto -> com.ceres.jailmon.a.a:
    android.view.LayoutInflater listContainer -> a
    android.content.Context m_context -> b
    java.util.ArrayList m_infolist -> c
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
com.ceres.jailmon.adapter.CustomAdapter_AgentPhoto$ListItemView -> com.ceres.jailmon.a.b:
    android.widget.ImageView imgPhoto -> a
    android.widget.TextView textName -> b
com.ceres.jailmon.adapter.CustomAdapter_MainList -> com.ceres.jailmon.a.c:
    android.view.LayoutInflater listContainer -> a
    android.content.Context context -> b
    java.lang.String[] m_txtItems -> c
    java.util.List m_listItems -> d
    int[] m_imgItems -> e
    int m_nCount -> f
    int m_imgItem -> g
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.ceres.jailmon.adapter.CustomAdapter_MainList$ListItemView -> com.ceres.jailmon.a.d:
    android.widget.ImageView imgItem -> a
    android.widget.TextView tvItem -> b
    com.ceres.jailmon.adapter.CustomAdapter_MainList this$0 -> c
com.ceres.jailmon.adapter.CustomAdapter_MainListChoice -> com.ceres.jailmon.a.e:
    android.view.LayoutInflater listContainer -> a
    android.content.Context context -> b
    java.lang.String[] m_txtItems -> c
    java.util.List m_listItems -> d
    int m_nCount -> e
    java.util.HashMap isSelected -> f
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.util.HashMap getIsSelected() -> a
    java.util.HashMap access$0(com.ceres.jailmon.adapter.CustomAdapter_MainListChoice) -> a
com.ceres.jailmon.adapter.CustomAdapter_MainListChoice$1 -> com.ceres.jailmon.a.f:
    com.ceres.jailmon.adapter.CustomAdapter_MainListChoice this$0 -> a
    int val$position -> b
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.ceres.jailmon.adapter.CustomAdapter_MainListChoice$ListItemView -> com.ceres.jailmon.a.g:
    android.widget.CheckBox ckItem -> a
    android.widget.TextView tvItem -> b
    com.ceres.jailmon.adapter.CustomAdapter_MainListChoice this$0 -> c
com.ceres.jailmon.adapter.CustomAdapter_MonitorInfo -> com.ceres.jailmon.a.h:
    android.view.LayoutInflater listContainer -> a
    android.content.Context context -> b
    com.ceres.jailmon.data.MonitorInfoList m_infolist -> c
    int[] m_imgItems -> d
    int m_imgItem -> e
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.ceres.jailmon.adapter.CustomAdapter_MonitorInfo$ListItemView -> com.ceres.jailmon.a.i:
    android.widget.ImageView imgItem -> a
    android.widget.TextView tvItem -> b
    com.ceres.jailmon.adapter.CustomAdapter_MonitorInfo this$0 -> c
com.ceres.jailmon.adapter.CustomAdapter_NormalInfo -> com.ceres.jailmon.a.j:
    android.view.LayoutInflater listContainer -> a
    android.content.Context context -> b
    java.util.List items -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.ceres.jailmon.adapter.CustomAdapter_NormalInfo$ListItemView -> com.ceres.jailmon.a.k:
    android.widget.TextView tvHeadline -> a
    android.widget.TextView tvContent -> b
com.ceres.jailmon.adapter.CustomAdapter_NormalInfoChoice -> com.ceres.jailmon.a.l:
    boolean[] m_state -> d
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.ceres.jailmon.adapter.CustomAdapter_NormalInfoChoice$1 -> com.ceres.jailmon.a.m:
    com.ceres.jailmon.adapter.CustomAdapter_NormalInfoChoice this$0 -> a
    int val$position -> b
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.ceres.jailmon.adapter.CustomAdapter_NormalInfoChoice$ListItemChoiceView -> com.ceres.jailmon.a.n:
    android.widget.TextView tvHeadline -> a
    android.widget.TextView tvContent -> b
    android.widget.CheckBox checkItem -> c
com.ceres.jailmon.adapter.CustomAdapter_OrderList -> com.ceres.jailmon.a.o:
    android.content.Context context -> a
    java.util.List items -> b
    android.view.LayoutInflater listContainer -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.ceres.jailmon.adapter.CustomAdapter_OrderList$ListItemView -> com.ceres.jailmon.a.p:
    android.widget.TextView txtTime -> a
    android.widget.TextView txtType -> b
    android.widget.TextView txtMoney -> c
    android.widget.TextView txtRemain -> d
    com.ceres.jailmon.adapter.CustomAdapter_OrderList this$0 -> e
com.ceres.jailmon.adapter.CustomAdapter_PolicePhoto -> com.ceres.jailmon.a.q:
    android.view.LayoutInflater listContainer -> a
    android.content.Context m_context -> b
    java.util.List m_infolist -> c
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
com.ceres.jailmon.adapter.CustomAdapter_PolicePhoto$ListItemView -> com.ceres.jailmon.a.r:
    android.widget.ImageView imgPhoto -> a
    android.widget.TextView textName -> b
com.ceres.jailmon.adapter.CustomAdapter_PowerInfo -> com.ceres.jailmon.a.s:
    android.view.LayoutInflater listContainer -> d
    android.content.Context context -> a
    java.util.List items -> b
    int[] m_imgItems -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.ceres.jailmon.adapter.CustomAdapter_PowerInfo$1 -> com.ceres.jailmon.a.t:
    com.ceres.jailmon.adapter.CustomAdapter_PowerInfo this$0 -> a
    int val$position -> b
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.ceres.jailmon.adapter.CustomAdapter_PowerInfo$ListItemView -> com.ceres.jailmon.a.u:
    android.widget.ImageView imgItem -> a
    android.widget.TextView txtItem -> b
    android.widget.Switch switchItem -> c
    com.ceres.jailmon.adapter.CustomAdapter_PowerInfo this$0 -> d
com.ceres.jailmon.adapter.CustomAdapter_PrisonerXPhoto -> com.ceres.jailmon.a.v:
    android.view.LayoutInflater listContainer -> a
    android.content.Context m_context -> b
    com.ceres.jailmon.data.PrisonerList m_infolist -> c
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
com.ceres.jailmon.adapter.CustomAdapter_PrisonerXPhoto$ListItemView -> com.ceres.jailmon.a.w:
    android.widget.ImageView imgPhoto -> a
    android.widget.TextView textName -> b
com.ceres.jailmon.adapter.CustomAdapter_TrainingInfo -> com.ceres.jailmon.a.x:
    android.content.Context context -> a
    java.util.List items -> b
    android.view.LayoutInflater listContainer -> d
    com.ceres.jailmon.adapter.onPlayListener onplay -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.ceres.jailmon.adapter.CustomAdapter_TrainingInfo$1 -> com.ceres.jailmon.a.y:
    com.ceres.jailmon.adapter.CustomAdapter_TrainingInfo this$0 -> a
    int val$selectID -> b
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.adapter.CustomAdapter_TrainingInfo$ListItemView -> com.ceres.jailmon.a.z:
    android.widget.TextView txtName -> a
    android.widget.Button btnPlay -> b
    com.ceres.jailmon.adapter.CustomAdapter_TrainingInfo this$0 -> c
com.ceres.jailmon.adapter.GoodsListAdapter -> com.ceres.jailmon.a.aa:
    android.content.Context context -> a
    java.util.List items -> b
    android.view.LayoutInflater listContainer -> c
    com.ceres.jailmon.adapter.onPurchaseListenser m_listener -> d
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.ceres.jailmon.adapter.onPurchaseListenser access$0(com.ceres.jailmon.adapter.GoodsListAdapter) -> a
com.ceres.jailmon.adapter.GoodsListAdapter$1 -> com.ceres.jailmon.a.ab:
    com.ceres.jailmon.adapter.GoodsListAdapter this$0 -> a
    int val$selectID -> b
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.adapter.GoodsListAdapter$2 -> com.ceres.jailmon.a.ac:
    com.ceres.jailmon.adapter.GoodsListAdapter this$0 -> a
    int val$selectID -> b
    void onClick(android.view.View) -> onClick
com.ceres.jailmon.adapter.ListItemView -> com.ceres.jailmon.a.ad:
    android.widget.TextView txtGoods -> a
    android.widget.TextView txtPrice -> b
    android.widget.TextView txtNum -> c
    android.widget.Button btnAdd -> d
    android.widget.Button btnSub -> e
com.ceres.jailmon.adapter.onPlayListener -> com.ceres.jailmon.a.ae:
    void onPlay(com.ceres.jailmon.data.Training) -> a
com.ceres.jailmon.adapter.onPurchaseListenser -> com.ceres.jailmon.a.af:
    boolean onAdd(com.ceres.jailmon.data.Goods) -> a
    boolean onSub(com.ceres.jailmon.data.Goods) -> b
com.ceres.jailmon.data.Account -> com.ceres.jailmon.b.a:
    float m_fBalance -> a
    java.lang.String m_strLastTime -> b
    float getBalance() -> a
    java.lang.String getLastTime() -> b
    com.ceres.jailmon.data.Account parse(java.io.InputStream) -> a
com.ceres.jailmon.data.AgentInfo -> com.ceres.jailmon.b.b:
    java.lang.String m_timeStart -> a
    java.lang.String m_timeEnd -> b
    int m_tmStart -> c
    int m_tmEnd -> d
    java.lang.String m_pname -> e
    java.util.ArrayList m_pid_list -> f
    java.util.ArrayList m_pid_bitmap -> g
    java.util.ArrayList parse_pids(java.lang.String) -> a
    int parseTime(java.lang.String) -> b
com.ceres.jailmon.data.AgentInfoList -> com.ceres.jailmon.b.c:
    java.util.List m_list -> a
    java.lang.String m_comment -> b
    com.ceres.jailmon.data.AgentInfoList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.AuthResult -> com.ceres.jailmon.b.d:
    boolean m_bOK -> a
    com.ceres.jailmon.data.AuthResult parse(java.io.InputStream) -> a
com.ceres.jailmon.data.BaseData -> com.ceres.jailmon.b.e:
    java.lang.String m_strHeadline -> a
    java.lang.String m_strContent -> b
    java.lang.String getHeadline() -> a
    java.lang.String getContent() -> b
com.ceres.jailmon.data.BedInfo -> com.ceres.jailmon.b.f:
    java.lang.String m_id -> a
    java.lang.String m_name -> b
com.ceres.jailmon.data.BedInfoList -> com.ceres.jailmon.b.g:
    java.util.List m_list -> a
    com.ceres.jailmon.data.BedInfoList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.Cell -> com.ceres.jailmon.b.h:
    java.lang.String m_strID -> a
    java.lang.String m_strType -> b
    java.lang.String m_strManager -> c
    java.lang.String m_strPoliceName -> d
    java.lang.String getID() -> a
    java.lang.String toString() -> toString
com.ceres.jailmon.data.CellList -> com.ceres.jailmon.b.i:
    java.util.List m_list -> a
    com.ceres.jailmon.data.Cell getCell(int) -> a
    int getNum() -> a
    java.util.List getList() -> b
    com.ceres.jailmon.data.CellList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.CommonResult -> com.ceres.jailmon.b.j:
    boolean m_bOK -> a
    com.ceres.jailmon.data.CommonResult parse(java.io.InputStream) -> a
com.ceres.jailmon.data.DutyInfo -> com.ceres.jailmon.b.k:
    java.lang.String m_item -> a
    java.lang.String m_name -> b
com.ceres.jailmon.data.DutyInfoList -> com.ceres.jailmon.b.l:
    java.util.List m_list -> a
    com.ceres.jailmon.data.DutyInfoList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.Goods -> com.ceres.jailmon.b.m:
    java.lang.String id -> a
    java.lang.String name -> b
    java.lang.String type -> c
    float price -> d
    int num -> e
    java.lang.String desp -> f
    java.lang.String desp_price -> g
    java.lang.String toString() -> toString
    java.lang.String price_toString() -> a
com.ceres.jailmon.data.GoodsList -> com.ceres.jailmon.b.n:
    java.util.List m_list -> a
    com.ceres.jailmon.data.GoodsList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.MapInfo -> com.ceres.jailmon.b.o:
    java.lang.String url -> a
    int ver -> b
    android.graphics.Bitmap m_bmp -> c
    com.ceres.jailmon.data.MapInfo parse(java.io.InputStream) -> a
com.ceres.jailmon.data.MapLocation -> com.ceres.jailmon.b.p:
    java.lang.String id -> a
    java.lang.String name -> b
    int x -> c
    int y -> d
    java.lang.String status -> e
com.ceres.jailmon.data.MapLocationList -> com.ceres.jailmon.b.q:
    java.util.List m_list -> a
    com.ceres.jailmon.data.MapLocationList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.MedcineInfoList -> com.ceres.jailmon.b.r:
    java.util.List m_list -> a
    java.util.List m_listDoctor -> b
    com.ceres.jailmon.data.MedcineInfoList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.MedcineResult -> com.ceres.jailmon.b.s:
    boolean m_bOK -> a
    com.ceres.jailmon.data.MedcineResult parse(java.io.InputStream) -> a
com.ceres.jailmon.data.MedicineInfo -> com.ceres.jailmon.b.t:
    java.lang.String id -> c
    java.lang.String prisoner -> d
    java.lang.String deliver -> e
    java.lang.String time -> f
    java.lang.String med_name -> g
    java.lang.String med_num -> h
    java.lang.String med_content -> i
    java.lang.String comment -> j
    java.lang.String desp -> k
    java.lang.String toString() -> toString
    java.lang.String getHeadline() -> a
    java.lang.String getContent() -> b
com.ceres.jailmon.data.MonitorInfo -> com.ceres.jailmon.b.u:
    java.lang.String id -> a
    java.lang.String ip -> b
    int port -> c
    java.lang.String user -> d
    java.lang.String passwd -> e
    java.lang.String channel -> f
    boolean available -> g
    com.mm.android.avnetsdk.param.AV_HANDLE dhhandle -> h
    int loginID -> i
    int playID -> j
    java.lang.String toString() -> toString
com.ceres.jailmon.data.MonitorInfoList -> com.ceres.jailmon.b.v:
    java.util.List m_list -> a
    com.ceres.jailmon.data.MonitorInfoList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.OutInfo -> com.ceres.jailmon.b.w:
    java.lang.String time_begin -> c
    java.lang.String time_end -> d
    java.lang.String room -> e
    java.lang.String prisoner -> f
    java.lang.String police -> g
    java.lang.String type -> h
    java.lang.String txroom -> i
    java.lang.String hjroom -> j
    java.lang.String comment -> k
    java.lang.String desp -> l
    java.lang.String toString() -> toString
    java.lang.String getHeadline() -> a
    java.lang.String getContent() -> b
com.ceres.jailmon.data.OutInfoList -> com.ceres.jailmon.b.x:
    java.util.List m_list -> a
    com.ceres.jailmon.data.OutInfoList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.Police -> com.ceres.jailmon.b.y:
    java.lang.String mID -> a
    java.lang.String mName -> b
    android.graphics.Bitmap m_bmpPhoto -> c
    java.lang.String getName() -> a
    java.lang.String getID() -> b
    android.graphics.Bitmap getPhoto() -> c
    void setPhoto(android.graphics.Bitmap) -> a
    void recycle() -> d
com.ceres.jailmon.data.PowerCtrlResult -> com.ceres.jailmon.b.z:
    boolean m_bOK -> a
    com.ceres.jailmon.data.PowerCtrlResult parse(java.io.InputStream) -> a
com.ceres.jailmon.data.PowerInfo -> com.ceres.jailmon.b.aa:
    java.lang.String type -> a
    java.lang.String room -> b
    java.lang.Boolean status -> c
    java.lang.String toString() -> toString
com.ceres.jailmon.data.PowerInfoList -> com.ceres.jailmon.b.ab:
    java.util.List m_list -> a
    com.ceres.jailmon.data.PowerInfoList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.Prisoner -> com.ceres.jailmon.b.ac:
    java.lang.String m_strID -> a
    java.lang.String m_strName -> b
    android.graphics.Bitmap m_bmpPhoto -> c
    boolean m_bVIP -> d
    java.lang.String getID() -> a
    java.lang.String getName() -> b
    boolean getVIP() -> c
    android.graphics.Bitmap getPhoto() -> d
    void setPhoto(android.graphics.Bitmap) -> a
    void recycle() -> e
    java.lang.String toString() -> toString
com.ceres.jailmon.data.PrisonerDetail -> com.ceres.jailmon.b.ad:
    java.lang.String pid -> a
    java.lang.String name -> b
    java.lang.String gender -> c
    java.lang.String nation -> d
    java.lang.String birthday -> e
    java.lang.String idcard -> f
    java.lang.String address -> g
    java.lang.String engagedate -> h
    java.lang.String vip -> i
    java.lang.String litigation -> j
    java.lang.String case_name -> k
    java.lang.String case_unit -> l
    java.lang.String case_detail -> m
    java.lang.String comment -> n
    com.ceres.jailmon.data.PrisonerDetail parse(java.io.InputStream) -> a
com.ceres.jailmon.data.PrisonerList -> com.ceres.jailmon.b.ae:
    java.util.List m_list -> a
    java.util.List m_listPolice -> b
    com.ceres.jailmon.data.Prisoner getPrisoner(int) -> a
    int getNum() -> a
    com.ceres.jailmon.data.Police getPolice(int) -> b
    int getPolicetNum() -> b
    void recycle() -> c
    com.ceres.jailmon.data.PrisonerList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.PurchaseResult -> com.ceres.jailmon.b.af:
    boolean m_bOK -> a
    com.ceres.jailmon.data.PurchaseResult parse(java.io.InputStream) -> a
com.ceres.jailmon.data.RuleBreakInfo -> com.ceres.jailmon.b.ag:
    java.lang.String police -> c
    java.lang.String time -> d
    java.lang.String content -> e
    java.lang.String solution -> f
    java.lang.String getHeadline() -> a
    java.lang.String getContent() -> b
com.ceres.jailmon.data.RuleBreakInfoList -> com.ceres.jailmon.b.ah:
    java.util.List m_list -> a
    java.util.List getList() -> a
    com.ceres.jailmon.data.RuleBreakInfoList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.RuleBreakItems -> com.ceres.jailmon.b.ai:
    java.lang.String id -> a
    java.lang.String lid -> b
    java.lang.String content -> c
    java.lang.String toString() -> toString
com.ceres.jailmon.data.RuleBreakItemsList -> com.ceres.jailmon.b.aj:
    java.util.List m_list_reason -> a
    java.util.List m_list_level -> b
    java.util.List m_list_police -> c
    java.util.List m_list_solution -> d
    com.ceres.jailmon.data.RuleBreakItems parseItem(org.xmlpull.v1.XmlPullParser) -> a
    com.ceres.jailmon.data.RuleBreakItemsList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.RuleBreakResult -> com.ceres.jailmon.b.ak:
    boolean m_bOK -> a
    com.ceres.jailmon.data.RuleBreakResult parse(java.io.InputStream) -> a
com.ceres.jailmon.data.SEC_Alert -> com.ceres.jailmon.b.al:
    java.lang.String area -> c
    java.lang.String time -> d
    java.lang.String type -> e
    java.lang.String act -> f
    java.lang.String comment -> g
    java.lang.String desp -> h
    java.lang.String toString() -> toString
    java.lang.String getHeadline() -> a
    java.lang.String getContent() -> b
com.ceres.jailmon.data.SEC_Breakrule -> com.ceres.jailmon.b.am:
    java.lang.String room -> c
    java.lang.String time -> d
    java.lang.String prisoner -> e
    java.lang.String type -> f
    java.lang.String content -> g
    java.lang.String actperson -> h
    java.lang.String act -> i
    java.lang.String comment -> j
    java.lang.String desp -> k
    java.lang.String toString() -> toString
    java.lang.String getHeadline() -> a
    java.lang.String getContent() -> b
com.ceres.jailmon.data.SEC_Call -> com.ceres.jailmon.b.an:
    java.lang.String time -> c
    java.lang.String room -> d
    java.lang.String person -> e
    java.lang.String reason -> f
    java.lang.String act -> g
    java.lang.String comment -> h
    java.lang.String desp -> i
    java.lang.String toString() -> toString
    java.lang.String getHeadline() -> a
    java.lang.String getContent() -> b
com.ceres.jailmon.data.SEC_Door -> com.ceres.jailmon.b.ao:
    java.lang.String time -> c
    java.lang.String area -> d
    java.lang.String person -> e
    java.lang.String type -> f
    java.lang.String comment -> g
    java.lang.String desp -> h
    java.lang.String toString() -> toString
    java.lang.String getHeadline() -> a
    java.lang.String getContent() -> b
com.ceres.jailmon.data.SEC_Patrol -> com.ceres.jailmon.b.ap:
    java.lang.String area -> c
    java.lang.String time -> d
    java.lang.String person -> e
    java.lang.String comment -> f
    java.lang.String desp -> g
    java.lang.String toString() -> toString
    java.lang.String getHeadline() -> a
    java.lang.String getContent() -> b
com.ceres.jailmon.data.SEC_Room -> com.ceres.jailmon.b.aq:
    java.lang.String room -> c
    java.lang.String time -> d
    java.lang.String person -> e
    java.lang.String reason -> f
    java.lang.String comment -> g
    java.lang.String desp -> h
    java.lang.String toString() -> toString
    java.lang.String getHeadline() -> a
    java.lang.String getContent() -> b
com.ceres.jailmon.data.SecurityInfoList -> com.ceres.jailmon.b.ar:
    java.util.List listDoor -> a
    java.util.List listCall -> b
    java.util.List listPatrol -> c
    java.util.List listAlert -> d
    java.util.List listBreakrule -> e
    java.util.List listRoom -> f
    java.util.List getListDoor() -> a
    java.util.List getListCall() -> b
    java.util.List getListPatrol() -> c
    java.util.List getListAlert() -> d
    java.util.List getListBreakrule() -> e
    java.util.List getListRoom() -> f
    com.ceres.jailmon.data.SecurityInfoList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.ServerTime -> com.ceres.jailmon.b.as:
com.ceres.jailmon.data.ShiftInfo -> com.ceres.jailmon.b.at:
    java.lang.String m_strPolice -> c
    java.lang.String m_strtime -> d
    java.lang.String m_strDetail -> e
    void setTime(java.lang.String) -> a
    void setPolice(java.lang.String) -> b
    void setDetail(java.lang.String) -> c
    java.lang.String getHeadline() -> a
    java.lang.String getContent() -> b
com.ceres.jailmon.data.ShiftInfoList -> com.ceres.jailmon.b.au:
    java.util.List m_list -> a
    java.util.List getList() -> a
    com.ceres.jailmon.data.ShiftInfoList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.SignInResult -> com.ceres.jailmon.b.av:
    int mMonitorType -> b
    com.ceres.jailmon.data.SignInResult parse(java.io.InputStream) -> b
com.ceres.jailmon.data.TradeInfo -> com.ceres.jailmon.b.aw:
    java.lang.String time -> a
    java.lang.String type -> b
    java.lang.String money -> c
    java.lang.String balance -> d
com.ceres.jailmon.data.TradeInfoList -> com.ceres.jailmon.b.ax:
    java.lang.String balance -> a
    java.util.List m_list -> b
    com.ceres.jailmon.data.TradeInfoList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.Training -> com.ceres.jailmon.b.ay:
    java.lang.String id -> a
    java.lang.String type -> b
    java.lang.String name -> c
com.ceres.jailmon.data.TrainingList -> com.ceres.jailmon.b.az:
    java.util.List m_listTV -> a
    java.util.List m_listMovie -> b
    java.util.List m_listMusic -> c
    com.ceres.jailmon.data.TrainingList parse(java.io.InputStream) -> a
com.ceres.jailmon.data.TrainingResult -> com.ceres.jailmon.b.ba:
    boolean m_bOK -> a
    com.ceres.jailmon.data.TrainingResult parse(java.io.InputStream) -> a
com.hikvision.netsdk.AlarmCallBack_V30 -> com.hikvision.netsdk.AlarmCallBack_V30:
    void fMSGCallBack(int,com.hikvision.netsdk.NET_DVR_ALARMER,com.hikvision.netsdk.NET_DVR_BASE_ALARM) -> fMSGCallBack
com.hikvision.netsdk.COMPRESSION_ABILITY_TYPE -> com.hikvision.netsdk.COMPRESSION_ABILITY_TYPE:
    int COMPRESSION_STREAM_ABILITY -> COMPRESSION_STREAM_ABILITY
    int MAIN_RESOLUTION_ABILITY -> MAIN_RESOLUTION_ABILITY
    int SUB_RESOLUTION_ABILITY -> SUB_RESOLUTION_ABILITY
    int EVENT_RESOLUTION_ABILITY -> EVENT_RESOLUTION_ABILITY
    int FRAME_ABILITY -> FRAME_ABILITY
    int BITRATE_TYPE_ABILITY -> BITRATE_TYPE_ABILITY
    int BITRATE_ABILITY -> BITRATE_ABILITY
com.hikvision.netsdk.DeviceType -> com.hikvision.netsdk.DeviceType:
    int DVR -> DVR
    int ATMDVR -> ATMDVR
    int DVS -> DVS
    int DEC -> DEC
    int ENC_DEC -> ENC_DEC
    int DVR_HC -> DVR_HC
    int DVR_HT -> DVR_HT
    int DVR_HF -> DVR_HF
    int DVR_HS -> DVR_HS
    int DVR_HTS -> DVR_HTS
    int DVR_HB -> DVR_HB
    int DVR_HCS -> DVR_HCS
    int DVS_A -> DVS_A
    int DVR_HC_S -> DVR_HC_S
    int DVR_HT_S -> DVR_HT_S
    int DVR_HF_S -> DVR_HF_S
    int DVR_HS_S -> DVR_HS_S
    int ATMDVR_S -> ATMDVR_S
    int LOWCOST_DVR -> LOWCOST_DVR
    int DEC_MAT -> DEC_MAT
    int DVR_MOBILE -> DVR_MOBILE
    int DVR_HD_S -> DVR_HD_S
    int DVR_HD_SL -> DVR_HD_SL
    int DVR_HC_SL -> DVR_HC_SL
    int DVR_HS_ST -> DVR_HS_ST
    int DVS_HW -> DVS_HW
    int IPCAM -> IPCAM
    int MEGA_IPCAM -> MEGA_IPCAM
    int IPCAM_X62MF -> IPCAM_X62MF
    int IPDOME -> IPDOME
    int MEGA_IPDOME -> MEGA_IPDOME
    int IPMOD -> IPMOD
    int DS71XX_H -> DS71XX_H
    int DS72XX_H_S -> DS72XX_H_S
    int DS73XX_H_S -> DS73XX_H_S
    int DS81XX_HS_S -> DS81XX_HS_S
    int DS81XX_HL_S -> DS81XX_HL_S
    int DS81XX_HC_S -> DS81XX_HC_S
    int DS81XX_HD_S -> DS81XX_HD_S
    int DS81XX_HE_S -> DS81XX_HE_S
    int DS81XX_HF_S -> DS81XX_HF_S
    int DS81XX_AH_S -> DS81XX_AH_S
    int DS81XX_AHF_S -> DS81XX_AHF_S
    int DS90XX_HF_S -> DS90XX_HF_S
    int DS91XX_HF_S -> DS91XX_HF_S
    int DS91XX_HD_S -> DS91XX_HD_S
com.hikvision.netsdk.ExceptionCallBack -> com.hikvision.netsdk.ExceptionCallBack:
    void fExceptionCallBack(int,int,int) -> fExceptionCallBack
com.hikvision.netsdk.HCNetSDK -> com.hikvision.netsdk.HCNetSDK:
    com.hikvision.netsdk.HCNetSDK netSdk -> netSdk
    int MAX_ALARMIN_V30 -> MAX_ALARMIN_V30
    int MAX_AUDIO_V30 -> MAX_AUDIO_V30
    int MAX_LINK -> MAX_LINK
    int MAX_WIRELESS_ALARM_NUM -> MAX_WIRELESS_ALARM_NUM
    int MAX_AUX_ALARM_NUM -> MAX_AUX_ALARM_NUM
    int MAX_DAYS -> MAX_DAYS
    int MAX_TIMESEGMENT_V30 -> MAX_TIMESEGMENT_V30
    int SERIALNO_LEN -> SERIALNO_LEN
    int NAME_LEN -> NAME_LEN
    int PASSWD_LEN -> PASSWD_LEN
    int MACADDR_LEN -> MACADDR_LEN
    int MAX_ETHERNET -> MAX_ETHERNET
    int MAX_DOMAIN_NAME -> MAX_DOMAIN_NAME
    int MAX_ANALOG_CHANNUM -> MAX_ANALOG_CHANNUM
    int MAX_IP_DEVICE -> MAX_IP_DEVICE
    int MAX_IP_CHANNEL -> MAX_IP_CHANNEL
    int MAX_ANALOG_ALARMOUT -> MAX_ANALOG_ALARMOUT
    int MAX_IP_ALARMOUT -> MAX_IP_ALARMOUT
    int MAX_ALARMOUT_V30 -> MAX_ALARMOUT_V30
    int MAX_IP_DEVICE_V40 -> MAX_IP_DEVICE_V40
    int MAX_CHANNUM -> MAX_CHANNUM
    int MAX_ALARMIN -> MAX_ALARMIN
    int MAX_ALARMOUT -> MAX_ALARMOUT
    int MAX_DISKNUM -> MAX_DISKNUM
    int MAX_ABILITYTYPE_NUM -> MAX_ABILITYTYPE_NUM
    int DESC_LEN -> DESC_LEN
    int DESC_LEN_32 -> DESC_LEN_32
    int MAX_NODE_NUM -> MAX_NODE_NUM
    int MAX_CHANNUM_V30 -> MAX_CHANNUM_V30
    int MAX_DISKNUM_V30 -> MAX_DISKNUM_V30
    int MAX_PRESET_V30 -> MAX_PRESET_V30
    int MAX_CRUISE_V30 -> MAX_CRUISE_V30
    int MAX_TRACK_V30 -> MAX_TRACK_V30
    int MAX_SHELTERNUM -> MAX_SHELTERNUM
    int PTZ_PROTOCOL_NUM -> PTZ_PROTOCOL_NUM
    int EXCEPTION_EXCHANGE -> EXCEPTION_EXCHANGE
    int EXCEPTION_PREVIEW -> EXCEPTION_PREVIEW
    int EXCEPTION_RECONNECT -> EXCEPTION_RECONNECT
    int NET_DVR_SYSHEAD -> NET_DVR_SYSHEAD
    int NET_DVR_STREAMDATA -> NET_DVR_STREAMDATA
    int NET_DVR_AUDIOSTREAMDATA -> NET_DVR_AUDIOSTREAMDATA
    int NET_DVR_STD_VIDEODATA -> NET_DVR_STD_VIDEODATA
    int NET_DVR_STD_AUDIODATA -> NET_DVR_STD_AUDIODATA
    int NET_DVR_GET_DEVICECFG -> NET_DVR_GET_DEVICECFG
    int NET_DVR_SET_DEVICECFG -> NET_DVR_SET_DEVICECFG
    int NET_DVR_GET_NETCFG_V30 -> NET_DVR_GET_NETCFG_V30
    int NET_DVR_SET_NETCFG_V30 -> NET_DVR_SET_NETCFG_V30
    int NET_DVR_GET_PICCFG_V30 -> NET_DVR_GET_PICCFG_V30
    int NET_DVR_SET_PICCFG_V30 -> NET_DVR_SET_PICCFG_V30
    int NET_DVR_GET_COMPRESSCFG_V30 -> NET_DVR_GET_COMPRESSCFG_V30
    int NET_DVR_SET_COMPRESSCFG_V30 -> NET_DVR_SET_COMPRESSCFG_V30
    int NET_DVR_GET_IPALARMOUTCFG -> NET_DVR_GET_IPALARMOUTCFG
    int NET_DVR_GET_IPPARACFG_V31 -> NET_DVR_GET_IPPARACFG_V31
    int NET_DVR_SET_IPPARACFG_V31 -> NET_DVR_SET_IPPARACFG_V31
    int NET_DVR_GET_COMPRESSCFG_AUD -> NET_DVR_GET_COMPRESSCFG_AUD
    int NET_DVR_GET_ALARMINCFG_V30 -> NET_DVR_GET_ALARMINCFG_V30
    int NET_DVR_SET_ALARMINCFG_V30 -> NET_DVR_SET_ALARMINCFG_V30
    int NET_DVR_GET_ALARMOUTCFG_V30 -> NET_DVR_GET_ALARMOUTCFG_V30
    int NET_DVR_SET_ALARMOUTCFG_V30 -> NET_DVR_SET_ALARMOUTCFG_V30
    int NET_DVR_GET_NTPCFG -> NET_DVR_GET_NTPCFG
    int NET_DVR_SET_NTPCFG -> NET_DVR_SET_NTPCFG
    int NET_DVR_GET_IPPARACFG_V40 -> NET_DVR_GET_IPPARACFG_V40
    int NET_DVR_SET_IPPARACFG_V40 -> NET_DVR_SET_IPPARACFG_V40
    int NET_DVR_GET_DECODERCFG_V30 -> NET_DVR_GET_DECODERCFG_V30
    int NET_DVR_SET_DECODERCFG_V30 -> NET_DVR_SET_DECODERCFG_V30
    int NET_IPC_GET_AUX_ALARMCFG -> NET_IPC_GET_AUX_ALARMCFG
    int NET_IPC_SET_AUX_ALARMCFG -> NET_IPC_SET_AUX_ALARMCFG
    int NET_DVR_GET_RECORDCFG_V30 -> NET_DVR_GET_RECORDCFG_V30
    int NET_DVR_SET_RECORDCFG_V30 -> NET_DVR_SET_RECORDCFG_V30
    int NET_DVR_GET_ZEROCHANCFG -> NET_DVR_GET_ZEROCHANCFG
    int NET_DVR_SET_ZEROCHANCFG -> NET_DVR_SET_ZEROCHANCFG
    int NET_DVR_GET_DEVICECFG_V40 -> NET_DVR_GET_DEVICECFG_V40
    int COMM_ALARM -> COMM_ALARM
    int COMM_ALARM_V30 -> COMM_ALARM_V30
    int NET_DVR_FILE_SUCCESS -> NET_DVR_FILE_SUCCESS
    int NET_DVR_FILE_NOFIND -> NET_DVR_FILE_NOFIND
    int NET_DVR_ISFINDING -> NET_DVR_ISFINDING
    int NET_DVR_NOMOREFILE -> NET_DVR_NOMOREFILE
    int NET_DVR_FILE_EXCEPTION -> NET_DVR_FILE_EXCEPTION
    int NET_DVR_PLAYSTART -> NET_DVR_PLAYSTART
    int NET_DVR_PLAYSTOP -> NET_DVR_PLAYSTOP
    int NET_DVR_PLAYPAUSE -> NET_DVR_PLAYPAUSE
    int NET_DVR_PLAYRESTART -> NET_DVR_PLAYRESTART
    int NET_DVR_PLAYFAST -> NET_DVR_PLAYFAST
    int NET_DVR_PLAYSLOW -> NET_DVR_PLAYSLOW
    int NET_DVR_PLAYNORMAL -> NET_DVR_PLAYNORMAL
    int NET_DVR_PLAYFRAME -> NET_DVR_PLAYFRAME
    int NET_DVR_PLAYSETPOS -> NET_DVR_PLAYSETPOS
    int NET_DVR_PLAYGETPOS -> NET_DVR_PLAYGETPOS
    int NET_DVR_PLAYGETTIME -> NET_DVR_PLAYGETTIME
    int NET_DVR_PLAYGETFRAME -> NET_DVR_PLAYGETFRAME
    int NET_DVR_GETTOTALFRAMES -> NET_DVR_GETTOTALFRAMES
    int NET_DVR_GETTOTALTIME -> NET_DVR_GETTOTALTIME
    int NET_DVR_SETSPEED -> NET_DVR_SETSPEED
    int NET_DVR_PLAYSETTIME -> NET_DVR_PLAYSETTIME
    int NET_DVR_PLAYGETTOTALLEN -> NET_DVR_PLAYGETTOTALLEN
    int DEVICE_SOFTHARDWARE_ABILITY -> DEVICE_SOFTHARDWARE_ABILITY
    int DEVICE_NETWORK_ABILITY -> DEVICE_NETWORK_ABILITY
    int DEVICE_ENCODE_ALL_ABILITY -> DEVICE_ENCODE_ALL_ABILITY
    int DEVICE_ENCODE_CURRENT -> DEVICE_ENCODE_CURRENT
    int IPC_FRONT_PARAMETER -> IPC_FRONT_PARAMETER
    int IPC_UPGRADE_DESCRIPTION -> IPC_UPGRADE_DESCRIPTION
    int DEVICE_RAID_ABILITY -> DEVICE_RAID_ABILITY
    int DEVICE_ENCODE_ALL_ABILITY_V20 -> DEVICE_ENCODE_ALL_ABILITY_V20
    int IPC_FRONT_PARAMETER_V20 -> IPC_FRONT_PARAMETER_V20
    int DEVICE_ALARM_ABILITY -> DEVICE_ALARM_ABILITY
    int DEVICE_DYNCHAN_ABILITY -> DEVICE_DYNCHAN_ABILITY
    int DEVICE_USER_ABILITY -> DEVICE_USER_ABILITY
    int DEVICE_NETAPP_ABILITY -> DEVICE_NETAPP_ABILITY
    int DEVICE_VIDEOPIC_ABILITY -> DEVICE_VIDEOPIC_ABILITY
    int DEVICE_JPEG_CAP_ABILITY -> DEVICE_JPEG_CAP_ABILITY
    int DEVICE_SERIAL_ABILITY -> DEVICE_SERIAL_ABILITY
    int VCA_DEV_ABILITY -> VCA_DEV_ABILITY
    int VCA_CHAN_ABILITY -> VCA_CHAN_ABILITY
    int MATRIXDECODER_ABILITY -> MATRIXDECODER_ABILITY
    int VIDEOPLATFORM_ABILITY -> VIDEOPLATFORM_ABILITY
    int MATRIXDECODER_ABILITY_V41 -> MATRIXDECODER_ABILITY_V41
    int DECODER_ABILITY -> DECODER_ABILITY
    int CODECARD_ABILITY -> CODECARD_ABILITY
    int SNAPCAMERA_ABILITY -> SNAPCAMERA_ABILITY
    int ITC_TRIGGER_MODE_ABILITY -> ITC_TRIGGER_MODE_ABILITY
    int COMPRESSIONCFG_ABILITY -> COMPRESSIONCFG_ABILITY
    int COMPRESSION_LIMIT -> COMPRESSION_LIMIT
    int PIC_CAPTURE_ABILITY -> PIC_CAPTURE_ABILITY
    int IT_DEVICE_ABILITY -> IT_DEVICE_ABILITY
    int SCREENCONTROL_ABILITY -> SCREENCONTROL_ABILITY
    int SCREENSERVER_ABILITY -> SCREENSERVER_ABILITY
    int FISHEYE_ABILITY -> FISHEYE_ABILITY
    int LOCAL_AREA_NETWORK -> LOCAL_AREA_NETWORK
    int WIDE_AREA_NETWORK -> WIDE_AREA_NETWORK
    int STEP_RECV_DATA -> STEP_RECV_DATA
    int STEP_UPGRADE -> STEP_UPGRADE
    int STEP_BACKUP -> STEP_BACKUP
    int STEP_SEARCH -> STEP_SEARCH
    com.hikvision.netsdk.HCNetSDK getInstance() -> getInstance
    boolean NET_DVR_Init() -> NET_DVR_Init
    boolean NET_DVR_Cleanup() -> NET_DVR_Cleanup
    boolean NET_DVR_SetConnectTime(int) -> NET_DVR_SetConnectTime
    boolean NET_DVR_SetReconnect(int,boolean) -> NET_DVR_SetReconnect
    int NET_DVR_GetLastError() -> NET_DVR_GetLastError
    int NET_DVR_GetSDKVersion() -> NET_DVR_GetSDKVersion
    int NET_DVR_GetSDKBuildVersion() -> NET_DVR_GetSDKBuildVersion
    boolean NET_DVR_SetExceptionCallBack(com.hikvision.netsdk.ExceptionCallBack) -> NET_DVR_SetExceptionCallBack
    int NET_DVR_Login_V30(java.lang.String,int,java.lang.String,java.lang.String,com.hikvision.netsdk.NET_DVR_DEVICEINFO_V30) -> NET_DVR_Login_V30
    boolean NET_DVR_Logout_V30(int) -> NET_DVR_Logout_V30
    int NET_DVR_RealPlay_V30(int,com.hikvision.netsdk.NET_DVR_CLIENTINFO,com.hikvision.netsdk.RealPlayCallBack,boolean) -> NET_DVR_RealPlay_V30
    boolean NET_DVR_StopRealPlay(int) -> NET_DVR_StopRealPlay
    boolean NET_DVR_MakeKeyFrame(int,int) -> NET_DVR_MakeKeyFrame
    boolean NET_DVR_MakeKeyFrameSub(int,int) -> NET_DVR_MakeKeyFrameSub
    boolean NET_DVR_ClientGetVideoEffect(int,com.hikvision.netsdk.NET_DVR_VIDEOEFFECT) -> NET_DVR_ClientGetVideoEffect
    boolean NET_DVR_ClientSetVideoEffect(int,com.hikvision.netsdk.NET_DVR_VIDEOEFFECT) -> NET_DVR_ClientSetVideoEffect
    boolean NET_DVR_PTZControl(int,int,int) -> NET_DVR_PTZControl
    boolean NET_DVR_PTZControl_Other(int,int,int,int) -> NET_DVR_PTZControl_Other
    boolean NET_DVR_PTZControlWithSpeed(int,int,int,int) -> NET_DVR_PTZControlWithSpeed
    boolean NET_DVR_PTZControlWithSpeed_Other(int,int,int,int,int) -> NET_DVR_PTZControlWithSpeed_Other
    boolean NET_DVR_PTZPreset(int,int,int) -> NET_DVR_PTZPreset
    boolean NET_DVR_PTZPreset_Other(int,int,int,int) -> NET_DVR_PTZPreset_Other
    boolean NET_DVR_PTZCruise(int,int,byte,byte,short) -> NET_DVR_PTZCruise
    boolean NET_DVR_PTZCruise_Other(int,int,int,byte,byte,short) -> NET_DVR_PTZCruise_Other
    boolean NET_DVR_PTZTrack(int,int) -> NET_DVR_PTZTrack
    boolean NET_DVR_PTZTrack_Other(int,int,int) -> NET_DVR_PTZTrack_Other
    boolean NET_DVR_GetPTZProtocol(int,com.hikvision.netsdk.NET_DVR_PTZCFG) -> NET_DVR_GetPTZProtocol
    boolean NET_DVR_RebootDVR(int) -> NET_DVR_RebootDVR
    boolean NET_DVR_ShutDownDVR(int) -> NET_DVR_ShutDownDVR
    int NET_DVR_StartVoiceCom_MR_V30(int,int,com.hikvision.netsdk.VoiceDataCallBack) -> NET_DVR_StartVoiceCom_MR_V30
    boolean NET_DVR_VoiceComSendData(int,byte[],int) -> NET_DVR_VoiceComSendData
    boolean NET_DVR_StopVoiceCom(int) -> NET_DVR_StopVoiceCom
    boolean NET_DVR_GetDVRConfig(int,int,int,com.hikvision.netsdk.NET_DVR_CONFIG) -> NET_DVR_GetDVRConfig
    boolean NET_DVR_SetDVRConfig(int,int,int,com.hikvision.netsdk.NET_DVR_CONFIG) -> NET_DVR_SetDVRConfig
    boolean NET_DVR_GetAlarmOut_V30(int,com.hikvision.netsdk.NET_DVR_ALARMOUTSTATUS_V30) -> NET_DVR_GetAlarmOut_V30
    boolean NET_DVR_SetAlarmOut(int,int,int) -> NET_DVR_SetAlarmOut
    int NET_DVR_SetupAlarmChan_V30(int) -> NET_DVR_SetupAlarmChan_V30
    boolean NET_DVR_CloseAlarmChan_V30(int) -> NET_DVR_CloseAlarmChan_V30
    boolean NET_DVR_SetDVRMessageCallBack_V30(com.hikvision.netsdk.AlarmCallBack_V30) -> NET_DVR_SetDVRMessageCallBack_V30
    int NET_DVR_FindFile_V30(int,com.hikvision.netsdk.NET_DVR_FILECOND) -> NET_DVR_FindFile_V30
    int NET_DVR_FindNextFile_V30(int,com.hikvision.netsdk.NET_DVR_FINDDATA_V30) -> NET_DVR_FindNextFile_V30
    boolean NET_DVR_FindClose_V30(int) -> NET_DVR_FindClose_V30
    int NET_DVR_PlayBackByName(int,java.lang.String) -> NET_DVR_PlayBackByName
    int NET_DVR_PlayBackByTime(int,int,com.hikvision.netsdk.NET_DVR_TIME,com.hikvision.netsdk.NET_DVR_TIME) -> NET_DVR_PlayBackByTime
    boolean NET_DVR_PlayBackControl_V40(int,int,byte[],int,com.hikvision.netsdk.NET_DVR_PLAYBACK_INFO) -> NET_DVR_PlayBackControl_V40
    boolean NET_DVR_StopPlayBack(int) -> NET_DVR_StopPlayBack
    boolean NET_DVR_SetPlayDataCallBack(int,com.hikvision.netsdk.PlaybackCallBack) -> NET_DVR_SetPlayDataCallBack
    int NET_DVR_GetPlayBackPos(int) -> NET_DVR_GetPlayBackPos
    boolean NET_DVR_PlayBackSaveData(int,java.lang.String) -> NET_DVR_PlayBackSaveData
    boolean NET_DVR_StopPlayBackSave(int) -> NET_DVR_StopPlayBackSave
    int NET_DVR_GetFileByName(int,java.lang.String,java.lang.String) -> NET_DVR_GetFileByName
    int NET_DVR_GetFileByTime(int,int,com.hikvision.netsdk.NET_DVR_TIME,com.hikvision.netsdk.NET_DVR_TIME,java.lang.String) -> NET_DVR_GetFileByTime
    boolean NET_DVR_StopGetFile(int) -> NET_DVR_StopGetFile
    int NET_DVR_GetDownloadPos(int) -> NET_DVR_GetDownloadPos
    boolean NET_DVR_GetDVRIPByResolveSvr_EX(java.lang.String,short,byte[],short,java.lang.String,short,com.hikvision.netsdk.NET_DVR_RESOLVE_DEVICEINFO) -> NET_DVR_GetDVRIPByResolveSvr_EX
    boolean NET_DVR_GetDVRIPByResolveSvr_EX(java.lang.String,short,java.lang.String,short,java.lang.String,short,com.hikvision.netsdk.NET_DVR_RESOLVE_DEVICEINFO) -> NET_DVR_GetDVRIPByResolveSvr_EX
    boolean NET_DVR_PTZSelZoomIn(int,com.hikvision.netsdk.NET_DVR_POINT_FRAME) -> NET_DVR_PTZSelZoomIn
    boolean NET_DVR_PTZSelZoomIn_EX(int,int,com.hikvision.netsdk.NET_DVR_POINT_FRAME) -> NET_DVR_PTZSelZoomIn_EX
    boolean NET_DVR_CaptureJPEGPicture(int,int,com.hikvision.netsdk.NET_DVR_JPEGPARA,java.lang.String) -> NET_DVR_CaptureJPEGPicture
    boolean NET_DVR_CaptureJPEGPicture_NEW(int,int,com.hikvision.netsdk.NET_DVR_JPEGPARA,byte[],int,com.hikvision.netsdk.INT_PTR) -> NET_DVR_CaptureJPEGPicture_NEW
    boolean NET_DVR_GetCompressionAbility(int,int,com.hikvision.netsdk.NET_DVR_COMPRESSIONCFG_ABILITY) -> NET_DVR_GetCompressionAbility
    boolean NET_DVR_SetLogToFile(int,java.lang.String,boolean) -> NET_DVR_SetLogToFile
    boolean NET_DVR_GetCurrentAudioCompress(int,com.hikvision.netsdk.NET_DVR_COMPRESSION_AUDIO) -> NET_DVR_GetCurrentAudioCompress
    int NET_DVR_SerialStart(int,int,com.hikvision.netsdk.SerialDataCallBack) -> NET_DVR_SerialStart
    boolean NET_DVR_SerialSend(int,int,byte[],int) -> NET_DVR_SerialSend
    boolean NET_DVR_SerialStop(int) -> NET_DVR_SerialStop
    boolean NET_DVR_SendToSerialPort(int,int,int,byte[],int) -> NET_DVR_SendToSerialPort
    boolean NET_DVR_SendTo232Port(int,byte[],int) -> NET_DVR_SendTo232Port
    boolean NET_DVR_GetXMLAbility(int,int,byte[],int,byte[],int,com.hikvision.netsdk.INT_PTR) -> NET_DVR_GetXMLAbility
    boolean NET_DVR_SetSDKLocalConfig(com.hikvision.netsdk.NET_DVR_SDKLOCAL_CFG) -> NET_DVR_SetSDKLocalConfig
    boolean NET_DVR_GetSDKLocalConfig(com.hikvision.netsdk.NET_DVR_SDKLOCAL_CFG) -> NET_DVR_GetSDKLocalConfig
    boolean NET_DVR_SaveRealData(int,java.lang.String) -> NET_DVR_SaveRealData
    boolean NET_DVR_StopSaveRealData(int) -> NET_DVR_StopSaveRealData
    boolean NET_DVR_SetSimAbilityPath(java.lang.String,java.lang.String) -> NET_DVR_SetSimAbilityPath
    boolean NET_DVR_StartDVRRecord(int,int,int) -> NET_DVR_StartDVRRecord
    boolean NET_DVR_StopDVRRecord(int,int) -> NET_DVR_StopDVRRecord
    boolean NET_DVR_GetDVRWorkState_V30(int,com.hikvision.netsdk.NET_DVR_WORKSTATE_V30) -> NET_DVR_GetDVRWorkState_V30
    int NET_DVR_ZeroStartPlay(int,com.hikvision.netsdk.NET_DVR_CLIENTINFO,com.hikvision.netsdk.RealPlayCallBack,boolean) -> NET_DVR_ZeroStartPlay
    boolean NET_DVR_ZeroStopPlay(int) -> NET_DVR_ZeroStopPlay
    boolean NET_DVR_SetNetworkEnvironment(int) -> NET_DVR_SetNetworkEnvironment
    int NET_DVR_Upgrade(int,java.lang.String) -> NET_DVR_Upgrade
    int NET_DVR_GetUpgradeProgress(int) -> NET_DVR_GetUpgradeProgress
    int NET_DVR_GetUpgradeState(int) -> NET_DVR_GetUpgradeState
    int NET_DVR_GetUpgradeStep(int,com.hikvision.netsdk.INT_PTR) -> NET_DVR_GetUpgradeStep
    boolean NET_DVR_CloseUpgradeHandle(int) -> NET_DVR_CloseUpgradeHandle
com.hikvision.netsdk.INT_PTR -> com.hikvision.netsdk.INT_PTR:
    int iValue -> iValue
com.hikvision.netsdk.NET_DVR_ABILITY_LIST -> com.hikvision.netsdk.NET_DVR_ABILITY_LIST:
    int dwAbilityType -> dwAbilityType
    byte[] byRes -> byRes
    int dwNodeNum -> dwNodeNum
    com.hikvision.netsdk.NET_DVR_DESC_NODE[] struDescNode -> struDescNode
com.hikvision.netsdk.NET_DVR_ALARMER -> com.hikvision.netsdk.NET_DVR_ALARMER:
    byte byUserIDValid -> byUserIDValid
    byte bySerialValid -> bySerialValid
    byte byVersionValid -> byVersionValid
    byte byDeviceNameValid -> byDeviceNameValid
    byte byMacAddrValid -> byMacAddrValid
    byte byLinkPortValid -> byLinkPortValid
    byte byDeviceIPValid -> byDeviceIPValid
    byte bySocketIPValid -> bySocketIPValid
    int lUserID -> lUserID
    byte[] sSerialNumber -> sSerialNumber
    int dwDeviceVersion -> dwDeviceVersion
    byte[] sDeviceName -> sDeviceName
    byte[] byMacAddr -> byMacAddr
    short wLinkPort -> wLinkPort
    byte[] sDeviceIP -> sDeviceIP
    byte[] sSocketIP -> sSocketIP
    byte byIpProtocol -> byIpProtocol
    byte[] byRes2 -> byRes2
com.hikvision.netsdk.NET_DVR_ALARMINCFG_V30 -> com.hikvision.netsdk.NET_DVR_ALARMINCFG_V30:
    byte[] sAlarmInName -> sAlarmInName
    byte byAlarmType -> byAlarmType
    byte byAlarmInHandle -> byAlarmInHandle
    byte byChannel -> byChannel
    com.hikvision.netsdk.NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType -> struAlarmHandleType
    com.hikvision.netsdk.NET_DVR_SCHEDTIME[][] struAlarmTime -> struAlarmTime
    byte[] byRelRecordChan -> byRelRecordChan
    byte[] byEnablePreset -> byEnablePreset
    byte[] byPresetNo -> byPresetNo
    byte[] byEnableCruise -> byEnableCruise
    byte[] byCruiseNo -> byCruiseNo
    byte[] byEnablePtzTrack -> byEnablePtzTrack
    byte[] byPTZTrack -> byPTZTrack
com.hikvision.netsdk.NET_DVR_ALARMINFO -> com.hikvision.netsdk.NET_DVR_ALARMINFO:
    int dwAlarmType -> dwAlarmType
    int dwAlarmInputNumber -> dwAlarmInputNumber
    int[] dwAlarmOutputNumber -> dwAlarmOutputNumber
    int[] dwAlarmRelateChannel -> dwAlarmRelateChannel
    int[] dwChannel -> dwChannel
    int[] dwDiskNumber -> dwDiskNumber
com.hikvision.netsdk.NET_DVR_ALARMINFO_V30 -> com.hikvision.netsdk.NET_DVR_ALARMINFO_V30:
    int dwAlarmType -> dwAlarmType
    int dwAlarmInputNumber -> dwAlarmInputNumber
    byte[] byAlarmOutputNumber -> byAlarmOutputNumber
    byte[] byAlarmRelateChannel -> byAlarmRelateChannel
    byte[] byChannel -> byChannel
    byte[] byDiskNumber -> byDiskNumber
com.hikvision.netsdk.NET_DVR_ALARMOUTCFG_V30 -> com.hikvision.netsdk.NET_DVR_ALARMOUTCFG_V30:
    byte[] sAlarmOutName -> sAlarmOutName
    int dwAlarmOutDelay -> dwAlarmOutDelay
    com.hikvision.netsdk.NET_DVR_SCHEDTIME[][] struAlarmOutTime -> struAlarmOutTime
com.hikvision.netsdk.NET_DVR_ALARMOUTSTATUS_V30 -> com.hikvision.netsdk.NET_DVR_ALARMOUTSTATUS_V30:
    byte[] Output -> Output
com.hikvision.netsdk.NET_DVR_BASE_ALARM -> com.hikvision.netsdk.NET_DVR_BASE_ALARM:
com.hikvision.netsdk.NET_DVR_CHANNELSTATE_V30 -> com.hikvision.netsdk.NET_DVR_CHANNELSTATE_V30:
    byte byRecordStatic -> byRecordStatic
    byte bySignalStatic -> bySignalStatic
    byte byHardwareStatic -> byHardwareStatic
    int dwBitRate -> dwBitRate
    int dwLinkNum -> dwLinkNum
    com.hikvision.netsdk.NET_DVR_IPADDR[] struClientIP -> struClientIP
    int dwIPLinkNum -> dwIPLinkNum
    byte byExceedMaxLink -> byExceedMaxLink
com.hikvision.netsdk.NET_DVR_CLIENTINFO -> com.hikvision.netsdk.NET_DVR_CLIENTINFO:
    int lChannel -> lChannel
    int lLinkMode -> lLinkMode
    java.lang.String sMultiCastIP -> sMultiCastIP
com.hikvision.netsdk.NET_DVR_COMPRESSIONCFG_ABILITY -> com.hikvision.netsdk.NET_DVR_COMPRESSIONCFG_ABILITY:
    int dwSize -> dwSize
    int dwAbilityNum -> dwAbilityNum
    com.hikvision.netsdk.NET_DVR_ABILITY_LIST[] struAbilityNode -> struAbilityNode
com.hikvision.netsdk.NET_DVR_COMPRESSIONCFG_V30 -> com.hikvision.netsdk.NET_DVR_COMPRESSIONCFG_V30:
    com.hikvision.netsdk.NET_DVR_COMPRESSION_INFO_V30 struNormHighRecordPara -> struNormHighRecordPara
    com.hikvision.netsdk.NET_DVR_COMPRESSION_INFO_V30 struEventRecordPara -> struEventRecordPara
    com.hikvision.netsdk.NET_DVR_COMPRESSION_INFO_V30 struNetPara -> struNetPara
    com.hikvision.netsdk.NET_DVR_COMPRESSION_INFO_V30 struRes -> struRes
com.hikvision.netsdk.NET_DVR_COMPRESSION_AUDIO -> com.hikvision.netsdk.NET_DVR_COMPRESSION_AUDIO:
    byte byAudioEncType -> byAudioEncType
    byte[] byres -> byres
com.hikvision.netsdk.NET_DVR_COMPRESSION_INFO_V30 -> com.hikvision.netsdk.NET_DVR_COMPRESSION_INFO_V30:
    byte byStreamType -> byStreamType
    byte byResolution -> byResolution
    byte byBitrateType -> byBitrateType
    byte byPicQuality -> byPicQuality
    int dwVideoBitrate -> dwVideoBitrate
    int dwVideoFrameRate -> dwVideoFrameRate
    short wIntervalFrameI -> wIntervalFrameI
    byte byIntervalBPFrame -> byIntervalBPFrame
    byte byVideoEncType -> byVideoEncType
    byte byAudioEncType -> byAudioEncType
com.hikvision.netsdk.NET_DVR_CONFIG -> com.hikvision.netsdk.NET_DVR_CONFIG:
com.hikvision.netsdk.NET_DVR_DECODERCFG_V30 -> com.hikvision.netsdk.NET_DVR_DECODERCFG_V30:
    int dwBaudRate -> dwBaudRate
    byte byDataBit -> byDataBit
    byte byStopBit -> byStopBit
    byte byParity -> byParity
    byte byFlowcontrol -> byFlowcontrol
    short wDecoderType -> wDecoderType
    short wDecoderAddress -> wDecoderAddress
    byte[] bySetPreset -> bySetPreset
    byte[] bySetCruise -> bySetCruise
    byte[] bySetTrack -> bySetTrack
com.hikvision.netsdk.NET_DVR_DESC_NODE -> com.hikvision.netsdk.NET_DVR_DESC_NODE:
    int iValue -> iValue
    byte[] byDescribe -> byDescribe
    int dwFreeSpace -> dwFreeSpace
    byte[] byRes -> byRes
com.hikvision.netsdk.NET_DVR_DEVICECFG -> com.hikvision.netsdk.NET_DVR_DEVICECFG:
    byte[] sDVRName -> sDVRName
    int dwDVRID -> dwDVRID
    int dwRecycleRecord -> dwRecycleRecord
    byte[] sSerialNumber -> sSerialNumber
    int dwSoftwareVersion -> dwSoftwareVersion
    int dwSoftwareBuildDate -> dwSoftwareBuildDate
    int dwDSPSoftwareVersion -> dwDSPSoftwareVersion
    int dwDSPSoftwareBuildDate -> dwDSPSoftwareBuildDate
    int dwPanelVersion -> dwPanelVersion
    int dwHardwareVersion -> dwHardwareVersion
    byte byAlarmInPortNum -> byAlarmInPortNum
    byte byAlarmOutPortNum -> byAlarmOutPortNum
    byte byRS232Num -> byRS232Num
    byte byRS485Num -> byRS485Num
    byte byNetworkPortNum -> byNetworkPortNum
    byte byDiskCtrlNum -> byDiskCtrlNum
    byte byDiskNum -> byDiskNum
    byte byDVRType -> byDVRType
    byte byChanNum -> byChanNum
    byte byStartChan -> byStartChan
    byte byDecordChans -> byDecordChans
    byte byVGANum -> byVGANum
    byte byUSBNum -> byUSBNum
    byte byAuxoutNum -> byAuxoutNum
    byte byAudioNum -> byAudioNum
    byte byIPChanNum -> byIPChanNum
com.hikvision.netsdk.NET_DVR_DEVICECFG_V40 -> com.hikvision.netsdk.NET_DVR_DEVICECFG_V40:
    byte[] byDevTypeName -> byDevTypeName
com.hikvision.netsdk.NET_DVR_DEVICEINFO_V30 -> com.hikvision.netsdk.NET_DVR_DEVICEINFO_V30:
    byte[] sSerialNumber -> sSerialNumber
    byte byAlarmInPortNum -> byAlarmInPortNum
    byte byAlarmOutPortNum -> byAlarmOutPortNum
    byte byDiskNum -> byDiskNum
    byte byDVRType -> byDVRType
    byte byChanNum -> byChanNum
    byte byStartChan -> byStartChan
    byte byAudioChanNum -> byAudioChanNum
    byte byIPChanNum -> byIPChanNum
    byte byZeroChanNum -> byZeroChanNum
com.hikvision.netsdk.NET_DVR_DISKSTATE -> com.hikvision.netsdk.NET_DVR_DISKSTATE:
    int dwVolume -> dwVolume
    int dwFreeSpace -> dwFreeSpace
    int dwHardDiskStatic -> dwHardDiskStatic
com.hikvision.netsdk.NET_DVR_ETHERNET_V30 -> com.hikvision.netsdk.NET_DVR_ETHERNET_V30:
    com.hikvision.netsdk.NET_DVR_IPADDR struDVRIP -> struDVRIP
    com.hikvision.netsdk.NET_DVR_IPADDR struDVRIPMask -> struDVRIPMask
    int dwNetInterface -> dwNetInterface
    int wDVRPort -> wDVRPort
    int wMTU -> wMTU
    byte[] byMACAddr -> byMACAddr
com.hikvision.netsdk.NET_DVR_FILECOND -> com.hikvision.netsdk.NET_DVR_FILECOND:
    int lChannel -> lChannel
    int dwFileType -> dwFileType
    int dwIsLocked -> dwIsLocked
    int dwUseCardNo -> dwUseCardNo
    byte[] sCardNumber -> sCardNumber
    com.hikvision.netsdk.NET_DVR_TIME struStartTime -> struStartTime
    com.hikvision.netsdk.NET_DVR_TIME struStopTime -> struStopTime
com.hikvision.netsdk.NET_DVR_FINDDATA_V30 -> com.hikvision.netsdk.NET_DVR_FINDDATA_V30:
    byte[] sFileName -> sFileName
    com.hikvision.netsdk.NET_DVR_TIME struStartTime -> struStartTime
    com.hikvision.netsdk.NET_DVR_TIME struStopTime -> struStopTime
    int dwFileSize -> dwFileSize
    byte[] sCardNum -> sCardNum
    byte byLocked -> byLocked
    byte byFileType -> byFileType
    byte[] byRes -> byRes
com.hikvision.netsdk.NET_DVR_HANDLEEXCEPTION_V30 -> com.hikvision.netsdk.NET_DVR_HANDLEEXCEPTION_V30:
    int dwHandleType -> dwHandleType
    byte[] byRelAlarmOut -> byRelAlarmOut
com.hikvision.netsdk.NET_DVR_HIDEALARM_V30 -> com.hikvision.netsdk.NET_DVR_HIDEALARM_V30:
    int dwEnableHideAlarm -> dwEnableHideAlarm
    short wHideAlarmAreaTopLeftX -> wHideAlarmAreaTopLeftX
    short wHideAlarmAreaTopLeftY -> wHideAlarmAreaTopLeftY
    short wHideAlarmAreaWidth -> wHideAlarmAreaWidth
    short wHideAlarmAreaHeight -> wHideAlarmAreaHeight
    com.hikvision.netsdk.NET_DVR_HANDLEEXCEPTION_V30 struHideAlarmHandleType -> struHideAlarmHandleType
    com.hikvision.netsdk.NET_DVR_SCHEDTIME[][] struAlarmTime -> struAlarmTime
com.hikvision.netsdk.NET_DVR_IPADDR -> com.hikvision.netsdk.NET_DVR_IPADDR:
    byte[] sIpV4 -> sIpV4
    byte[] sIpV6 -> sIpV6
com.hikvision.netsdk.NET_DVR_IPALARMOUTCFG -> com.hikvision.netsdk.NET_DVR_IPALARMOUTCFG:
    int dwSize -> dwSize
    com.hikvision.netsdk.NET_DVR_IPALARMOUTINFO[] struIPAlarmOutInfo -> struIPAlarmOutInfo
com.hikvision.netsdk.NET_DVR_IPALARMOUTINFO -> com.hikvision.netsdk.NET_DVR_IPALARMOUTINFO:
    byte byIPID -> byIPID
    byte byAlarmOut -> byAlarmOut
    byte[] byRes -> byRes
com.hikvision.netsdk.NET_DVR_IPCHANINFO -> com.hikvision.netsdk.NET_DVR_IPCHANINFO:
    byte byEnable -> byEnable
    byte byIPID -> byIPID
    byte byChannel -> byChannel
com.hikvision.netsdk.NET_DVR_IPDEVINFO_V31 -> com.hikvision.netsdk.NET_DVR_IPDEVINFO_V31:
    byte byEnable -> byEnable
    byte byProType -> byProType
    byte[] sUserName -> sUserName
    byte[] sPassword -> sPassword
    byte[] byDomain -> byDomain
    com.hikvision.netsdk.NET_DVR_IPADDR struIP -> struIP
    int wDVRPort -> wDVRPort
com.hikvision.netsdk.NET_DVR_IPPARACFG_V31 -> com.hikvision.netsdk.NET_DVR_IPPARACFG_V31:
    com.hikvision.netsdk.NET_DVR_IPDEVINFO_V31[] struIPDevInfo -> struIPDevInfo
    byte[] byAnalogChanEnable -> byAnalogChanEnable
    com.hikvision.netsdk.NET_DVR_IPCHANINFO[] struIPChanInfo -> struIPChanInfo
com.hikvision.netsdk.NET_DVR_IPPARACFG_V40 -> com.hikvision.netsdk.NET_DVR_IPPARACFG_V40:
    int dwGroupNum -> dwGroupNum
    int dwAChanNum -> dwAChanNum
    int dwDChanNum -> dwDChanNum
    int dwStartDChan -> dwStartDChan
    byte[] byAnalogChanEnable -> byAnalogChanEnable
    com.hikvision.netsdk.NET_DVR_IPDEVINFO_V31[] struIPDevInfo -> struIPDevInfo
    com.hikvision.netsdk.NET_DVR_IPCHANINFO[] struIPChanInfo -> struIPChanInfo
com.hikvision.netsdk.NET_DVR_JPEGPARA -> com.hikvision.netsdk.NET_DVR_JPEGPARA:
    short wPicSize -> wPicSize
    short wPicQuality -> wPicQuality
com.hikvision.netsdk.NET_DVR_MOTION_V30 -> com.hikvision.netsdk.NET_DVR_MOTION_V30:
    byte[][] byMotionScope -> byMotionScope
    byte byMotionSensitive -> byMotionSensitive
    byte byEnableHandleMotion -> byEnableHandleMotion
    com.hikvision.netsdk.NET_DVR_HANDLEEXCEPTION_V30 struMotionHandleType -> struMotionHandleType
    com.hikvision.netsdk.NET_DVR_SCHEDTIME[][] struAlarmTime -> struAlarmTime
    byte[] byRelRecordChan -> byRelRecordChan
com.hikvision.netsdk.NET_DVR_NETCFG_V30 -> com.hikvision.netsdk.NET_DVR_NETCFG_V30:
    com.hikvision.netsdk.NET_DVR_ETHERNET_V30[] struEtherNet -> struEtherNet
    com.hikvision.netsdk.NET_DVR_IPADDR struAlarmHostIpAddr -> struAlarmHostIpAddr
    int wAlarmHostIpPort -> wAlarmHostIpPort
    byte byUseDhcp -> byUseDhcp
    com.hikvision.netsdk.NET_DVR_IPADDR struDnsServer1IpAddr -> struDnsServer1IpAddr
    com.hikvision.netsdk.NET_DVR_IPADDR struDnsServer2IpAddr -> struDnsServer2IpAddr
    byte[] byIpResolver -> byIpResolver
    int wIpResolverPort -> wIpResolverPort
    int wHttpPortNo -> wHttpPortNo
    com.hikvision.netsdk.NET_DVR_IPADDR struMulticastIpAddr -> struMulticastIpAddr
    com.hikvision.netsdk.NET_DVR_IPADDR struGatewayIpAddr -> struGatewayIpAddr
    com.hikvision.netsdk.NET_DVR_PPPOECFG struPPPoE -> struPPPoE
com.hikvision.netsdk.NET_DVR_NTPPARA -> com.hikvision.netsdk.NET_DVR_NTPPARA:
    byte[] sNTPServer -> sNTPServer
    short wInterval -> wInterval
    byte byEnableNTP -> byEnableNTP
    char cTimeDifferenceH -> cTimeDifferenceH
    char cTimeDifferenceM -> cTimeDifferenceM
    short wNtpPort -> wNtpPort
com.hikvision.netsdk.NET_DVR_PICCFG_V30 -> com.hikvision.netsdk.NET_DVR_PICCFG_V30:
    byte[] sChanName -> sChanName
    int dwVideoFormat -> dwVideoFormat
    int dwShowChanName -> dwShowChanName
    short wShowNameTopLeftX -> wShowNameTopLeftX
    short wShowNameTopLeftY -> wShowNameTopLeftY
    int dwEnableHide -> dwEnableHide
    int dwShowOsd -> dwShowOsd
    short wOSDTopLeftX -> wOSDTopLeftX
    short wOSDTopLeftY -> wOSDTopLeftY
    byte byOSDType -> byOSDType
    byte byDispWeek -> byDispWeek
    byte byOSDAttrib -> byOSDAttrib
    byte byHourOsdType -> byHourOsdType
    byte byFontSize -> byFontSize
com.hikvision.netsdk.NET_DVR_PLAYBACK_INFO -> com.hikvision.netsdk.NET_DVR_PLAYBACK_INFO:
com.hikvision.netsdk.NET_DVR_POINT_FRAME -> com.hikvision.netsdk.NET_DVR_POINT_FRAME:
    int xTop -> xTop
    int yTop -> yTop
    int xBottom -> xBottom
    int yBottom -> yBottom
    int bCounter -> bCounter
com.hikvision.netsdk.NET_DVR_PPPOECFG -> com.hikvision.netsdk.NET_DVR_PPPOECFG:
    int dwPPPOE -> dwPPPOE
    byte[] sPPPoEUser -> sPPPoEUser
    byte[] sPPPoEPassword -> sPPPoEPassword
    com.hikvision.netsdk.NET_DVR_IPADDR struPPPoEIP -> struPPPoEIP
com.hikvision.netsdk.NET_DVR_PTZCFG -> com.hikvision.netsdk.NET_DVR_PTZCFG:
    int dwPtzNum -> dwPtzNum
    com.hikvision.netsdk.NET_DVR_PTZ_PROTOCOL[] struPtz -> struPtz
com.hikvision.netsdk.NET_DVR_PTZ_PROTOCOL -> com.hikvision.netsdk.NET_DVR_PTZ_PROTOCOL:
    int dwType -> dwType
    byte[] byDescribe -> byDescribe
com.hikvision.netsdk.NET_DVR_RECORDDAY -> com.hikvision.netsdk.NET_DVR_RECORDDAY:
    short wAllDayRecord -> wAllDayRecord
    byte byRecordType -> byRecordType
com.hikvision.netsdk.NET_DVR_RECORDSCHED -> com.hikvision.netsdk.NET_DVR_RECORDSCHED:
    com.hikvision.netsdk.NET_DVR_SCHEDTIME struRecordTime -> struRecordTime
    byte byRecordType -> byRecordType
com.hikvision.netsdk.NET_DVR_RECORD_V30 -> com.hikvision.netsdk.NET_DVR_RECORD_V30:
    int dwRecord -> dwRecord
    com.hikvision.netsdk.NET_DVR_RECORDDAY[] struRecAllDay -> struRecAllDay
    com.hikvision.netsdk.NET_DVR_RECORDSCHED[][] struRecordSched -> struRecordSched
    int dwRecordTime -> dwRecordTime
    int dwPreRecordTime -> dwPreRecordTime
    int dwRecorderDuration -> dwRecorderDuration
    byte byRedundancyRec -> byRedundancyRec
    byte byAudioRec -> byAudioRec
com.hikvision.netsdk.NET_DVR_RESOLVE_DEVICEINFO -> com.hikvision.netsdk.NET_DVR_RESOLVE_DEVICEINFO:
    byte[] sGetIP -> sGetIP
    int dwPort -> dwPort
com.hikvision.netsdk.NET_DVR_SCHEDTIME -> com.hikvision.netsdk.NET_DVR_SCHEDTIME:
    byte byStartHour -> byStartHour
    byte byStartMin -> byStartMin
    byte byStopHour -> byStopHour
    byte byStopMin -> byStopMin
com.hikvision.netsdk.NET_DVR_SDKLOCAL_CFG -> com.hikvision.netsdk.NET_DVR_SDKLOCAL_CFG:
    byte byEnableAbilityParse -> byEnableAbilityParse
com.hikvision.netsdk.NET_DVR_SHELTER -> com.hikvision.netsdk.NET_DVR_SHELTER:
    short wHideAreaTopLeftX -> wHideAreaTopLeftX
    short wHideAreaTopLeftY -> wHideAreaTopLeftY
    short wHideAreaWidth -> wHideAreaWidth
    short wHideAreaHeight -> wHideAreaHeight
com.hikvision.netsdk.NET_DVR_TIME -> com.hikvision.netsdk.NET_DVR_TIME:
    int dwYear -> dwYear
    int dwMonth -> dwMonth
    int dwDay -> dwDay
    int dwHour -> dwHour
    int dwMinute -> dwMinute
    int dwSecond -> dwSecond
    java.lang.String ToString() -> ToString
com.hikvision.netsdk.NET_DVR_VIDEOEFFECT -> com.hikvision.netsdk.NET_DVR_VIDEOEFFECT:
    int iBrightValue -> iBrightValue
    int iContrastValue -> iContrastValue
    int iSaturationValue -> iSaturationValue
    int iHueValue -> iHueValue
com.hikvision.netsdk.NET_DVR_VILOST_V30 -> com.hikvision.netsdk.NET_DVR_VILOST_V30:
    byte byEnableHandleVILost -> byEnableHandleVILost
    com.hikvision.netsdk.NET_DVR_HANDLEEXCEPTION_V30 struVILostHandleType -> struVILostHandleType
    com.hikvision.netsdk.NET_DVR_SCHEDTIME[][] struAlarmTime -> struAlarmTime
com.hikvision.netsdk.NET_DVR_WORKSTATE_V30 -> com.hikvision.netsdk.NET_DVR_WORKSTATE_V30:
    int dwDeviceStatic -> dwDeviceStatic
    com.hikvision.netsdk.NET_DVR_DISKSTATE[] struHardDiskStatic -> struHardDiskStatic
    com.hikvision.netsdk.NET_DVR_CHANNELSTATE_V30[] struChanStatic -> struChanStatic
    byte[] byAlarmInStatic -> byAlarmInStatic
    byte[] byAlarmOutStatic -> byAlarmOutStatic
    int dwLocalDisplay -> dwLocalDisplay
    byte[] byAudioChanStatus -> byAudioChanStatus
com.hikvision.netsdk.NET_DVR_ZEROCHANCFG -> com.hikvision.netsdk.NET_DVR_ZEROCHANCFG:
    byte byEnable -> byEnable
    int dwVideoBitrate -> dwVideoBitrate
    int dwVideoFrameRate -> dwVideoFrameRate
com.hikvision.netsdk.NET_IPC_AUX_ALARMCFG -> com.hikvision.netsdk.NET_IPC_AUX_ALARMCFG:
    com.hikvision.netsdk.NET_IPC_SINGLE_AUX_ALARMCFG[] struAlarm -> struAlarm
com.hikvision.netsdk.NET_IPC_CALLHELP_ALARMCFG -> com.hikvision.netsdk.NET_IPC_CALLHELP_ALARMCFG:
    byte byAlarmHandle -> byAlarmHandle
    com.hikvision.netsdk.NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType -> struAlarmHandleType
    byte[] byRelRecordChan -> byRelRecordChan
com.hikvision.netsdk.NET_IPC_PIR_ALARMCFG -> com.hikvision.netsdk.NET_IPC_PIR_ALARMCFG:
    byte[] byAlarmName -> byAlarmName
    byte byAlarmHandle -> byAlarmHandle
    com.hikvision.netsdk.NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType -> struAlarmHandleType
    byte[] byRelRecordChan -> byRelRecordChan
com.hikvision.netsdk.NET_IPC_SINGLE_AUX_ALARMCFG -> com.hikvision.netsdk.NET_IPC_SINGLE_AUX_ALARMCFG:
    byte byAlarmType -> byAlarmType
    com.hikvision.netsdk.NET_IPC_PIR_ALARMCFG struPIRAlarm -> struPIRAlarm
    com.hikvision.netsdk.NET_IPC_SINGLE_WIRELESS_ALARMCFG[] struWirelessAlarm -> struWirelessAlarm
    com.hikvision.netsdk.NET_IPC_CALLHELP_ALARMCFG struCallHelpAlarm -> struCallHelpAlarm
com.hikvision.netsdk.NET_IPC_SINGLE_WIRELESS_ALARMCFG -> com.hikvision.netsdk.NET_IPC_SINGLE_WIRELESS_ALARMCFG:
    byte[] byAlarmName -> byAlarmName
    byte byAlarmHandle -> byAlarmHandle
    byte byID -> byID
    com.hikvision.netsdk.NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType -> struAlarmHandleType
    byte[] byRelRecordChan -> byRelRecordChan
com.hikvision.netsdk.PTZCommand -> com.hikvision.netsdk.PTZCommand:
    int LIGHT_PWRON -> LIGHT_PWRON
    int WIPER_PWRON -> WIPER_PWRON
    int FAN_PWRON -> FAN_PWRON
    int HEATER_PWRON -> HEATER_PWRON
    int AUX_PWRON1 -> AUX_PWRON1
    int AUX_PWRON2 -> AUX_PWRON2
    int ZOOM_IN -> ZOOM_IN
    int ZOOM_OUT -> ZOOM_OUT
    int FOCUS_NEAR -> FOCUS_NEAR
    int FOCUS_FAR -> FOCUS_FAR
    int IRIS_OPEN -> IRIS_OPEN
    int IRIS_CLOSE -> IRIS_CLOSE
    int TILT_UP -> TILT_UP
    int TILT_DOWN -> TILT_DOWN
    int PAN_LEFT -> PAN_LEFT
    int PAN_RIGHT -> PAN_RIGHT
    int UP_LEFT -> UP_LEFT
    int UP_RIGHT -> UP_RIGHT
    int DOWN_LEFT -> DOWN_LEFT
    int DOWN_RIGHT -> DOWN_RIGHT
    int PAN_AUTO -> PAN_AUTO
com.hikvision.netsdk.PTZCruiseCmd -> com.hikvision.netsdk.PTZCruiseCmd:
    int FILL_PRE_SEQ -> FILL_PRE_SEQ
    int SET_SEQ_DWELL -> SET_SEQ_DWELL
    int SET_SEQ_SPEED -> SET_SEQ_SPEED
    int CLE_PRE_SEQ -> CLE_PRE_SEQ
    int RUN_SEQ -> RUN_SEQ
    int STOP_SEQ -> STOP_SEQ
com.hikvision.netsdk.PTZPresetCmd -> com.hikvision.netsdk.PTZPresetCmd:
    int SET_PRESET -> SET_PRESET
    int CLE_PRESET -> CLE_PRESET
    int GOTO_PRESET -> GOTO_PRESET
com.hikvision.netsdk.PTZTrackCmd -> com.hikvision.netsdk.PTZTrackCmd:
    int STA_MEM_CRUISE -> STA_MEM_CRUISE
    int STO_MEM_CRUISE -> STO_MEM_CRUISE
    int RUN_CRUISE -> RUN_CRUISE
com.hikvision.netsdk.PlaybackCallBack -> com.hikvision.netsdk.PlaybackCallBack:
    void fPlayDataCallBack(int,int,byte[],int) -> fPlayDataCallBack
com.hikvision.netsdk.PlaybackControlCommand -> com.hikvision.netsdk.PlaybackControlCommand:
    int NET_DVR_PLAYSTART -> NET_DVR_PLAYSTART
    int NET_DVR_PLAYSTOP -> NET_DVR_PLAYSTOP
    int NET_DVR_PLAYPAUSE -> NET_DVR_PLAYPAUSE
    int NET_DVR_PLAYRESTART -> NET_DVR_PLAYRESTART
    int NET_DVR_PLAYFAST -> NET_DVR_PLAYFAST
    int NET_DVR_PLAYSLOW -> NET_DVR_PLAYSLOW
    int NET_DVR_PLAYNORMAL -> NET_DVR_PLAYNORMAL
    int NET_DVR_PLAYSTARTAUDIO -> NET_DVR_PLAYSTARTAUDIO
    int NET_DVR_PLAYSTOPAUDIO -> NET_DVR_PLAYSTOPAUDIO
    int NET_DVR_PLAYSETPOS -> NET_DVR_PLAYSETPOS
com.hikvision.netsdk.RealPlayCallBack -> com.hikvision.netsdk.RealPlayCallBack:
    void fRealDataCallBack(int,int,byte[],int) -> fRealDataCallBack
com.hikvision.netsdk.SDKError -> com.hikvision.netsdk.SDKError:
    int NET_DVR_NOERROR -> NET_DVR_NOERROR
    int NET_DVR_PASSWORD_ERROR -> NET_DVR_PASSWORD_ERROR
    int NET_DVR_NOENOUGHPRI -> NET_DVR_NOENOUGHPRI
    int NET_DVR_NOINIT -> NET_DVR_NOINIT
    int NET_DVR_CHANNEL_ERROR -> NET_DVR_CHANNEL_ERROR
    int NET_DVR_OVER_MAXLINK -> NET_DVR_OVER_MAXLINK
    int NET_DVR_VERSIONNOMATCH -> NET_DVR_VERSIONNOMATCH
    int NET_DVR_NETWORK_FAIL_CONNECT -> NET_DVR_NETWORK_FAIL_CONNECT
    int NET_DVR_NETWORK_SEND_ERROR -> NET_DVR_NETWORK_SEND_ERROR
    int NET_DVR_NETWORK_RECV_ERROR -> NET_DVR_NETWORK_RECV_ERROR
    int NET_DVR_NETWORK_RECV_TIMEOUT -> NET_DVR_NETWORK_RECV_TIMEOUT
    int NET_DVR_NETWORK_ERRORDATA -> NET_DVR_NETWORK_ERRORDATA
    int NET_DVR_ORDER_ERROR -> NET_DVR_ORDER_ERROR
    int NET_DVR_OPERNOPERMIT -> NET_DVR_OPERNOPERMIT
    int NET_DVR_COMMANDTIMEOUT -> NET_DVR_COMMANDTIMEOUT
    int NET_DVR_ERRORSERIALPORT -> NET_DVR_ERRORSERIALPORT
    int NET_DVR_ERRORALARMPORT -> NET_DVR_ERRORALARMPORT
    int NET_DVR_PARAMETER_ERROR -> NET_DVR_PARAMETER_ERROR
    int NET_DVR_CHAN_EXCEPTION -> NET_DVR_CHAN_EXCEPTION
    int NET_DVR_NODISK -> NET_DVR_NODISK
    int NET_DVR_ERRORDISKNUM -> NET_DVR_ERRORDISKNUM
    int NET_DVR_DISK_FULL -> NET_DVR_DISK_FULL
    int NET_DVR_DISK_ERROR -> NET_DVR_DISK_ERROR
    int NET_DVR_NOSUPPORT -> NET_DVR_NOSUPPORT
    int NET_DVR_BUSY -> NET_DVR_BUSY
    int NET_DVR_MODIFY_FAIL -> NET_DVR_MODIFY_FAIL
    int NET_DVR_PASSWORD_FORMAT_ERROR -> NET_DVR_PASSWORD_FORMAT_ERROR
    int NET_DVR_DISK_FORMATING -> NET_DVR_DISK_FORMATING
    int NET_DVR_DVRNORESOURCE -> NET_DVR_DVRNORESOURCE
    int NET_DVR_DVROPRATEFAILED -> NET_DVR_DVROPRATEFAILED
    int NET_DVR_OPENHOSTSOUND_FAIL -> NET_DVR_OPENHOSTSOUND_FAIL
    int NET_DVR_DVRVOICEOPENED -> NET_DVR_DVRVOICEOPENED
    int NET_DVR_TIMEINPUTERROR -> NET_DVR_TIMEINPUTERROR
    int NET_DVR_NOSPECFILE -> NET_DVR_NOSPECFILE
    int NET_DVR_CREATEFILE_ERROR -> NET_DVR_CREATEFILE_ERROR
    int NET_DVR_FILEOPENFAIL -> NET_DVR_FILEOPENFAIL
    int NET_DVR_OPERNOTFINISH -> NET_DVR_OPERNOTFINISH
    int NET_DVR_GETPLAYTIMEFAIL -> NET_DVR_GETPLAYTIMEFAIL
    int NET_DVR_PLAYFAIL -> NET_DVR_PLAYFAIL
    int NET_DVR_FILEFORMAT_ERROR -> NET_DVR_FILEFORMAT_ERROR
    int NET_DVR_DIR_ERROR -> NET_DVR_DIR_ERROR
    int NET_DVR_ALLOC_RESOURCE_ERROR -> NET_DVR_ALLOC_RESOURCE_ERROR
    int NET_DVR_AUDIO_MODE_ERROR -> NET_DVR_AUDIO_MODE_ERROR
    int NET_DVR_NOENOUGH_BUF -> NET_DVR_NOENOUGH_BUF
    int NET_DVR_CREATESOCKET_ERROR -> NET_DVR_CREATESOCKET_ERROR
    int NET_DVR_SETSOCKET_ERROR -> NET_DVR_SETSOCKET_ERROR
    int NET_DVR_MAX_NUM -> NET_DVR_MAX_NUM
    int NET_DVR_USERNOTEXIST -> NET_DVR_USERNOTEXIST
    int NET_DVR_WRITEFLASHERROR -> NET_DVR_WRITEFLASHERROR
    int NET_DVR_UPGRADEFAIL -> NET_DVR_UPGRADEFAIL
    int NET_DVR_CARDHAVEINIT -> NET_DVR_CARDHAVEINIT
    int NET_DVR_PLAYERFAILED -> NET_DVR_PLAYERFAILED
    int NET_DVR_MAX_USERNUM -> NET_DVR_MAX_USERNUM
    int NET_DVR_GETLOCALIPANDMACFAIL -> NET_DVR_GETLOCALIPANDMACFAIL
    int NET_DVR_NOENCODEING -> NET_DVR_NOENCODEING
    int NET_DVR_IPMISMATCH -> NET_DVR_IPMISMATCH
    int NET_DVR_MACMISMATCH -> NET_DVR_MACMISMATCH
    int NET_DVR_UPGRADELANGMISMATCH -> NET_DVR_UPGRADELANGMISMATCH
    int NET_DVR_MAX_PLAYERPORT -> NET_DVR_MAX_PLAYERPORT
    int NET_DVR_NOSPACEBACKUP -> NET_DVR_NOSPACEBACKUP
    int NET_DVR_NODEVICEBACKUP -> NET_DVR_NODEVICEBACKUP
    int NET_DVR_PICTURE_BITS_ERROR -> NET_DVR_PICTURE_BITS_ERROR
    int NET_DVR_PICTURE_DIMENSION_ERROR -> NET_DVR_PICTURE_DIMENSION_ERROR
    int NET_DVR_PICTURE_SIZ_ERROR -> NET_DVR_PICTURE_SIZ_ERROR
    int NET_DVR_LOADPLAYERSDKFAILED -> NET_DVR_LOADPLAYERSDKFAILED
    int NET_DVR_LOADPLAYERSDKPROC_ERROR -> NET_DVR_LOADPLAYERSDKPROC_ERROR
    int NET_DVR_LOADDSSDKFAILED -> NET_DVR_LOADDSSDKFAILED
    int NET_DVR_LOADDSSDKPROC_ERROR -> NET_DVR_LOADDSSDKPROC_ERROR
    int NET_DVR_DSSDK_ERROR -> NET_DVR_DSSDK_ERROR
    int NET_DVR_VOICEMONOPOLIZE -> NET_DVR_VOICEMONOPOLIZE
    int NET_DVR_JOINMULTICASTFAILED -> NET_DVR_JOINMULTICASTFAILED
    int NET_DVR_CREATEDIR_ERROR -> NET_DVR_CREATEDIR_ERROR
    int NET_DVR_BINDSOCKET_ERROR -> NET_DVR_BINDSOCKET_ERROR
    int NET_DVR_SOCKETCLOSE_ERROR -> NET_DVR_SOCKETCLOSE_ERROR
    int NET_DVR_USERID_ISUSING -> NET_DVR_USERID_ISUSING
    int NET_DVR_SOCKETLISTEN_ERROR -> NET_DVR_SOCKETLISTEN_ERROR
    int NET_DVR_PROGRAM_EXCEPTION -> NET_DVR_PROGRAM_EXCEPTION
    int NET_DVR_WRITEFILE_FAILED -> NET_DVR_WRITEFILE_FAILED
    int NET_DVR_FORMAT_READONLY -> NET_DVR_FORMAT_READONLY
    int NET_DVR_WITHSAMEUSERNAME -> NET_DVR_WITHSAMEUSERNAME
    int NET_DVR_DEVICETYPE_ERROR -> NET_DVR_DEVICETYPE_ERROR
    int NET_DVR_LANGUAGE_ERROR -> NET_DVR_LANGUAGE_ERROR
    int NET_DVR_PARAVERSION_ERROR -> NET_DVR_PARAVERSION_ERROR
    int NET_DVR_IPCHAN_NOTALIVE -> NET_DVR_IPCHAN_NOTALIVE
    int NET_DVR_RTSP_SDK_ERROR -> NET_DVR_RTSP_SDK_ERROR
    int NET_DVR_CONVERT_SDK_ERROR -> NET_DVR_CONVERT_SDK_ERROR
    int NET_DVR_IPC_COUNT_OVERFLOW -> NET_DVR_IPC_COUNT_OVERFLOW
    int NET_DVR_MAX_ADD_NUM -> NET_DVR_MAX_ADD_NUM
    int NET_DVR_PARAMMODE_ERROR -> NET_DVR_PARAMMODE_ERROR
    int NET_DVR_CODESPITTER_OFFLINE -> NET_DVR_CODESPITTER_OFFLINE
    int NET_DVR_BACKUP_COPYING -> NET_DVR_BACKUP_COPYING
    int NET_DVR_CHAN_NOTSUPPORT -> NET_DVR_CHAN_NOTSUPPORT
    int NET_DVR_CALLINEINVALID -> NET_DVR_CALLINEINVALID
    int NET_DVR_CALCANCELCONFLICT -> NET_DVR_CALCANCELCONFLICT
    int NET_DVR_CALPOINTOUTRANGE -> NET_DVR_CALPOINTOUTRANGE
    int NET_DVR_FILTERRECTINVALID -> NET_DVR_FILTERRECTINVALID
    int NET_DVR_DDNS_DEVOFFLINE -> NET_DVR_DDNS_DEVOFFLINE
    int NET_DVR_DDNS_INTER_ERROR -> NET_DVR_DDNS_INTER_ERROR
    int NET_DVR_FUNCTION_NOT_SUPPORT_OS -> NET_DVR_FUNCTION_NOT_SUPPORT_OS
    int NET_DVR_ALIAS_DUPLICATE -> NET_DVR_ALIAS_DUPLICATE
com.hikvision.netsdk.SerialDataCallBack -> com.hikvision.netsdk.SerialDataCallBack:
    void fSerialDataCallBack(int,byte[],int) -> fSerialDataCallBack
com.hikvision.netsdk.VoiceDataCallBack -> com.hikvision.netsdk.VoiceDataCallBack:
    void fVoiceDataCallBack(int,byte[],int,int) -> fVoiceDataCallBack
com.mm.android.avnetsdk.AVNetSDK -> com.mm.android.avnetsdk.a:
    int AV_Invalid_Handle -> a
    int AV_Illegal_Param -> b
    int AV_Unsupport_Error -> c
    int AV_Init_Error -> d
    int AV_Unit_Error -> e
    int AV_Network_Error -> f
    int AV_Connect_Error -> g
    int AV_NET_WAIT_TIMEOUT -> h
    int AV_NO_Record -> i
    int AV_NO_PERMISSION -> j
    int AV_CAN_NOT_SET_NOW -> k
    int AV_DEV_DISCONNECT -> l
    int AV_DEV_HAVE_LOGOUT -> m
    int AV_ALARM_OUT_NULL -> n
    int AV_ALARM_NOT_SUPPORT -> o
    int AV_ReturnData_Error -> p
    int AV_GetSession_Error -> q
    int AV_OUT_OF_MEMORY -> r
    int AV_EC(int) -> a
    boolean AV_Startup(java.lang.String) -> a
    void AV_Cleanup() -> a
    com.mm.android.avnetsdk.param.AV_HANDLE AV_Login(com.mm.android.avnetsdk.param.AV_IN_Login,com.mm.android.avnetsdk.param.AV_OUT_Login) -> a
    void AV_Logout(com.mm.android.avnetsdk.param.AV_HANDLE) -> a
    int AV_GetLastError() -> b
    com.mm.android.avnetsdk.param.AV_HANDLE AV_RealPlay(com.mm.android.avnetsdk.param.AV_HANDLE,com.mm.android.avnetsdk.param.AV_IN_RealPlay,com.mm.android.avnetsdk.param.AV_OUT_RealPlay) -> a
    boolean AV_StopRealPlay(com.mm.android.avnetsdk.param.AV_HANDLE) -> b
    boolean AV_QuerrySystemInfo(com.mm.android.avnetsdk.param.AV_HANDLE,com.mm.android.avnetsdk.param.AV_IN_SysInfo,com.mm.android.avnetsdk.param.AV_OUT_SysInfo) -> a
    boolean AV_GetDeviceConfig(com.mm.android.avnetsdk.param.AV_HANDLE,com.mm.android.avnetsdk.param.AV_IN_Config,com.mm.android.avnetsdk.param.AV_OUT_Config) -> a
com.mm.android.avnetsdk.CManager -> com.mm.android.avnetsdk.b:
    boolean m_bInit -> a
    com.mm.android.avnetsdk.CManager m_instance -> b
    java.util.HashMap m_lastErrorMap -> c
    boolean m_bExit -> d
    java.lang.Thread m_driveThread -> e
    com.mm.android.avnetsdk.module.realplay.CRealPlayFuncMdl m_realplayMdl -> f
    com.mm.android.avnetsdk.module.playback.CPlayBackFuncMdl m_playbackMdl -> g
    com.mm.android.avnetsdk.module.talk.CTalkFuncMdl m_talkMdl -> h
    com.mm.android.avnetsdk.module.device.CDeviceFuncMdl m_deviceMdl -> i
    com.mm.android.avnetsdk.module.config.CConfigFuncMdl m_configMdl -> j
    com.mm.android.avnetsdk.module.control.CControlFuncMdl m_ctrlMdl -> k
    com.mm.android.avnetsdk.module.push.CPushFuncMdl m_pushMdl -> l
    com.mm.android.avnetsdk.module.sysinfo.CSysInfoMdl m_sysInfoMdl -> m
    com.mm.android.avnetsdk.module.userinfo.CUserInfoFuncMdl m_userInfoMdl -> n
    com.mm.android.avnetsdk.module.iocontrol.CIOControlFuncMdl m_ioConMdl -> o
    com.mm.android.avnetsdk.module.alarmSubscibe.CAlarmSubscibeFuncMdl m_alarmMdl -> p
    com.mm.android.avnetsdk.module.capturePicture.CCaptureFuncMdl m_captureMdl -> q
    com.mm.android.avnetsdk.LogicControler logicControler -> r
    com.mm.android.avnetsdk.module.devicesearch.CDeviceSearchMdl m_deviceSearchMdl -> s
    com.mm.android.avnetsdk.module.sysOperation.CsysOperationFuncMdl m_sysCsysOperationFuncMdl -> t
    com.mm.android.avnetsdk.param.AV_IN_NetParam m_netParam -> u
    com.mm.android.avnetsdk.CManager instance() -> a
    boolean getInit() -> b
    boolean startup() -> c
    void cleanup() -> d
    void setLastError(int) -> a
    int getLastError() -> e
    com.mm.android.avnetsdk.module.realplay.CRealPlayFuncMdl getReaplayMdl() -> f
    com.mm.android.avnetsdk.module.device.CDeviceFuncMdl getDeviceMdl() -> g
    com.mm.android.avnetsdk.module.config.CConfigFuncMdl getConfigMdl() -> h
    com.mm.android.avnetsdk.module.sysinfo.CSysInfoMdl getSysInfoMdl() -> i
    com.mm.android.avnetsdk.param.AV_IN_NetParam getNetWorkParam() -> j
    com.mm.android.avnetsdk.LogicControler getLogicControler() -> k
    void run() -> run
com.mm.android.avnetsdk.LogicControler -> com.mm.android.avnetsdk.c:
    java.lang.String oemString -> a
    boolean isSkipCheckPirate -> b
com.mm.android.avnetsdk.module.CFuncMdl -> com.mm.android.avnetsdk.a.a:
    int pushOperate(com.mm.android.avnetsdk.module.device.CDevice,com.mm.android.avnetsdk.operate.COperate,int) -> a
com.mm.android.avnetsdk.module.alarmSubscibe.CAlarmSubscibeFuncMdl -> com.mm.android.avnetsdk.a.a.a:
com.mm.android.avnetsdk.module.alarmSubscibe.CGpsSubscibe -> com.mm.android.avnetsdk.a.a.b:
    com.mm.android.avnetsdk.param.IAV_GPSListener mGpsListener -> a
    com.mm.android.avnetsdk.module.device.CDevice mDevice -> b
    int onData(byte[],int,int) -> a
com.mm.android.avnetsdk.module.capturePicture.CCapture -> com.mm.android.avnetsdk.a.b.a:
    com.mm.android.avnetsdk.param.IAV_CaptureDataListener mListener -> a
    byte[] mData -> b
    int mPos -> c
    void onData(byte[],int) -> a
com.mm.android.avnetsdk.module.capturePicture.CCaptureFuncMdl -> com.mm.android.avnetsdk.a.b.b:
com.mm.android.avnetsdk.module.config.CChannelNameConfig -> com.mm.android.avnetsdk.a.c.a:
    boolean getConfig(com.mm.android.avnetsdk.module.device.CDevice,com.mm.android.avnetsdk.param.AV_IN_Config,com.mm.android.avnetsdk.param.AV_OUT_Config) -> a
com.mm.android.avnetsdk.module.config.CConfigFuncMdl -> com.mm.android.avnetsdk.a.c.b:
    int m_ChnNameProtocolVer -> a
    int[] $SWITCH_TABLE$com$mm$android$avnetsdk$param$E_ConfigType -> b
    boolean SetupSession(com.mm.android.avnetsdk.module.device.CDevice,int,com.mm.android.avnetsdk.param.Afk_connect_param_t) -> a
    boolean AV_GetDeviceConfig(com.mm.android.avnetsdk.param.AV_HANDLE,com.mm.android.avnetsdk.param.AV_IN_Config,com.mm.android.avnetsdk.param.AV_OUT_Config) -> a
    com.mm.android.avnetsdk.module.config.IConfig getConfigObj(com.mm.android.avnetsdk.param.E_ConfigType) -> a
    int[] $SWITCH_TABLE$com$mm$android$avnetsdk$param$E_ConfigType() -> a
com.mm.android.avnetsdk.module.config.CMediaAbility -> com.mm.android.avnetsdk.a.c.c:
    boolean getConfig(com.mm.android.avnetsdk.module.device.CDevice,com.mm.android.avnetsdk.param.AV_IN_Config,com.mm.android.avnetsdk.param.AV_OUT_Config) -> a
com.mm.android.avnetsdk.module.config.CNormalConfig -> com.mm.android.avnetsdk.a.c.d:
    boolean getConfig(com.mm.android.avnetsdk.module.device.CDevice,com.mm.android.avnetsdk.param.AV_IN_Config,com.mm.android.avnetsdk.param.AV_OUT_Config) -> a
com.mm.android.avnetsdk.module.config.CSMSConfig -> com.mm.android.avnetsdk.a.c.e:
    boolean getConfig(com.mm.android.avnetsdk.module.device.CDevice,com.mm.android.avnetsdk.param.AV_IN_Config,com.mm.android.avnetsdk.param.AV_OUT_Config) -> a
com.mm.android.avnetsdk.module.config.IConfig -> com.mm.android.avnetsdk.a.c.f:
    boolean getConfig(com.mm.android.avnetsdk.module.device.CDevice,com.mm.android.avnetsdk.param.AV_IN_Config,com.mm.android.avnetsdk.param.AV_OUT_Config) -> a
com.mm.android.avnetsdk.module.config.SysConfig -> com.mm.android.avnetsdk.a.c.g:
    boolean getConfig(com.mm.android.avnetsdk.module.device.CDevice,com.mm.android.avnetsdk.param.AV_IN_Config,com.mm.android.avnetsdk.param.AV_OUT_Config) -> a
com.mm.android.avnetsdk.module.control.CControlFuncMdl -> com.mm.android.avnetsdk.a.d.a:
com.mm.android.avnetsdk.module.device.CDevice -> com.mm.android.avnetsdk.a.e.a:
    com.mm.android.avnetsdk.module.device.CTcpSocket m_mainTcpSocket -> a
    java.util.Map m_subTcpSockets -> b
    com.mm.android.avnetsdk.module.device.COperateData m_operateData -> c
    java.lang.String m_strUsername -> d
    java.lang.String m_strPassword -> e
    java.lang.String m_strDevIp -> f
    int m_nPort -> g
    com.mm.android.avnetsdk.protocolstack.Afk_dvrdevice_info m_devInfo -> h
    int m_chnNameProVer -> i
    com.mm.android.avnetsdk.param.ConnectStatusListener m_connectStatusListener -> j
    boolean m_bDisConnect -> k
    boolean m_bSupportSub -> l
    int m_nRecordProto -> m
    void setConnectStatusListener(com.mm.android.avnetsdk.param.ConnectStatusListener) -> a
    boolean isDisConnect() -> a
    void onDisConnect() -> b
    com.mm.android.avnetsdk.module.device.COperateData getOperateData() -> c
    void clean() -> d
    int pushOperate(com.mm.android.avnetsdk.operate.COperate,int) -> a
    int pushOperate(com.mm.android.avnetsdk.operate.COperate) -> a
    int pushAsSequenceOperate(com.mm.android.avnetsdk.protocolstack.IPDU,com.mm.android.avnetsdk.protocolstack.IPDU,int,int) -> a
    com.mm.android.avnetsdk.module.device.CTcpSocket getMainSocket() -> e
    void addSubTcpSocket(int,com.mm.android.avnetsdk.module.device.CTcpSocket) -> a
    void removeSubTcpSocket(int) -> a
    com.mm.android.avnetsdk.module.device.CTcpSocket getSubTcpSocket(int) -> b
    void cleanSubTcpSockets() -> f
    void updateDeviceInfo(com.mm.android.avnetsdk.protocolstack.Afk_dvrdevice_info,java.lang.String,int,java.lang.String,java.lang.String) -> a
    java.lang.String getDevIp() -> g
    int getDevPort() -> h
    void setChnCfgProVersion(int) -> c
    com.mm.android.avnetsdk.protocolstack.Afk_dvrdevice_info getDevInfo() -> i
    void heartbeat() -> j
    void setSupportSub(boolean) -> a
    boolean getSupportSub() -> k
com.mm.android.avnetsdk.module.device.CDeviceFuncMdl -> com.mm.android.avnetsdk.a.e.b:
    java.util.List m_allDevice -> a
    com.mm.android.avnetsdk.param.AV_HANDLE login(com.mm.android.avnetsdk.param.AV_IN_Login,com.mm.android.avnetsdk.param.AV_OUT_Login) -> a
    int CheckPirate(com.mm.android.avnetsdk.module.device.CDevice,com.mm.android.avnetsdk.protocolstack.Afk_dvrdevice_info,java.lang.String) -> a
    java.lang.String GetDevConfig_EthernetCfg(com.mm.android.avnetsdk.param.AV_HANDLE) -> c
    java.lang.String getMacParser(java.lang.String) -> a
    void logout(com.mm.android.avnetsdk.param.AV_HANDLE) -> a
    boolean createOneSubConnect(com.mm.android.avnetsdk.module.device.CDevice,com.mm.android.avnetsdk.param.Afk_connect_param_t,int,boolean) -> a
    void addDeviceToList(com.mm.android.avnetsdk.module.device.CDevice) -> a
    void removeDeviceFromList(com.mm.android.avnetsdk.module.device.CDevice) -> b
    boolean containDevice(com.mm.android.avnetsdk.param.AV_HANDLE) -> b
    void allHeartBeat() -> a
com.mm.android.avnetsdk.module.device.COperateData -> com.mm.android.avnetsdk.a.e.c:
    java.util.Map m_mapCmdOp -> a
    java.util.Map m_mapSequenceOp -> b
    java.util.Map m_mapRealPlay -> c
    java.util.Map m_mapPlayBack -> d
    java.util.Map m_mapCapture -> e
    com.mm.android.avnetsdk.module.talk.CTalk m_talk -> f
    com.mm.android.avnetsdk.module.alarmSubscibe.CGpsSubscibe m_gps -> g
    int[] $SWITCH_TABLE$com$mm$android$avnetsdk$operate$OpType -> h
    void addOperate(com.mm.android.avnetsdk.operate.COperate) -> a
    void processPacket(byte[],int,int) -> a
    void addRealplay(com.mm.android.avnetsdk.module.realplay.CRealPlay) -> a
    void removeRealplay(com.mm.android.avnetsdk.module.realplay.CRealPlay) -> b
    void onDisConnect() -> a
    int[] $SWITCH_TABLE$com$mm$android$avnetsdk$operate$OpType() -> b
com.mm.android.avnetsdk.module.device.CTcpSocket -> com.mm.android.avnetsdk.a.e.d:
    com.mm.android.avnetsdk.module.device.COperateData m_operateData -> k
    com.mm.android.avnetsdk.utilty.Event m_registerEvent -> a
    byte[] m_registerAck -> b
    int m_nRegisterLen -> c
    int m_connectID -> d
    com.mm.android.avnetsdk.module.device.CDevice m_device -> e
    void setDevice(com.mm.android.avnetsdk.module.device.CDevice) -> a
    void setOperateData(com.mm.android.avnetsdk.module.device.COperateData) -> a
    int onData(int,byte[],int) -> a
    void dealSpecialPacket(byte[],int,int) -> a
    int onSendDataAck(int,int) -> a
    int onDisconnect(int) -> a
    int onReconnect(int) -> b
    com.mm.android.avnetsdk.module.device.CTcpSocket connectWithRetry(java.lang.String,int,int,int) -> a
com.mm.android.avnetsdk.module.devicesearch.CDeviceSearchMdl -> com.mm.android.avnetsdk.a.f.a:
    com.mm.android.avnetsdk.param.SearchLanDeviceListener m_searchLanDevListener -> a
    com.mm.android.tplayer.MulticastClient m_muticastClient -> b
    boolean m_isSearching -> c
    java.util.Map m_operators -> d
    int onData(byte[],int) -> a
com.mm.android.avnetsdk.module.iocontrol.CIOControlFuncMdl -> com.mm.android.avnetsdk.a.g.a:
com.mm.android.avnetsdk.module.playback.CFileDownload -> com.mm.android.avnetsdk.a.h.a:
    int m_nChannelID -> a
    com.mm.android.avnetsdk.module.device.CDevice m_device -> b
    com.mm.android.avnetsdk.param.RecordFileInfo m_recordInfo -> c
    int mProtocalVer -> d
    int mConnectId -> e
    boolean startDownload(boolean) -> a
    boolean stopDownload() -> a
com.mm.android.avnetsdk.module.playback.CPlayBack -> com.mm.android.avnetsdk.a.h.b:
    com.mm.android.avnetsdk.module.device.CDevice m_device -> a
    com.mm.android.avnetsdk.param.AV_IN_PlayBackByTime m_playbackParam -> b
    int m_nChannelID -> c
    int m_nConnectID -> d
    com.mm.android.avnetsdk.module.playback.PlayerState m_playerState -> e
    com.mm.android.avplaysdk.IPlayHandle m_hPlayHandle -> f
    com.mm.android.avnetsdk.param.RecordFileInfo m_curFileInfo -> g
    java.util.List m_lstFileInfo -> h
    java.io.FileOutputStream m_output -> i
    java.lang.String m_filePath -> j
    boolean m_bOneFile -> k
    boolean m_bAllDown -> l
    long mSendTimeMillis -> m
    boolean pausePlayback(boolean,boolean) -> a
    boolean createFilePath(java.io.File,java.lang.String) -> a
    boolean startDownloadFile(com.mm.android.avnetsdk.param.RecordFileInfo) -> a
    boolean stopDownloadFile() -> a
    int onData(byte[],int) -> a
    void OnEvent(int,java.lang.Object) -> a
    void notifyInputData(int) -> a
    void onDisConnect() -> b
com.mm.android.avnetsdk.module.playback.CPlayBackFuncMdl -> com.mm.android.avnetsdk.a.h.c:
com.mm.android.avnetsdk.module.playback.PlayerState -> com.mm.android.avnetsdk.a.h.d:
    com.mm.android.avnetsdk.module.playback.PlayerState Playing -> a
    com.mm.android.avnetsdk.module.playback.PlayerState Pause -> b
    com.mm.android.avnetsdk.module.playback.PlayerState Buffering -> c
    com.mm.android.avnetsdk.module.playback.PlayerState Stop -> d
    com.mm.android.avnetsdk.module.playback.PlayerState[] ENUM$VALUES -> e
    com.mm.android.avnetsdk.module.playback.PlayerState[] values() -> values
    com.mm.android.avnetsdk.module.playback.PlayerState valueOf(java.lang.String) -> valueOf
com.mm.android.avnetsdk.module.push.CPushFuncMdl -> com.mm.android.avnetsdk.a.i.a:
com.mm.android.avnetsdk.module.realplay.CRealPlay -> com.mm.android.avnetsdk.a.j.a:
    com.mm.android.avnetsdk.module.device.CDevice m_device -> a
    int m_nChannelID -> b
    int m_nConnectID -> c
    com.mm.android.avnetsdk.param.AV_IN_RealPlay m_realplayInParam -> d
    com.mm.android.avplaysdk.IPlayHandle m_hPlayHandle -> e
    com.mm.android.avnetsdk.module.playback.PlayerState m_playerState -> f
    java.io.FileOutputStream m_output -> g
    int getChannelID() -> a
    boolean startRealPlay(com.mm.android.avnetsdk.param.AV_IN_RealPlay,com.mm.android.avnetsdk.param.AV_OUT_RealPlay) -> a
    boolean stopRealPlay() -> b
    boolean stopRecord() -> c
    com.mm.android.avnetsdk.protocolstack.IPDU createMediaRequestPDU(com.mm.android.avnetsdk.module.device.CDevice,com.mm.android.avnetsdk.param.AV_IN_RealPlay,boolean) -> a
    int onData(byte[],int) -> a
    void onDisConnect() -> d
com.mm.android.avnetsdk.module.realplay.CRealPlayFuncMdl -> com.mm.android.avnetsdk.a.j.b:
    com.mm.android.avnetsdk.param.AV_HANDLE startRealPlay(com.mm.android.avnetsdk.param.AV_HANDLE,com.mm.android.avnetsdk.param.AV_IN_RealPlay,com.mm.android.avnetsdk.param.AV_OUT_RealPlay) -> a
    boolean stopRealPlay(com.mm.android.avnetsdk.param.AV_HANDLE) -> a
com.mm.android.avnetsdk.module.sysOperation.CsysOperationFuncMdl -> com.mm.android.avnetsdk.a.k.a:
com.mm.android.avnetsdk.module.sysinfo.CSysInfoMdl -> com.mm.android.avnetsdk.a.l.a:
    boolean getSystemInfo(com.mm.android.avnetsdk.param.AV_HANDLE,com.mm.android.avnetsdk.param.AV_IN_SysInfo,com.mm.android.avnetsdk.param.AV_OUT_SysInfo) -> a
    com.mm.android.avnetsdk.operate.OpType getCorrespondingOpType(int,int,java.lang.Object) -> a
    com.mm.android.avnetsdk.module.sysinfo.IInfoProcessor getCorrespondingInfoProcessor(int,int,java.lang.Object) -> b
    com.mm.android.avnetsdk.protocolstack.IPDU getCorrespondingResponsePDU(int,int,java.lang.Object) -> c
com.mm.android.avnetsdk.module.sysinfo.DeviceAttrProcessor -> com.mm.android.avnetsdk.a.l.b:
    boolean processPDU(com.mm.android.avnetsdk.protocolstack.IPDU,com.mm.android.avnetsdk.param.AV_IN_SysInfo,com.mm.android.avnetsdk.param.AV_OUT_SysInfo) -> a
com.mm.android.avnetsdk.module.sysinfo.DeviceDiskStateProcessor -> com.mm.android.avnetsdk.a.l.c:
    boolean processPDU(com.mm.android.avnetsdk.protocolstack.IPDU,com.mm.android.avnetsdk.param.AV_IN_SysInfo,com.mm.android.avnetsdk.param.AV_OUT_SysInfo) -> a
com.mm.android.avnetsdk.module.sysinfo.DeviceFunListProcessor -> com.mm.android.avnetsdk.a.l.d:
    boolean processPDU(com.mm.android.avnetsdk.protocolstack.IPDU,com.mm.android.avnetsdk.param.AV_IN_SysInfo,com.mm.android.avnetsdk.param.AV_OUT_SysInfo) -> a
com.mm.android.avnetsdk.module.sysinfo.DeviceIDProcessor -> com.mm.android.avnetsdk.a.l.e:
    boolean processPDU(com.mm.android.avnetsdk.protocolstack.IPDU,com.mm.android.avnetsdk.param.AV_IN_SysInfo,com.mm.android.avnetsdk.param.AV_OUT_SysInfo) -> a
com.mm.android.avnetsdk.module.sysinfo.DeviceVersionProcessor -> com.mm.android.avnetsdk.a.l.f:
    boolean processPDU(com.mm.android.avnetsdk.protocolstack.IPDU,com.mm.android.avnetsdk.param.AV_IN_SysInfo,com.mm.android.avnetsdk.param.AV_OUT_SysInfo) -> a
com.mm.android.avnetsdk.module.sysinfo.FrontCaptureProcessor -> com.mm.android.avnetsdk.a.l.g:
    boolean processPDU(com.mm.android.avnetsdk.protocolstack.IPDU,com.mm.android.avnetsdk.param.AV_IN_SysInfo,com.mm.android.avnetsdk.param.AV_OUT_SysInfo) -> a
com.mm.android.avnetsdk.module.sysinfo.IInfoProcessor -> com.mm.android.avnetsdk.a.l.h:
    boolean processPDU(com.mm.android.avnetsdk.protocolstack.IPDU,com.mm.android.avnetsdk.param.AV_IN_SysInfo,com.mm.android.avnetsdk.param.AV_OUT_SysInfo) -> a
com.mm.android.avnetsdk.module.sysinfo.RecordEnableProcessor -> com.mm.android.avnetsdk.a.l.i:
    boolean processPDU(com.mm.android.avnetsdk.protocolstack.IPDU,com.mm.android.avnetsdk.param.AV_IN_SysInfo,com.mm.android.avnetsdk.param.AV_OUT_SysInfo) -> a
com.mm.android.avnetsdk.module.sysinfo.TalkPropertyProcessor -> com.mm.android.avnetsdk.a.l.j:
    boolean processPDU(com.mm.android.avnetsdk.protocolstack.IPDU,com.mm.android.avnetsdk.param.AV_IN_SysInfo,com.mm.android.avnetsdk.param.AV_OUT_SysInfo) -> a
com.mm.android.avnetsdk.module.sysinfo.VideoPropertyProcessor -> com.mm.android.avnetsdk.a.l.k:
    boolean processPDU(com.mm.android.avnetsdk.protocolstack.IPDU,com.mm.android.avnetsdk.param.AV_IN_SysInfo,com.mm.android.avnetsdk.param.AV_OUT_SysInfo) -> a
com.mm.android.avnetsdk.module.talk.CTalk -> com.mm.android.avnetsdk.a.m.a:
    com.mm.android.avnetsdk.module.device.CDevice m_device -> a
    com.mm.android.avnetsdk.param.AV_IN_Talk m_inParam -> b
    com.mm.android.avplaysdk.IPlayHandle m_hPlayHandle -> c
    com.mm.android.avnetsdk.module.playback.PlayerState m_playerState -> d
    int onData(byte[],int,int) -> a
    void onDisConnect() -> a
com.mm.android.avnetsdk.module.talk.CTalkFuncMdl -> com.mm.android.avnetsdk.a.m.b:
com.mm.android.avnetsdk.module.userinfo.CUserInfoFuncMdl -> com.mm.android.avnetsdk.a.n.a:
com.mm.android.avnetsdk.operate.COperate -> com.mm.android.avnetsdk.b.a:
    com.mm.android.avnetsdk.protocolstack.IPDU m_sendPDU -> d
    com.mm.android.avnetsdk.protocolstack.IPDU m_recvPDU -> e
    byte[] m_recvBuf -> a
    com.mm.android.avnetsdk.utilty.Event m_waitEvent -> b
    com.mm.android.avnetsdk.operate.OpType m_opType -> c
    com.mm.android.avnetsdk.operate.OpType getOpType() -> a
    void setSRPDU(com.mm.android.avnetsdk.protocolstack.IPDU,com.mm.android.avnetsdk.protocolstack.IPDU) -> a
    void setRecvBuf(byte[],int) -> a
    void setSendPDU(com.mm.android.avnetsdk.protocolstack.IPDU) -> a
    com.mm.android.avnetsdk.protocolstack.IPDU getSendPDU() -> b
    void setRecvPDU(com.mm.android.avnetsdk.protocolstack.IPDU) -> b
    com.mm.android.avnetsdk.protocolstack.IPDU getRecvPDU() -> c
    com.mm.android.avnetsdk.utilty.Event getWaitEvent() -> d
    void process() -> e
com.mm.android.avnetsdk.operate.CSequenceOperate -> com.mm.android.avnetsdk.b.b:
    int m_nSequenceID -> d
    int getSequenceID() -> f
    void setSequenceID(int) -> a
com.mm.android.avnetsdk.operate.OpType -> com.mm.android.avnetsdk.b.c:
    com.mm.android.avnetsdk.operate.OpType NULL -> a
    com.mm.android.avnetsdk.operate.OpType F4_F5_F6_SEQUENCE -> b
    com.mm.android.avnetsdk.operate.OpType REQ_LOGIN -> c
    com.mm.android.avnetsdk.operate.OpType REQ_SEARCH_RECORD -> d
    com.mm.android.avnetsdk.operate.OpType REQ_UA_AUTH_LIST -> e
    com.mm.android.avnetsdk.operate.OpType REQ_UA_USER_ACCOUNT -> f
    com.mm.android.avnetsdk.operate.OpType REQ_UA_USER_MODIFYPW -> g
    com.mm.android.avnetsdk.operate.OpType REQ_SYSTEM_INFO -> h
    com.mm.android.avnetsdk.operate.OpType REQ_AUDIO_TALK -> i
    com.mm.android.avnetsdk.operate.OpType REQ_SI_AUDIO_TALK_FORMAT -> j
    com.mm.android.avnetsdk.operate.OpType REQ_SI_VIDEO_PROPERTY -> k
    com.mm.android.avnetsdk.operate.OpType REQ_SI_DEVICE_VERSION -> l
    com.mm.android.avnetsdk.operate.OpType REQ_SI_DEVICE_FUN_LIST -> m
    com.mm.android.avnetsdk.operate.OpType REQ_SI_FRONT_CAPTURE -> n
    com.mm.android.avnetsdk.operate.OpType REQ_SI_DEVICE_PICTURE -> o
    com.mm.android.avnetsdk.operate.OpType REQ_SI_DEVICE_ID -> p
    com.mm.android.avnetsdk.operate.OpType REQ_SI_DEVICE_ATTR -> q
    com.mm.android.avnetsdk.operate.OpType REQ_SI_DEVICE_DISK -> r
    com.mm.android.avnetsdk.operate.OpType REQ_MEDIA_ABILITY -> s
    com.mm.android.avnetsdk.operate.OpType EXT_Dahua_Device_Network_ControlConnection_Passive -> t
    com.mm.android.avnetsdk.operate.OpType EXT_SMS_CONFIG -> u
    com.mm.android.avnetsdk.operate.OpType REQ_CFG_SET_CHANNEL_NAME -> v
    com.mm.android.avnetsdk.operate.OpType REQ_CFG_GET_CHANNEL_NAME -> w
    com.mm.android.avnetsdk.operate.OpType REQ_CFG_SET_ENCODE -> x
    com.mm.android.avnetsdk.operate.OpType REQ_CFG_GET_ENCODE -> y
    com.mm.android.avnetsdk.operate.OpType REQ_CFG_SET -> z
    com.mm.android.avnetsdk.operate.OpType REQ_ALARM_SEARCH -> A
    com.mm.android.avnetsdk.operate.OpType[] ENUM$VALUES -> B
    com.mm.android.avnetsdk.operate.OpType[] values() -> values
    com.mm.android.avnetsdk.operate.OpType valueOf(java.lang.String) -> valueOf
com.mm.android.avnetsdk.param.AV_GPSInfo -> com.mm.android.avnetsdk.c.a:
    java.lang.Double latidude -> a
    java.lang.Double longitude -> b
    long height -> c
    long angle -> d
    long speed -> e
    int starCount -> f
    boolean antennaState -> g
    boolean orientationState -> h
com.mm.android.avnetsdk.param.AV_HANDLE -> com.mm.android.avnetsdk.c.b:
com.mm.android.avnetsdk.param.AV_IN_Config -> com.mm.android.avnetsdk.c.c:
    com.mm.android.avnetsdk.param.E_ConfigType type -> a
    byte nNormalCfgType -> b
    byte nNormalCfgSubType -> c
    byte nExpandData -> d
    java.lang.Object value -> e
com.mm.android.avnetsdk.param.AV_IN_Login -> com.mm.android.avnetsdk.c.d:
    java.lang.String strDevIP -> a
    int nDevPort -> b
    java.lang.String strUsername -> c
    java.lang.String strPassword -> d
    boolean bReconnect -> e
    com.mm.android.avnetsdk.param.ConnectStatusListener connStatusListener -> f
    int nSpecCap -> g
com.mm.android.avnetsdk.param.AV_IN_NetParam -> com.mm.android.avnetsdk.c.e:
    int nWaitTime -> a
    int nConnTime -> b
    int nConnSpanTime -> c
    int nConntryNum -> d
    int nSubConnSpan -> e
com.mm.android.avnetsdk.param.AV_IN_PTZ -> com.mm.android.avnetsdk.c.f:
com.mm.android.avnetsdk.param.AV_IN_PlayBackByTime -> com.mm.android.avnetsdk.c.g:
    int nChannelID -> a
    com.mm.android.avnetsdk.param.AV_Time stuStartTime -> b
    com.mm.android.avplaysdk.IPlayView playView -> c
    com.mm.android.avnetsdk.param.IAV_DataListener dataListener -> d
    com.mm.android.avnetsdk.param.IAV_NetWorkListener netWorkListener -> e
    com.mm.android.avnetsdk.param.IAV_PlayerEventListener playerEventListener -> f
    java.lang.Object pUserParam -> g
    com.mm.android.avnetsdk.param.IAV_DownFileListener downLoadListener -> h
    boolean bAutoDown -> i
com.mm.android.avnetsdk.param.AV_IN_RealPlay -> com.mm.android.avnetsdk.c.h:
    int nChannelID -> a
    int nSubType -> b
    com.mm.android.avplaysdk.IPlayView playView -> c
    com.mm.android.avnetsdk.param.IAV_DataListener dataListener -> d
    com.mm.android.avnetsdk.param.IAV_NetWorkListener netWorkListener -> e
    com.mm.android.avnetsdk.param.IAV_PlayerEventListener playerEventListener -> f
    java.lang.Object objUserParam -> g
com.mm.android.avnetsdk.param.AV_IN_SysInfo -> com.mm.android.avnetsdk.c.i:
    byte nType -> a
    byte nSubType -> b
    java.lang.Object value -> c
com.mm.android.avnetsdk.param.AV_IN_Talk -> com.mm.android.avnetsdk.c.j:
    com.mm.android.avnetsdk.param.IAV_DataListener dataListener -> a
    com.mm.android.avnetsdk.param.IAV_NetWorkListener netWorkListener -> b
    java.lang.Object pUserParam -> c
com.mm.android.avnetsdk.param.AV_Login_ErrorCode -> com.mm.android.avnetsdk.c.k:
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode AV_Login_OK -> a
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode AV_Login_Error -> b
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode AV_Login_Error_Password -> c
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode AV_Login_Error_UserName -> d
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode AV_Login_Error_Timeout -> e
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode AV_Login_Error_ReLogin -> f
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode AV_Login_Error_Locked -> g
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode AV_Login_Error_Blacklist -> h
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode AV_Login_Error_DeviceBusy -> i
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode AV_Login_Error_ExceedMaxUserNum -> j
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode AV_Login_Error_Connect -> k
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode AV_Login_Error_Wrong_Version -> l
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode[] ENUM$VALUES -> m
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode[] values() -> values
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode valueOf(java.lang.String) -> valueOf
com.mm.android.avnetsdk.param.AV_MediaInfo -> com.mm.android.avnetsdk.c.l:
com.mm.android.avnetsdk.param.AV_OUT_Config -> com.mm.android.avnetsdk.c.m:
    java.lang.Object value -> a
com.mm.android.avnetsdk.param.AV_OUT_Login -> com.mm.android.avnetsdk.c.n:
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode emErrorCode -> a
    java.lang.String strDeviceType -> b
    int nAnalogChnNum -> c
    int nDigitalChnNum -> d
    int nProtocolVersion -> e
    int nVideoStandard -> f
    int nChannelCount -> g
com.mm.android.avnetsdk.param.AV_OUT_PTZ -> com.mm.android.avnetsdk.c.o:
com.mm.android.avnetsdk.param.AV_OUT_RealPlay -> com.mm.android.avnetsdk.c.p:
com.mm.android.avnetsdk.param.AV_OUT_SMSGetConfig -> com.mm.android.avnetsdk.c.q:
    int enable -> a
    int type -> b
    java.lang.String title -> c
    java.lang.String[] receivers -> d
com.mm.android.avnetsdk.param.AV_OUT_SysInfo -> com.mm.android.avnetsdk.c.r:
    boolean success -> a
    java.lang.Object val -> b
com.mm.android.avnetsdk.param.AV_Time -> com.mm.android.avnetsdk.c.s:
    int nYear -> a
    int nMonth -> b
    int nDay -> c
    int nHour -> d
    int nMinute -> e
    int nSecond -> f
    java.lang.String toString() -> toString
com.mm.android.avnetsdk.param.Afk_connect_param_t -> com.mm.android.avnetsdk.c.t:
    java.lang.String strSevIp -> a
    int nSevPort -> b
    int nConnectID -> c
    int nConnType -> d
    int nInterfaceType -> e
    java.lang.Object userdata -> f
com.mm.android.avnetsdk.param.CFG_MediaAbility -> com.mm.android.avnetsdk.c.u:
    int nChannelID -> a
    int nInfoType -> b
com.mm.android.avnetsdk.param.ConnectStatusListener -> com.mm.android.avnetsdk.c.v:
    int onConnectStatus(com.mm.android.avnetsdk.param.AV_HANDLE,boolean,java.lang.String,int,java.lang.Object) -> a
com.mm.android.avnetsdk.param.DvrCap -> com.mm.android.avnetsdk.c.w:
    int alarminputCount(int,byte[]) -> a
    int alarmoutputCount(int,byte[]) -> b
    boolean transability(int) -> a
    boolean talkability(int) -> b
com.mm.android.avnetsdk.param.E_ConfigType -> com.mm.android.avnetsdk.c.x:
    com.mm.android.avnetsdk.param.E_ConfigType NORMAL_CFG -> a
    com.mm.android.avnetsdk.param.E_ConfigType CHANNEL_NAME -> b
    com.mm.android.avnetsdk.param.E_ConfigType MEDIA_CAPABILITY -> c
    com.mm.android.avnetsdk.param.E_ConfigType SYS_CFG -> d
    com.mm.android.avnetsdk.param.E_ConfigType MMS_CFG -> e
    com.mm.android.avnetsdk.param.E_ConfigType[] ENUM$VALUES -> f
    com.mm.android.avnetsdk.param.E_ConfigType[] values() -> values
    com.mm.android.avnetsdk.param.E_ConfigType valueOf(java.lang.String) -> valueOf
com.mm.android.avnetsdk.param.IAV_CaptureDataListener -> com.mm.android.avnetsdk.c.y:
    void captureData(int,int,byte[]) -> a
com.mm.android.avnetsdk.param.IAV_DataListener -> com.mm.android.avnetsdk.c.z:
    int onData(com.mm.android.avnetsdk.param.AV_HANDLE,byte[],int,int,com.mm.android.avnetsdk.param.AV_MediaInfo,java.lang.Object) -> a
com.mm.android.avnetsdk.param.IAV_DownFileListener -> com.mm.android.avnetsdk.c.aa:
    int onDownPos(int,int) -> a
com.mm.android.avnetsdk.param.IAV_GPSListener -> com.mm.android.avnetsdk.c.ab:
    void dealGPS(com.mm.android.avnetsdk.param.AV_HANDLE,com.mm.android.avnetsdk.param.AV_GPSInfo) -> a
com.mm.android.avnetsdk.param.IAV_NetWorkListener -> com.mm.android.avnetsdk.c.ac:
    int onConnectStatus(com.mm.android.avnetsdk.param.AV_HANDLE,boolean,com.mm.android.avnetsdk.param.AV_HANDLE,java.lang.Object) -> a
com.mm.android.avnetsdk.param.IAV_PlayerEventListener -> com.mm.android.avnetsdk.c.ad:
    void playBackFinish(com.mm.android.avnetsdk.param.AV_HANDLE) -> a
    void onPlayEvent(com.mm.android.avnetsdk.param.AV_HANDLE,com.mm.android.avplaysdk.PlayEvent) -> a
com.mm.android.avnetsdk.param.LanDevice -> com.mm.android.avnetsdk.c.ae:
    java.lang.String machineName -> a
    java.lang.String deviceClass -> b
    java.lang.String deviceType -> c
    java.lang.String serialNo -> d
    java.lang.String hardwareID -> e
    java.lang.String version -> f
    java.lang.String online -> g
    java.lang.String uuid -> h
    java.lang.String MAC -> i
    java.lang.String definition -> j
    java.lang.String audioInputChannels -> k
    java.lang.String videoInputChannels -> l
    java.lang.String machineAddress -> m
    java.lang.String machineGroup -> n
    java.lang.String manufacturer -> o
    int port -> p
    java.lang.String vendor -> q
    boolean centralizationManager -> r
    java.lang.String managedCMS -> s
    com.mm.android.avnetsdk.param.LanDevice$NetWorkInfo IPV4 -> t
    com.mm.android.avnetsdk.param.LanDevice$NetWorkInfo IPV6 -> u
    java.lang.String toString() -> toString
com.mm.android.avnetsdk.param.LanDevice$NetWorkInfo -> com.mm.android.avnetsdk.c.af:
    boolean DHCPEnable -> a
    java.lang.String IPAddress -> b
    java.lang.String subnetMask -> c
    java.lang.String gateway -> d
    com.mm.android.avnetsdk.param.LanDevice this$0 -> e
    java.lang.String toString() -> toString
com.mm.android.avnetsdk.param.ParamHelper -> com.mm.android.avnetsdk.c.ag:
    com.mm.android.avnetsdk.param.AV_Login_ErrorCode loginErrorConvert(int) -> a
com.mm.android.avnetsdk.param.RecordFileInfo -> com.mm.android.avnetsdk.c.ah:
    byte nAudioOrVideo -> a
    int nStartCluster -> b
    byte nDriveNo -> c
    byte HInt -> d
    byte RecType -> e
    com.mm.android.avnetsdk.param.AV_Time startTime -> f
    com.mm.android.avnetsdk.param.AV_Time endTime -> g
    boolean bDownloadFinished -> h
com.mm.android.avnetsdk.param.SearchLanDeviceListener -> com.mm.android.avnetsdk.c.ai:
    void onFindDevice(int,com.mm.android.avnetsdk.param.LanDevice) -> a
com.mm.android.avnetsdk.protocolstack.Afk_dvrdevice_info -> com.mm.android.avnetsdk.protocolstack.a:
    int type -> a
    int channelcount -> b
    int alarminputcount -> c
    int alarmoutputcount -> d
    int AnalogChnNum -> e
    int version -> f
    int protocol_version -> g
    boolean ispal -> h
    boolean istrans -> i
    int enctype -> j
    boolean istalk -> k
    boolean ispreview -> l
    java.lang.String szDevType -> m
    boolean bAutoRegister -> n
    byte[] sessionId -> o
    int IsQuickConfig -> p
    java.lang.String strBackRandom -> q
    java.lang.String strMac -> r
    int StreamCap -> s
    int ImageSizeMask -> t
    int EncodeModeMask -> u
    int[] ImageSizeMask_Assi -> v
    int MaxEncodePower -> w
    int MaxSupportChannel -> x
    int mbEncodeCap -> y
    com.mm.android.avnetsdk.protocolstack.classstruct.ClassPrevideoCapture[] mPreCapture -> z
    java.util.HashMap mExtraMap -> A
    java.util.HashMap mMainMap -> B
    com.mm.android.avnetsdk.protocolstack.Afk_dvrdevice_info$config_version_type config_vresion -> C
com.mm.android.avnetsdk.protocolstack.Afk_dvrdevice_info$config_version_type -> com.mm.android.avnetsdk.protocolstack.b:
    com.mm.android.avnetsdk.protocolstack.Afk_dvrdevice_info$config_version_type binary -> a
    com.mm.android.avnetsdk.protocolstack.Afk_dvrdevice_info$config_version_type f5 -> b
    com.mm.android.avnetsdk.protocolstack.Afk_dvrdevice_info$config_version_type f6 -> c
    com.mm.android.avnetsdk.protocolstack.Afk_dvrdevice_info$config_version_type[] ENUM$VALUES -> d
    com.mm.android.avnetsdk.protocolstack.Afk_dvrdevice_info$config_version_type[] values() -> values
    com.mm.android.avnetsdk.protocolstack.Afk_dvrdevice_info$config_version_type valueOf(java.lang.String) -> valueOf
com.mm.android.avnetsdk.protocolstack.ChannelNameGetRequest -> com.mm.android.avnetsdk.protocolstack.c:
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.ChannelNameGetResponse -> com.mm.android.avnetsdk.protocolstack.d:
    int m_nProVer -> a
    java.lang.String[] m_strChnNames -> b
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.ConfigGetRequest -> com.mm.android.avnetsdk.protocolstack.e:
    int m_nConfigType -> a
    int m_nParam -> b
    int m_ChannelNo -> c
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.ConfigGetResponse -> com.mm.android.avnetsdk.protocolstack.f:
    byte[] m_retBuffer -> a
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.DownloadFilePauseRequest -> com.mm.android.avnetsdk.protocolstack.g:
    int m_nChannelID -> a
    boolean m_bPause -> b
    int mProtocalVer -> c
    int mConnectId -> d
    void setChannelID(int) -> a
    void setPause(boolean) -> a
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.DownloadFileStartRequest -> com.mm.android.avnetsdk.protocolstack.h:
    int m_nChannelID -> a
    byte m_byteCutFrameRate -> b
    int m_nDownloadByTime -> c
    com.mm.android.avnetsdk.param.RecordFileInfo m_recordInfo -> d
    int mProtocalVer -> e
    int mConnectId -> f
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.DownloadFileStopRequest -> com.mm.android.avnetsdk.protocolstack.i:
    int m_nChannelID -> a
    int mProtocalVer -> b
    int mConnectId -> c
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.ForceIframeRequest -> com.mm.android.avnetsdk.protocolstack.j:
    int mChannelId -> a
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.HeartBeatRequest -> com.mm.android.avnetsdk.protocolstack.k:
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.IPDU -> com.mm.android.avnetsdk.protocolstack.l:
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.LoginRequest -> com.mm.android.avnetsdk.protocolstack.m:
    java.lang.String m_strUsername -> a
    java.lang.String m_strPassword -> b
    java.lang.String m_strRandom -> c
    java.lang.String m_strOEM -> d
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
    void setUsername(java.lang.String) -> a
    void setPassword(java.lang.String) -> b
    void setRandom(java.lang.String) -> c
com.mm.android.avnetsdk.protocolstack.LoginResponse -> com.mm.android.avnetsdk.protocolstack.n:
    com.mm.android.avnetsdk.protocolstack.Afk_dvrdevice_info m_stuDevInfo -> a
    int m_resultCode -> b
    int m_card_Query_Info -> c
    int m_multiPlayEnable -> d
    int m_isQuickConfig -> e
    boolean m_bLoginSuccess -> f
    boolean isLoginSuccess() -> b
    com.mm.android.avnetsdk.protocolstack.Afk_dvrdevice_info getM_stuDevInfo() -> c
    int getM_resultCode() -> d
    int getM_isQuickConfig() -> e
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.LogoutRequest -> com.mm.android.avnetsdk.protocolstack.o:
    byte[] sessionId -> a
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
    void setSessionId(byte[]) -> b
com.mm.android.avnetsdk.protocolstack.MediaAbilityGetRequest -> com.mm.android.avnetsdk.protocolstack.p:
    int m_nChannelID -> a
    int m_nInfoType -> b
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.MediaAbilityGetResponse -> com.mm.android.avnetsdk.protocolstack.q:
    byte[] m_retBuffer -> a
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.MediaRequest -> com.mm.android.avnetsdk.protocolstack.r:
    byte[] m_channelNum -> a
    byte[] m_mediaType -> b
    int m_previewNo -> c
    int m_previewType -> d
    int mIsProVersion -> e
    int mChannel -> f
    int mState -> g
    int mConnectId -> h
    int mSubType -> i
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.MulticastDeviceSearchResponse -> com.mm.android.avnetsdk.protocolstack.s:
    com.mm.android.avnetsdk.param.LanDevice lanDevice -> a
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.NativeProtocolHelper -> com.mm.android.avnetsdk.protocolstack.NativeProtocolHelper:
    com.mm.android.avnetsdk.protocolstack.classstruct.ClassPrevideoCapture[] getPreCapture(byte[],int) -> getPreCapture
    com.mm.android.avnetsdk.protocolstack.classstruct.ClassDevDiskState[] getDiskState(byte[],int) -> getDiskState
    com.mm.android.avnetsdk.protocolstack.classstruct.RecordEnable getRecordEnable(byte[],int) -> getRecordEnable
    int getExtStream(byte[],int[]) -> getExtStream
    int getEncodeCap(byte[]) -> getEncodeCap
    void getDHTIMEBuffer(byte[],int,int,int,int,int,int) -> getDHTIMEBuffer
    int DahuaEncryptInit() -> DahuaEncryptInit
    int DahuaMacValidate(java.lang.String) -> DahuaMacValidate
    int DahuaAuthorizationCheck(java.lang.String,java.lang.String,java.lang.String) -> DahuaAuthorizationCheck
com.mm.android.avnetsdk.protocolstack.SI_DeviceAttrResponse -> com.mm.android.avnetsdk.protocolstack.t:
    com.mm.android.avnetsdk.protocolstack.classstruct.ClassDevATTR mDevAttr -> a
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.SI_DeviceDiskStateResponse -> com.mm.android.avnetsdk.protocolstack.u:
    com.mm.android.avnetsdk.protocolstack.classstruct.ClassDevDiskState[] mDevDiskStates -> a
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.SI_DeviceFunListResponse -> com.mm.android.avnetsdk.protocolstack.v:
    boolean m_bHighVersion -> a
    boolean m_success -> b
    java.util.HashMap mFunMap -> c
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.SI_DeviceIDResponse -> com.mm.android.avnetsdk.protocolstack.w:
    java.lang.String m_strDeviceID -> a
    java.lang.String getDeviceID() -> b
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.SI_DeviceVersionResponse -> com.mm.android.avnetsdk.protocolstack.x:
    java.lang.String m_strDeviceInfo -> a
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.SI_FrontCaptureResponse -> com.mm.android.avnetsdk.protocolstack.y:
    com.mm.android.avnetsdk.protocolstack.classstruct.ClassPrevideoCapture[] m_frontCapture -> a
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.SI_RecordEnableResponse -> com.mm.android.avnetsdk.protocolstack.z:
    com.mm.android.avnetsdk.protocolstack.classstruct.RecordEnable mRecordEnable -> a
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.SI_SystemInfoGetRequest -> com.mm.android.avnetsdk.protocolstack.aa:
    byte m_nType -> a
    byte m_nSubType -> b
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.SI_TalkPropertyResponse -> com.mm.android.avnetsdk.protocolstack.ab:
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.SI_VideoPropertyResponse -> com.mm.android.avnetsdk.protocolstack.ac:
    int mVideProperty -> a
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.SMReceiverGetRequest -> com.mm.android.avnetsdk.protocolstack.ad:
    int m_sequence -> a
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.SMReceiverGetResponse -> com.mm.android.avnetsdk.protocolstack.ae:
    java.lang.String[] m_mobileNumbers -> a
    int m_enable -> b
    int m_type -> c
    java.lang.String m_title -> d
    java.lang.String m_result -> e
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.SessionRequest -> com.mm.android.avnetsdk.protocolstack.af:
    int mSequence -> a
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.SessionResponse -> com.mm.android.avnetsdk.protocolstack.ag:
    java.util.HashMap mMap -> a
    byte[] Serialize() -> a
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.SubConnRegRequest -> com.mm.android.avnetsdk.protocolstack.ah:
    int m_nProtocolVersion -> a
    byte[] m_sessionID -> b
    int m_nConnectID -> c
    int m_nChannelCount -> d
    byte[] Serialize() -> a
    byte[] SerializeForVersion6() -> b
    byte[] SerializeForVersion5() -> c
    boolean Deserialize(byte[]) -> a
com.mm.android.avnetsdk.protocolstack.classstruct.ClassDevATTR -> com.mm.android.avnetsdk.protocolstack.a.a:
    byte iVerMaj -> a
    byte iVerSub -> b
    byte iVideoInCaps -> c
    byte iAudioInCaps -> d
    byte iAlarmInCaps -> e
    byte iAlarmOutCaps -> f
com.mm.android.avnetsdk.protocolstack.classstruct.ClassDevDiskState -> com.mm.android.avnetsdk.protocolstack.a.b:
    int dwVolume -> a
    int dwFreeSpace -> b
    byte dwStatus -> c
    byte bDiskNum -> d
    byte bSubareaNum -> e
    byte bSignal -> f
    java.lang.String toString() -> toString
com.mm.android.avnetsdk.protocolstack.classstruct.ClassPrevideoCapture -> com.mm.android.avnetsdk.protocolstack.a.c:
com.mm.android.avnetsdk.protocolstack.classstruct.RecordEnable -> com.mm.android.avnetsdk.protocolstack.a.d:
com.mm.android.avnetsdk.utilty.CheckMac -> com.mm.android.avnetsdk.d.a:
    java.util.ArrayList mMacList -> a
    java.util.ArrayList mMacParList -> b
    void clean() -> a
    boolean CheckMacValid(java.lang.String) -> a
com.mm.android.avnetsdk.utilty.Event -> com.mm.android.avnetsdk.d.b:
    boolean bSet -> a
    void setEvent() -> a
com.mm.android.avnetsdk.utilty.ExtByte -> com.mm.android.avnetsdk.d.c:
    void DWORD(byte[],int,int) -> a
    void SHORT(byte[],int,int) -> b
com.mm.android.avnetsdk.utilty.MacBean -> com.mm.android.avnetsdk.d.d:
    java.lang.String start -> a
    java.lang.String end -> b
    java.lang.String toString() -> toString
com.mm.android.avnetsdk.utilty.ParseVersionSix -> com.mm.android.avnetsdk.d.e:
    com.mm.android.avnetsdk.utilty.ParseVersionSix mParseVersionSix -> a
    java.util.HashMap mParseMap -> b
    com.mm.android.avnetsdk.utilty.ParseVersionSix getInstance() -> a
    void Parse(int,java.lang.String) -> a
    java.util.HashMap getKeyVaule(int) -> a
com.mm.android.avnetsdk.utilty.SequenceHelper -> com.mm.android.avnetsdk.d.f:
    int m_sequenceID -> a
    int getNextID() -> a
com.mm.android.avplaysdk.AVErrorCenter -> com.mm.android.avplaysdk.a:
    java.util.Map m_mapError -> a
    void put(int) -> a
com.mm.android.avplaysdk.AVPlayBackPlayer -> com.mm.android.avplaysdk.b:
    com.mm.android.avplaysdk.indexer.NetDataSource m_netDataSource -> d
    com.mm.android.avplaysdk.engine.PlayGroup m_playGroup -> e
    boolean inputData(byte[],int,int) -> a
    boolean play(com.mm.android.avplaysdk.IPlayView,com.mm.android.avplaysdk.IPlayListener) -> a
    boolean stop() -> a
com.mm.android.avplaysdk.AVPlaySDK -> com.mm.android.avplaysdk.c:
    boolean startup(java.lang.String) -> a
    com.mm.android.avplaysdk.IPlayHandle openStream(com.mm.android.avplaysdk.AVPlaySDK$AV_FILE_HEADER,int,int,boolean,com.mm.android.avplaysdk.IInputDataListener) -> a
    void closeStream(com.mm.android.avplaysdk.IPlayHandle) -> a
    boolean play(com.mm.android.avplaysdk.IPlayHandle,com.mm.android.avplaysdk.IPlayView,com.mm.android.avplaysdk.IPlayListener) -> a
    boolean stop(com.mm.android.avplaysdk.IPlayHandle) -> b
    boolean inputData(com.mm.android.avplaysdk.IPlayHandle,byte[],int,int) -> a
    boolean pause(com.mm.android.avplaysdk.IPlayHandle,boolean) -> a
    com.mm.android.avplaysdk.AVPlayer getAVPlayer(com.mm.android.avplaysdk.AVPlaySDK$AV_FILE_HEADER,int,com.mm.android.avplaysdk.IInputDataListener) -> a
com.mm.android.avplaysdk.AVPlaySDK$AV_FILE_HEADER -> com.mm.android.avplaysdk.d:
com.mm.android.avplaysdk.AVPlayer -> com.mm.android.avplaysdk.e:
    int ENGINE_MIN_THRESHOLD -> a
    long m_nativePlayer -> b
    java.util.Timer m_timer -> d
    com.mm.android.avplaysdk.AVPlayer$RenderTimerTask m_task -> e
    com.mm.android.avplaysdk.IPlayView m_playView -> f
    com.mm.android.avplaysdk.IPlayListener m_playListener -> c
    com.mm.android.avplaysdk.AVPlayer$PLAY_STATUS m_ePlayStatus -> g
    int m_nFrameRate -> h
    int m_nWidth -> i
    int m_nHeight -> j
    int m_nSpeed -> k
    com.mm.android.avplaysdk.render.AudioRender m_audioRender -> l
    com.mm.android.avplaysdk.FileRecorder m_record -> m
    boolean m_byFrame -> n
    boolean m_playSound -> o
    int startup(java.lang.String) -> a
    boolean open(int,boolean) -> a
    void close() -> b
    boolean play(com.mm.android.avplaysdk.IPlayView,com.mm.android.avplaysdk.IPlayListener) -> a
    boolean stop() -> a
    boolean inputData(byte[],int,int) -> a
    boolean pause(boolean) -> a
    void changePlayStatus(com.mm.android.avplaysdk.AVPlayer$PLAY_STATUS) -> a
    long getNativePlayer() -> c
    void changePlaySpeed(int) -> a
    int decodeOneVideoFrame(byte[],int[],boolean) -> a
    com.mm.android.avplaysdk.AVPlayer$PLAY_STATUS access$0(com.mm.android.avplaysdk.AVPlayer) -> a
    boolean access$1(com.mm.android.avplaysdk.AVPlayer) -> b
    com.mm.android.avplaysdk.IPlayView access$2(com.mm.android.avplaysdk.AVPlayer) -> c
com.mm.android.avplaysdk.AVPlayer$PLAY_STATUS -> com.mm.android.avplaysdk.f:
    com.mm.android.avplaysdk.AVPlayer$PLAY_STATUS PS_INIT -> a
    com.mm.android.avplaysdk.AVPlayer$PLAY_STATUS PS_PLAY -> b
    com.mm.android.avplaysdk.AVPlayer$PLAY_STATUS PS_PAUSE -> c
    com.mm.android.avplaysdk.AVPlayer$PLAY_STATUS PS_STOP -> d
    com.mm.android.avplaysdk.AVPlayer$PLAY_STATUS[] ENUM$VALUES -> e
    com.mm.android.avplaysdk.AVPlayer$PLAY_STATUS[] values() -> values
    com.mm.android.avplaysdk.AVPlayer$PLAY_STATUS valueOf(java.lang.String) -> valueOf
com.mm.android.avplaysdk.AVPlayer$RenderTimerTask -> com.mm.android.avplaysdk.g:
    com.mm.android.avplaysdk.AVPlayer this$0 -> a
    void run() -> run
com.mm.android.avplaysdk.AVRealTimePlayer -> com.mm.android.avplaysdk.h:
    boolean inputData(byte[],int,int) -> a
com.mm.android.avplaysdk.FileRecorder -> com.mm.android.avplaysdk.i:
com.mm.android.avplaysdk.IInputDataListener -> com.mm.android.avplaysdk.j:
    void notifyInputData(int) -> a
com.mm.android.avplaysdk.IPlayHandle -> com.mm.android.avplaysdk.k:
com.mm.android.avplaysdk.IPlayListener -> com.mm.android.avplaysdk.l:
com.mm.android.avplaysdk.IPlayView -> com.mm.android.avplaysdk.m:
    void render() -> a
    void setPlayer(com.mm.android.avplaysdk.AVPlayer) -> setPlayer
    boolean start() -> b
    boolean stop() -> c
    void enableRender(boolean) -> a
    boolean getEnableRender() -> getEnableRender
com.mm.android.avplaysdk.IViewListener -> com.mm.android.avplaysdk.n:
    void onViewMessage(int,android.view.SurfaceView,int) -> a
com.mm.android.avplaysdk.PlayEvent -> com.mm.android.avplaysdk.o:
    int IFrameListSize -> a
    boolean SDCardFull -> b
    boolean NotSupportAudioFormat -> c
com.mm.android.avplaysdk.engine.EngineModel -> com.mm.android.avplaysdk.a.a:
    int SEND_DATA_MIN_THRESHOLD -> a
    byte[] m_engineLock -> b
    com.mm.android.avplaysdk.engine.EngineModel m_engineModel -> c
    long m_nativeEngine -> d
    boolean m_bStop -> e
    java.lang.Thread m_engineThread -> f
    java.util.concurrent.BlockingQueue m_msgBlockQueue -> g
    java.util.LinkedList m_listPlayGroup -> h
    boolean m_bInitilize -> i
    byte[] m_initLock -> j
    com.mm.android.avplaysdk.engine.EngineModel instance() -> a
    boolean start(long) -> a
    void addPlayGroup(com.mm.android.avplaysdk.engine.PlayGroup) -> a
    void removePlayGroup(com.mm.android.avplaysdk.engine.PlayGroup) -> b
    boolean access$0(com.mm.android.avplaysdk.engine.EngineModel) -> a
    java.util.concurrent.BlockingQueue access$1(com.mm.android.avplaysdk.engine.EngineModel) -> b
    long access$2(com.mm.android.avplaysdk.engine.EngineModel) -> c
    java.util.LinkedList access$3(com.mm.android.avplaysdk.engine.EngineModel) -> d
com.mm.android.avplaysdk.engine.EngineModel$EngineMessage -> com.mm.android.avplaysdk.a.b:
    com.mm.android.avplaysdk.AVPlayer playerFrom -> a
    com.mm.android.avplaysdk.engine.EngineModel$MSG_TYPE eMsgType -> b
com.mm.android.avplaysdk.engine.EngineModel$EngineThread -> com.mm.android.avplaysdk.a.c:
    com.mm.android.avplaysdk.engine.EngineModel this$0 -> a
    void run() -> run
    com.mm.android.avplaysdk.engine.PlayGroup getPlayGroup(com.mm.android.avplaysdk.AVPlayer) -> a
    void removeEngineMsg(com.mm.android.avplaysdk.AVPlayer) -> b
com.mm.android.avplaysdk.engine.EngineModel$MSG_TYPE -> com.mm.android.avplaysdk.a.d:
    com.mm.android.avplaysdk.engine.EngineModel$MSG_TYPE MSG_TYPE_SEND_DATA -> a
    com.mm.android.avplaysdk.engine.EngineModel$MSG_TYPE MSG_TYPE_EXIT -> b
    com.mm.android.avplaysdk.engine.EngineModel$MSG_TYPE[] ENUM$VALUES -> c
    com.mm.android.avplaysdk.engine.EngineModel$MSG_TYPE[] values() -> values
    com.mm.android.avplaysdk.engine.EngineModel$MSG_TYPE valueOf(java.lang.String) -> valueOf
com.mm.android.avplaysdk.engine.PlayGroup -> com.mm.android.avplaysdk.a.e:
    com.mm.android.avplaysdk.AVPlayer m_avPlayer -> a
    com.mm.android.avplaysdk.indexer.DataSource m_dataSource -> b
    void setPlayer(com.mm.android.avplaysdk.AVPlayer) -> a
    com.mm.android.avplaysdk.AVPlayer getPlayer() -> a
    void setDataSource(com.mm.android.avplaysdk.indexer.DataSource) -> a
    com.mm.android.avplaysdk.indexer.DataSource getDataSource() -> b
com.mm.android.avplaysdk.indexer.DataSource -> com.mm.android.avplaysdk.b.a:
    com.mm.android.avplaysdk.indexer.PlayBackIndex m_indexPlay -> a
    com.mm.android.avplaysdk.IInputDataListener m_inputDataListener -> b
    com.mm.android.avplaysdk.indexer.PlayBackIndex getIndexer() -> a
    void destroy() -> b
    void notifyInputData(int) -> a
    void init() -> c
com.mm.android.avplaysdk.indexer.Indexer -> com.mm.android.avplaysdk.b.b:
    long m_indexer -> a
    long getIndexer() -> a
    void destroy() -> b
com.mm.android.avplaysdk.indexer.NetDataSource -> com.mm.android.avplaysdk.b.c:
com.mm.android.avplaysdk.indexer.PlayBackIndex -> com.mm.android.avplaysdk.b.d:
com.mm.android.avplaysdk.nativeplayer.DHPlayer -> com.mm.android.avplaysdk.nativeplayer.DHPlayer:
    int startup(java.lang.String) -> startup
    long createPlayer(int,int,boolean) -> createPlayer
    boolean destroyPlayer(long) -> destroyPlayer
    boolean play(long,long) -> play
    int inputData(long,byte[],int,int) -> inputData
    boolean stop(long) -> stop
    boolean setRenderListener(long,com.mm.android.avplaysdk.render.IRenderListener) -> setRenderListener
    int decodeOneVideoFrame(long,byte[],int[],boolean) -> decodeOneVideoFrame
    long createIndexBuilder(int,java.lang.String) -> createIndexBuilder
    boolean destroyIndexBuilder(long) -> destroyIndexBuilder
    long createEngine(long) -> createEngine
    boolean inputStream(long,byte[],int,int) -> inputStream
    int sendData(long,long,long,long) -> sendData
    int getIndexRemainTime(long) -> getIndexRemainTime
com.mm.android.avplaysdk.render.AudioRender -> com.mm.android.avplaysdk.render.a:
    android.media.AudioTrack m_audioTrack -> a
    java.util.List m_lstAudioData -> b
    boolean m_bStop -> c
    void run() -> run
com.mm.android.avplaysdk.render.BasicGLSurfaceView -> com.mm.android.avplaysdk.render.BasicGLSurfaceView:
    com.mm.android.avplaysdk.render.NativeGLRenderer m_glRender -> a
    boolean m_bRender -> b
    android.opengl.GLSurfaceView$Renderer getRenderer() -> getRenderer
    boolean init(com.mm.android.avplaysdk.IViewListener) -> a
    void render() -> a
    void setPlayer(com.mm.android.avplaysdk.AVPlayer) -> setPlayer
    boolean stop() -> c
    void enableRender(boolean) -> a
    boolean start() -> b
    void uninit() -> d
    void setFrameMode(boolean) -> setFrameMode
    boolean getEnableRender() -> getEnableRender
com.mm.android.avplaysdk.render.IRenderListener -> com.mm.android.avplaysdk.render.b:
com.mm.android.avplaysdk.render.NativeGLRenderer -> com.mm.android.avplaysdk.render.c:
    boolean m_bSurfaceChanged -> b
    boolean m_bSurfaceCreated -> c
    boolean m_bResert -> d
    boolean m_bDecode -> e
    int m_nViewWidth -> f
    int m_nViewHeight -> g
    com.mm.android.avplaysdk.AVPlayer mVideoPlayer -> h
    boolean m_cleanScreen -> i
    boolean m_bSnapShot -> j
    boolean m_bFrameMode -> k
    boolean m_bStop -> l
    byte[] m_StopEvent -> m
    int[] m_glTexture -> n
    java.nio.ByteBuffer m_rgbSource -> o
    int m_nVideoWidth -> p
    int m_nVideoHeight -> q
    int m_glTextureSize -> r
    java.nio.FloatBuffer m_verticesBuffer -> s
    java.nio.FloatBuffer m_coordinatesBuffer -> t
    int mRgb -> u
    int[] videoInfo -> a
    com.mm.android.avplaysdk.IViewListener m_viewListener -> v
    java.lang.String m_strFileName -> w
    int m_nQuality -> x
    byte[] m_snapShotLock -> y
    int m_nErrCode -> z
    boolean m_bRender -> A
    android.view.SurfaceView m_surfaceView -> B
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    void setPlayer(com.mm.android.avplaysdk.AVPlayer) -> a
    void clear() -> a
    boolean resetTexture(javax.microedition.khronos.opengles.GL10,int) -> a
    void stopRender() -> b
    void startRender() -> c
    void setViewListener(com.mm.android.avplaysdk.IViewListener) -> a
    void snapShot() -> e
    void enableRender(boolean) -> a
    void setFrameMode(boolean) -> b
    void onlyDecode() -> d
com.mm.android.tplayer.Event -> com.mm.android.a.a:
    boolean bSet -> a
    void setEvent() -> a
    void resetEvent() -> b
com.mm.android.tplayer.GlobalTplayerData -> com.mm.android.a.b:
    com.mm.android.tplayer.Event m_ExitEvent -> a
    int m_nThreadNumber -> b
    java.util.List m_lstAllThreadInfo -> c
    void reset() -> a
com.mm.android.tplayer.IIODriver -> com.mm.android.a.c:
    int processSocket(java.nio.channels.SelectionKey) -> a
com.mm.android.tplayer.ITPListener -> com.mm.android.a.d:
    int onData(int,byte[],int) -> a
    int onSendDataAck(int,int) -> a
    int onDisconnect(int) -> a
    int onReconnect(int) -> b
com.mm.android.tplayer.MulticastClient -> com.mm.android.a.e:
    java.net.MulticastSocket multicastSocket -> a
    byte[] receiveData -> b
    java.net.DatagramPacket sendPacket -> c
    java.net.DatagramPacket receivePacket -> d
    com.mm.android.tplayer.MulticastListener mListener -> e
    boolean isInit -> f
    boolean flag -> g
    void run() -> run
com.mm.android.tplayer.MulticastListener -> com.mm.android.a.f:
    int onData(byte[],int) -> a
com.mm.android.tplayer.ProcessThread -> com.mm.android.a.g:
    com.mm.android.tplayer.ThreadInfo threadInfo -> a
    java.lang.String threadName -> b
    void run() -> run
    void setThreadInfo(com.mm.android.tplayer.ThreadInfo) -> a
    void setThreadName(java.lang.String) -> a
com.mm.android.tplayer.SendItem -> com.mm.android.a.h:
    byte[] buffer -> a
    int nFlg -> b
    java.nio.channels.SocketChannel socketChannel -> c
com.mm.android.tplayer.TPObject -> com.mm.android.a.i:
    com.mm.android.tplayer.GlobalTplayerData g_dataCenter -> a
    java.util.List m_lstSelector -> f
    java.lang.Object m_lstSelectorLock -> g
    boolean m_bStart -> b
    boolean m_isDetectDisconnect -> h
    boolean m_isReconnectEnable -> i
    int startup(int) -> c
    int cleanup() -> a
    boolean addSocketToThread(java.nio.channels.SocketChannel) -> a
    boolean deleteSocketFromThread(java.nio.channels.SocketChannel) -> b
    void setDetectDisconnect(boolean) -> a
    void setReconnectEnable(boolean) -> b
com.mm.android.tplayer.TPTCPClient -> com.mm.android.a.j:
    com.mm.android.tplayer.ITPListener tpListener -> a
    java.nio.channels.SocketChannel socketChn -> b
    java.util.List lstSendItems -> c
    byte[] lstSendItemsLock -> d
    byte[] keepLiveBuf -> e
    long lastKeepLiveTime -> k
    long keepLiveSpan -> l
    long lastReceiveTime -> m
    boolean isOnline -> n
    java.lang.String serverIP -> o
    int serverPort -> p
    java.nio.ByteBuffer bytebuf -> q
    boolean isPrintLog -> j
    java.nio.channels.SocketChannel getSocketChn() -> b
    int heartbeat() -> c
    int write(int,byte[]) -> a
    void setListener(com.mm.android.tplayer.ITPListener) -> a
    int connect(java.lang.String,int,int) -> a
    int close() -> d
    int processSocket(java.nio.channels.SelectionKey) -> a
    void setKeepLiveBuf(byte[]) -> a
com.mm.android.tplayer.ThreadInfo -> com.mm.android.a.k:
    java.nio.channels.Selector m_selector -> a
    java.lang.Object m_selectorLock -> b
    java.lang.Thread m_thread -> c
    com.mm.android.tplayer.GlobalTplayerData m_gTplayerData -> d
org.MediaPlayer.PlayM4.Constants -> org.MediaPlayer.PlayM4.Constants:
    int PLAYM4_MAX_SUPPORTS -> PLAYM4_MAX_SUPPORTS
    int MIN_WAVE_COEF -> MIN_WAVE_COEF
    int MAX_WAVE_COEF -> MAX_WAVE_COEF
    int TIMER_1 -> TIMER_1
    int TIMER_2 -> TIMER_2
    int BUF_VIDEO_SRC -> BUF_VIDEO_SRC
    int BUF_AUDIO_SRC -> BUF_AUDIO_SRC
    int BUF_VIDEO_RENDER -> BUF_VIDEO_RENDER
    int BUF_AUDIO_RENDER -> BUF_AUDIO_RENDER
    int PLAYM4_NOERROR -> PLAYM4_NOERROR
    int PLAYM4_PARA_OVER -> PLAYM4_PARA_OVER
    int PLAYM4_ORDER_ERROR -> PLAYM4_ORDER_ERROR
    int PLAYM4_TIMER_ERROR -> PLAYM4_TIMER_ERROR
    int PLAYM4_DEC_VIDEO_ERROR -> PLAYM4_DEC_VIDEO_ERROR
    int PLAYM4_DEC_AUDIO_ERROR -> PLAYM4_DEC_AUDIO_ERROR
    int PLAYM4_ALLOC_MEMORY_ERROR -> PLAYM4_ALLOC_MEMORY_ERROR
    int PLAYM4_OPEN_FILE_ERROR -> PLAYM4_OPEN_FILE_ERROR
    int PLAYM4_CREATE_OBJ_ERROR -> PLAYM4_CREATE_OBJ_ERROR
    int PLAYM4_BUF_OVER -> PLAYM4_BUF_OVER
    int PLAYM4_CREATE_SOUND_ERROR -> PLAYM4_CREATE_SOUND_ERROR
    int PLAYM4_SET_VOLUME_ERROR -> PLAYM4_SET_VOLUME_ERROR
    int PLAYM4_SUPPORT_FILE_ONLY -> PLAYM4_SUPPORT_FILE_ONLY
    int PLAYM4_SUPPORT_STREAM_ONLY -> PLAYM4_SUPPORT_STREAM_ONLY
    int PLAYM4_SYS_NOT_SUPPORT -> PLAYM4_SYS_NOT_SUPPORT
    int PLAYM4_FILEHEADER_UNKNOWN -> PLAYM4_FILEHEADER_UNKNOWN
    int PLAYM4_VERSION_INCORRECT -> PLAYM4_VERSION_INCORRECT
    int PLAYM4_INIT_DECODER_ERROR -> PLAYM4_INIT_DECODER_ERROR
    int PLAYM4_CHECK_FILE_ERROR -> PLAYM4_CHECK_FILE_ERROR
    int PLAYM4_INIT_TIMER_ERROR -> PLAYM4_INIT_TIMER_ERROR
    int PLAYM4_BLT_ERROR -> PLAYM4_BLT_ERROR
    int PLAYM4_OPEN_FILE_ERROR_MULTI -> PLAYM4_OPEN_FILE_ERROR_MULTI
    int PLAYM4_OPEN_FILE_ERROR_VIDEO -> PLAYM4_OPEN_FILE_ERROR_VIDEO
    int PLAYM4_JPEG_COMPRESS_ERROR -> PLAYM4_JPEG_COMPRESS_ERROR
    int PLAYM4_EXTRACT_NOT_SUPPORT -> PLAYM4_EXTRACT_NOT_SUPPORT
    int PLAYM4_EXTRACT_DATA_ERROR -> PLAYM4_EXTRACT_DATA_ERROR
    int PLAYM4_SECRET_KEY_ERROR -> PLAYM4_SECRET_KEY_ERROR
    int PLAYM4_DECODE_KEYFRAME_ERROR -> PLAYM4_DECODE_KEYFRAME_ERROR
    int PLAYM4_NEED_MORE_DATA -> PLAYM4_NEED_MORE_DATA
    int PLAYM4_INVALID_PORT -> PLAYM4_INVALID_PORT
    int PLAYM4_FAIL_UNKNOWN -> PLAYM4_FAIL_UNKNOWN
    int MAX_DISPLAY_WND -> MAX_DISPLAY_WND
    int DISPLAY_NORMAL -> DISPLAY_NORMAL
    int DISPLAY_QUARTER -> DISPLAY_QUARTER
    int DISPLAY_YC_SCALE -> DISPLAY_YC_SCALE
    int MAX_DIS_FRAMES -> MAX_DIS_FRAMES
    int MIN_DIS_FRAMES -> MIN_DIS_FRAMES
    int BY_FRAMENUM -> BY_FRAMENUM
    int BY_FRAMETIME -> BY_FRAMETIME
    int SOURCE_BUF_MAX -> SOURCE_BUF_MAX
    int SOURCE_BUF_MIN -> SOURCE_BUF_MIN
    int STREAME_REALTIME -> STREAME_REALTIME
    int STREAME_FILE -> STREAME_FILE
    int T_AUDIO16 -> T_AUDIO16
    int T_AUDIO8 -> T_AUDIO8
    int T_UYVY -> T_UYVY
    int T_YV12 -> T_YV12
    int T_RGB32 -> T_RGB32
    int SUPPORT_DDRAW -> SUPPORT_DDRAW
    int SUPPORT_BLT -> SUPPORT_BLT
    int SUPPORT_BLTFOURCC -> SUPPORT_BLTFOURCC
    int SUPPORT_BLTSHRINKX -> SUPPORT_BLTSHRINKX
    int SUPPORT_BLTSHRINKY -> SUPPORT_BLTSHRINKY
    int SUPPORT_BLTSTRETCHX -> SUPPORT_BLTSTRETCHX
    int SUPPORT_BLTSTRETCHY -> SUPPORT_BLTSTRETCHY
    int SUPPORT_SSE -> SUPPORT_SSE
    int SUPPORT_MMX -> SUPPORT_MMX
    int FOURCC_HKMI -> FOURCC_HKMI
    int SYSTEM_NULL -> SYSTEM_NULL
    int SYSTEM_HIK -> SYSTEM_HIK
    int SYSTEM_MPEG2_PS -> SYSTEM_MPEG2_PS
    int SYSTEM_MPEG2_TS -> SYSTEM_MPEG2_TS
    int SYSTEM_RTP -> SYSTEM_RTP
    int SYSTEM_RTPHIK -> SYSTEM_RTPHIK
    int VIDEO_NULL -> VIDEO_NULL
    int VIDEO_H264 -> VIDEO_H264
    int VIDEO_MPEG4 -> VIDEO_MPEG4
    int VIDEO_MJPEG -> VIDEO_MJPEG
    int VIDEO_AVC264 -> VIDEO_AVC264
    int AUDIO_NULL -> AUDIO_NULL
    int AUDIO_ADPCM -> AUDIO_ADPCM
    int AUDIO_MPEG -> AUDIO_MPEG
    int AUDIO_RAW_DATA8 -> AUDIO_RAW_DATA8
    int AUDIO_RAW_UDATA16 -> AUDIO_RAW_UDATA16
    int AUDIO_G711_U -> AUDIO_G711_U
    int AUDIO_G711_A -> AUDIO_G711_A
    int AUDIO_G722_1 -> AUDIO_G722_1
    int AUDIO_G723_1 -> AUDIO_G723_1
    int AUDIO_G726_U -> AUDIO_G726_U
    int AUDIO_G726_A -> AUDIO_G726_A
    int AUDIO_G729 -> AUDIO_G729
    int AUDIO_AMR_NB -> AUDIO_AMR_NB
    int SYNCDATA_VEH -> SYNCDATA_VEH
    int SYNCDATA_IVS -> SYNCDATA_IVS
org.MediaPlayer.PlayM4.Display -> org.MediaPlayer.PlayM4.Display:
    int EGL_CONTEXT_CLIENT_VERSION -> EGL_CONTEXT_CLIENT_VERSION
    int EGL_OPENGL_ES2_BIT -> EGL_OPENGL_ES2_BIT
    int EGL_BACK_BUFFER -> EGL_BACK_BUFFER
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    int EGL_DISPLAY -> EGL_DISPLAY
    int EGL_SURFACE -> EGL_SURFACE
    int EGL_CONTEXT -> EGL_CONTEXT
    android.view.SurfaceHolder mHolder -> mHolder
    android.view.Surface mViewSurface -> mViewSurface
    javax.microedition.khronos.egl.EGLDisplay mDisplay -> mDisplay
    javax.microedition.khronos.egl.EGLConfig mConfig -> mConfig
    javax.microedition.khronos.egl.EGLContext mContext -> mContext
    javax.microedition.khronos.egl.EGLSurface mSurface -> mSurface
    int m_nPort -> m_nPort
    int mSurfaceChanged -> mSurfaceChanged
    java.util.Map mEglError -> mEglError
    int[] s_windowAttribs -> s_windowAttribs
    int[] s_configAttribs -> s_configAttribs
    void setPort(int) -> setPort
    int updateSurface(android.view.SurfaceHolder) -> updateSurface
    int contextChanged() -> contextChanged
    int surfaceChanged() -> surfaceChanged
    int getAPILevel() -> getAPILevel
    int getSurfaceSize(int) -> getSurfaceSize
    void checkEglError(java.lang.String) -> checkEglError
    java.lang.Object getEglValue(int) -> getEglValue
    android.view.Surface getSurface() -> getSurface
    int eglGetError() -> eglGetError
    int eglCreateSurface() -> eglCreateSurface
    int eglDestroySurface() -> eglDestroySurface
    int eglSwapBuffers() -> eglSwapBuffers
    int eglMakeCurrent() -> eglMakeCurrent
    int eglReleaseCurrent() -> eglReleaseCurrent
    int eglDeInit() -> eglDeInit
    int eglInit() -> eglInit
org.MediaPlayer.PlayM4.Display$1 -> org.MediaPlayer.PlayM4.Display$1:
    long serialVersionUID -> serialVersionUID
org.MediaPlayer.PlayM4.Player -> org.MediaPlayer.PlayM4.Player:
    java.lang.String TAG -> TAG
    org.MediaPlayer.PlayM4.Player mPlayer -> mPlayer
    int STREAM_REALTIME -> STREAM_REALTIME
    int STREAM_FILE -> STREAM_FILE
    int VOLUME_MAX -> VOLUME_MAX
    int VOLUME_DEFAULT -> VOLUME_DEFAULT
    int VOLUME_MUTE -> VOLUME_MUTE
    int MAX_PORT -> MAX_PORT
    int MAX_REGION_NUM -> MAX_REGION_NUM
    org.MediaPlayer.PlayM4.Display[][] displays -> displays
    org.MediaPlayer.PlayM4.Player getInstance() -> getInstance
    int getPort() -> getPort
    boolean freePort(int) -> freePort
    boolean openFile(int,java.lang.String) -> openFile
    boolean closeFile(int) -> closeFile
    boolean play(int,android.view.SurfaceHolder) -> play
    boolean stop(int) -> stop
    boolean pause(int,int) -> pause
    int getSdkVersion() -> getSdkVersion
    int getLastError(int) -> getLastError
    boolean openStream(int,byte[],int,int) -> openStream
    boolean closeStream(int) -> closeStream
    boolean setSecretKey(int,int,byte[],int) -> setSecretKey
    boolean setVideoWindow(int,int,android.view.SurfaceHolder) -> setVideoWindow
    boolean inputData(int,byte[],int) -> inputData
    boolean playSound(int) -> playSound
    boolean stopSound() -> stopSound
    boolean setStreamOpenMode(int,int) -> setStreamOpenMode
    int getCurrentFrameRate(int) -> getCurrentFrameRate
    boolean getBMP(int,byte[],int,org.MediaPlayer.PlayM4.Player$MPInteger) -> getBMP
    boolean getJPEG(int,byte[],int,org.MediaPlayer.PlayM4.Player$MPInteger) -> getJPEG
    boolean getPictureSize(int,org.MediaPlayer.PlayM4.Player$MPInteger,org.MediaPlayer.PlayM4.Player$MPInteger) -> getPictureSize
    boolean fast(int) -> fast
    boolean slow(int) -> slow
    long getFileTime(int) -> getFileTime
    int getFileTotalFrames(int) -> getFileTotalFrames
    float getPlayPos(int) -> getPlayPos
    boolean setPlayPos(int,float) -> setPlayPos
    int getPlayedTime(int) -> getPlayedTime
    int getPlayedTimeEx(int) -> getPlayedTimeEx
    boolean setPlayedTimeEx(int,int) -> setPlayedTimeEx
    int getPlayedFrames(int) -> getPlayedFrames
    int getCurrentFrameNum(int) -> getCurrentFrameNum
    boolean setCurrentFrameNum(int,int) -> setCurrentFrameNum
    int getSourceBufferRemain(int) -> getSourceBufferRemain
    boolean resetSourceBuffer(int) -> resetSourceBuffer
    boolean resetSourceBufFlag(int) -> resetSourceBufFlag
    int getDisplayBuf(int) -> getDisplayBuf
    boolean setDisplayBuf(int,int) -> setDisplayBuf
    boolean setDisplayRegion(int,int,org.MediaPlayer.PlayM4.Player$MPRect,android.view.SurfaceHolder,int) -> setDisplayRegion
    boolean resetBuffer(int,int) -> resetBuffer
    int getBufferValue(int,int) -> getBufferValue
    boolean setDecodeFrameType(int,int) -> setDecodeFrameType
    boolean getSystemTime(int,org.MediaPlayer.PlayM4.Player$MPSystemTime) -> getSystemTime
    boolean setFileEndCB(int,org.MediaPlayer.PlayM4.PlayerCallBack$PlayerPlayEndCB) -> setFileEndCB
    boolean setDisplayCB(int,org.MediaPlayer.PlayM4.PlayerCallBack$PlayerDisplayCB) -> setDisplayCB
    boolean setDecodeCB(int,org.MediaPlayer.PlayM4.PlayerCallBack$PlayerDecodeCB) -> setDecodeCB
    int GetPort() -> GetPort
    int FreePort(int) -> FreePort
    int OpenFile(int,byte[]) -> OpenFile
    int CloseFile(int) -> CloseFile
    int GetLastError(int) -> GetLastError
    int GetSdkVersion() -> GetSdkVersion
    int Play(int,android.view.Surface) -> Play
    int PlayEx(int,org.MediaPlayer.PlayM4.Display) -> PlayEx
    int Stop(int) -> Stop
    int Pause(int,int) -> Pause
    int Fast(int) -> Fast
    int Slow(int) -> Slow
    int PlaySound(int) -> PlaySound
    int StopSound() -> StopSound
    int SetStreamOpenMode(int,int) -> SetStreamOpenMode
    int OpenStream(int,byte[],int,int) -> OpenStream
    int CloseStream(int) -> CloseStream
    int InputData(int,byte[],int) -> InputData
    long GetFileTime(int) -> GetFileTime
    int GetFileTotalFrames(int) -> GetFileTotalFrames
    float GetPlayPos(int) -> GetPlayPos
    int SetPlayPos(int,float) -> SetPlayPos
    int GetPlayedTime(int) -> GetPlayedTime
    int GetPlayedTimeEx(int) -> GetPlayedTimeEx
    int SetPlayedTimeEx(int,int) -> SetPlayedTimeEx
    int GetPlayedFrames(int) -> GetPlayedFrames
    int GetCurrentFrameNum(int) -> GetCurrentFrameNum
    int SetCurrentFrameNum(int,int) -> SetCurrentFrameNum
    int SetVideoWindow(int,int,android.view.Surface) -> SetVideoWindow
    int SetVideoWindowEx(int,int,org.MediaPlayer.PlayM4.Display) -> SetVideoWindowEx
    int GetCurrentFrameRate(int) -> GetCurrentFrameRate
    int GetPictureSize(int,org.MediaPlayer.PlayM4.Player$MPInteger,org.MediaPlayer.PlayM4.Player$MPInteger) -> GetPictureSize
    int GetSourceBufferRemain(int) -> GetSourceBufferRemain
    int ResetSourceBuffer(int) -> ResetSourceBuffer
    int ResetSourceBufFlag(int) -> ResetSourceBufFlag
    int GetDisplayBuf(int) -> GetDisplayBuf
    int SetDisplayBuf(int,int) -> SetDisplayBuf
    int SetDisplayRegion(int,int,org.MediaPlayer.PlayM4.Player$MPRect,org.MediaPlayer.PlayM4.Display,int) -> SetDisplayRegion
    int ResetBuffer(int,int) -> ResetBuffer
    int GetBufferValue(int,int) -> GetBufferValue
    int SetDecodeFrameType(int,int) -> SetDecodeFrameType
    int GetBMP(int,byte[],int,org.MediaPlayer.PlayM4.Player$MPInteger) -> GetBMP
    int GetJPEG(int,byte[],int,org.MediaPlayer.PlayM4.Player$MPInteger) -> GetJPEG
    int SetFileEndCallback(int,org.MediaPlayer.PlayM4.PlayerCallBack$PlayerPlayEndCB) -> SetFileEndCallback
    int SetDisplayCallback(int,org.MediaPlayer.PlayM4.PlayerCallBack$PlayerDisplayCB) -> SetDisplayCallback
    int SetDecodeCallback(int,org.MediaPlayer.PlayM4.PlayerCallBack$PlayerDecodeCB) -> SetDecodeCallback
    int SetDecCBStream(int,int) -> SetDecCBStream
    int SetSecretKey(int,int,byte[],int) -> SetSecretKey
    int GetSystemTime(int,org.MediaPlayer.PlayM4.Player$MPSystemTime) -> GetSystemTime
    int GetCpuFeatures() -> GetCpuFeatures
    int SetDisplayClass(org.MediaPlayer.PlayM4.Display) -> SetDisplayClass
org.MediaPlayer.PlayM4.Player$MPFramePos -> org.MediaPlayer.PlayM4.Player$MPFramePos:
org.MediaPlayer.PlayM4.Player$MPInteger -> org.MediaPlayer.PlayM4.Player$MPInteger:
    int value -> value
org.MediaPlayer.PlayM4.Player$MPRect -> org.MediaPlayer.PlayM4.Player$MPRect:
    int left -> left
    int right -> right
    int top -> top
    int bottom -> bottom
org.MediaPlayer.PlayM4.Player$MPSystemTime -> org.MediaPlayer.PlayM4.Player$MPSystemTime:
    int year -> year
    int month -> month
    int day -> day
    int hour -> hour
    int min -> min
    int sec -> sec
    int ms -> ms
org.MediaPlayer.PlayM4.Player$MP_DECODE_TYPE -> org.MediaPlayer.PlayM4.Player$MP_DECODE_TYPE:
    int DECODE_ALL -> DECODE_ALL
    int DECODE_VIDEO_KEYFRAME -> DECODE_VIDEO_KEYFRAME
    int DECODE_NONE -> DECODE_NONE
org.MediaPlayer.PlayM4.PlayerCallBack -> org.MediaPlayer.PlayM4.PlayerCallBack:
org.MediaPlayer.PlayM4.PlayerCallBack$PlayerDecodeCB -> org.MediaPlayer.PlayM4.PlayerCallBack$PlayerDecodeCB:
    void onDecode(int,int,int) -> onDecode
org.MediaPlayer.PlayM4.PlayerCallBack$PlayerDisplayCB -> org.MediaPlayer.PlayM4.PlayerCallBack$PlayerDisplayCB:
    void onDisplay(int,java.nio.ByteBuffer,int,int,int,int,int,int) -> onDisplay
org.MediaPlayer.PlayM4.PlayerCallBack$PlayerPlayEndCB -> org.MediaPlayer.PlayM4.PlayerCallBack$PlayerPlayEndCB:
    void onPlayEnd(int) -> onPlayEnd
